#+title: Parallel EVM: Sei-v2
#+date: <2024-06-28 21:25>
#+description: This is a personal note for [[https://blog.sei.io/sei-v2-the-first-parallelized-evm/][Sei-v2-blog]]
#+filetags: evm:parallel

This is a personal note for [[https://blog.sei.io/sei-v2-the-first-parallelized-evm/][Sei-v2-blog]] as well as some terminology explained by [[https://chatgpt.com/g/g-TJq7kBEsX-evm-gpt][EVM GPT]].

* Blockchain fundamentals
** Mainnet and Testnet
- Mainnet: real transactions occur and have real-world value; any operation is final and irreversible.
- Testnet: a sandbox environment with test cryptocurrencies without real-world value.

** Mainnet Alpha and Beta
- Alpha: test core functionalities and gather initial feedback in live environment.
- Beta: more stable and feature-complete, but still need more testing.

** Layer 1 and Layer 2
- L1: the main network where all transactions are processed and the primary chain is maintained.
- L2: secondary frameworks on top of L1 chain, aimed to enhance scalability without compromising the security of the L1.

** Rollups
- Processes transactions off-chain and periodically submits a summary (rollup) to L1.
- Optimistic rollups: assume transactions are valid be default and use a challenge period to allow disputes
  - Examples: Optimism, Arbitrum.
- ZK-rollups: use zero-knowledge proofs to validate transactions.
  - Examples: zkSync, StarkNet.

** State channels
- allow participants to conduct numerous off-chain transactions, with only the final state recorded on the L1.
- Examples: Bitcoin lightning network.

** Sidechains
- Independent blockchains running parallel to the main chain, with own consensus and security.
- Examples: Polygon.

**  Ethereum and EVM
- Ethereum: a blockchain ecosystem, includes the blockchain, consensus mechanism, smart contracts, native cryptocurrency.
- EVM: the runtime environment to execute smart contracts in Ethereum.

** IAVL tree
- AVL tree: self-balancing binary tree where the difference in heights between left and right subtrees of anynode is at most one.
- IAVL tree: immutable AVL tree; node cannot be changed once it is added.

** CosmWasm contract
- Allows developers to write fast and portable smart contracts in WebAssembly.
- Designed to be interoperable within in the Cosmos ecosystem, a network of independent blockchains connected via the Inter-blockchain communication (IBC) protocol.

** Cosmos Ecosystem
- A network of independent, interoperable blockchains designed to create an Internet of blockchain.
- Decouples the consensus (BFT consensus engine) and networking (IBC protocol) layers from the application layers
- Cosmos SDK: a modular framework for building application-specific blockchains efficiently.
- Cosmos Hub: the first blockchain in the Cosmos network, serves as a central hub to connect multiple blockchains via IBC.

** Blockchain layers
- Infrastructure layer: the physical devices that support the network; and the underlying communication protocols for data transfer between nodes.
- Data layer: the distributed ledger and the storage methods.
- Consensus layer: the protocols, validators and miners.
- Execution layer: smart contracts and virtual machines.
- Application layer: dApps to provide service and user interfaces.
- Governance layer: the community decision-making process and proposals.
- Security layer: cryptographic primitives and security protocols to avoid attacks.

** Optimistic parallelization
- Multiple transactions are processed in parallel under the assumption that they will conflict with each other; necessary corrections are made afterwards if conflicts are detected.
- Increase throughput if conflicts are well handled.
 
** Integrated and Modular blockchain
- Integrated: all components, e.g., execution layer, consensus mechanism, networking are tightly coupled; faster internal communication but lower flexibility and scalability.
- Modular: allow independent upgrades for different components; enhance scalability.

** EVM Execution and storage layer
- Execution: responsible for running smart contracts and processing transactions.
- Storage: store all blockchain data, e.g., accounts, smart contract states, transaction history.

** Block time and finalize time
- Block: the average time for a new block to be added.
- Finalize: the period after which a block is considered irreversible.
- Faster block times often imply cheaper transaction fees due to increased transaction throughput and less block competition.

** Blockchain audit
- A review of a blockchain to ensures its security and functionality.

* What is Sei
- On mainnet beta since August 2023.
- Consistently finalizes blocks at 390ms; the fastest chain in existence.
- Consistently sees activity of >45 TPS (transaction per seconds); the second highest number of successful transactions per second.
- Allows for Cosmwasm smart contracts written in Rust; more execution environments like EVM is the biggest request.

* What is Sei v2
- The first fully parallelized EVM.
- Backwards compatibility of EVM smart contracts.
- Optimistic parallelization; support parallelization without requiring any dependencies.
- Improves the storage layer to prevent state bloat, read/write, and state sync for new nodes.
- Seamless composability between different execution environments.
- Offers 28,300 batched transactions per second of throughput; 390ms block times and 390ms finality; far cheaper per-transaction costs.
- Once audits are complete, the upgrade is released in a public testnet in Q1 2024, and deployed to mainnet in H1 2024.

** Backwards compatibility
# - Every major contract on Ethereum can seamlessly be deployed on Sei with no code changes.
# - Sei binary imports Geth (a Go implementation of the EVM) to process Ethereum transactions and state updates with a special interface Sei makes for the EVM.
# - The RPC interface will be identical for Sei as EVM, existing tooling from Ethereum can be seamlessly reused, e.g., Metamask, Hardhat.
- Ethereum contracts can be seamlessly deployed on Sei v2 with no code changes.
- User can send a Eth transaction to the Ethereum contract on Sei v2 via the same interface, e.g., Metamask, Hardhat.
- Sei v2 imports Geth (a Go EVM implementation) to process the Eth transaction, and convert the result to Sei storage.


** Optimistic parallelization
- Sei requires smart contract developers to optionally define the state that smart contracts are using, Sei v2 removes this need.
- Sei v2 chain optimistically runs all transactions in parallel, when reaching conflicts, i.e., transactions touching the same state, the chain tracks the storage parts each transaction is touching.
- Transactions touching different parts will be rerun in parallel; transactions touching the same state will be rerun sequentially.
- Recursively continue until no more conflicts.
- Since the transactions are ordered in a block, this process is deterministic.

** SeiDB
- Sei uses a vanilla database layer composed of an IAVL tree, which is less efficient in terms of storage and latency.
- Sei v2 breaks the single IAVL tree into 2 components:
  - state store: provide low latency direct access to raw key-value pairs to remove the overhead of redundant metadata and disk usage; uses a write-ahead log to help event recovery.
  - state commitment: use an in-memory IAVL tree to help validators reach consensus faster.
- After benchmarking, Sei v2 replaces GoLevelDB with PebbleDB for better read/write in multi-threaded access.

** Interoperability
- Sei v2 processes different transactions, e.g., Cosmwasm, EVM in a uniformed way, and then forwards them to different storage sections.

