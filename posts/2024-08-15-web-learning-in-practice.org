#+title: Web learning in practice
#+date: <2024-08-15 19:26>
#+description: This post records the basic web development knowledge I have learned in practice.
#+filetags: web app

This post records the basic web development knowledge I have learned in practice.

* Basic html structure
#+begin_src html
<!DOCTYPE html>
<html lang="en">

    <!-- A head -->
    <head>
        <meta charset="UTF-8">
        <!-- to accommodate different screen size -->
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- A tab name -->
        <title>A website</title>
        <link rel="stylesheet" href="styles.css">
    </head>


    <!-- A body -->
    <<body>
    <!-- A page header  -->
    <header>
        <h1>Welcome</h1>
    </header>

    <!-- A navigation panel -->
    <nav>
        <ul>
        <<li><a href="index.html">Home</a></li>
        </ul>
    </nav>

    <!-- The main content -->
    <main>
        <section id="home">
        <h2>Home</h2>
        <p>Welcome!</p>
        </section>
    </main>

    <!-- A footer -->
    <footer>
        <p>&copy; All rights reserved.</p>
    </footer>
    </body>

</html>
#+end_src

* Tags
- src_html[:exports code]{<a>}: contain links; have following attributes:
  - src_html[:exports code]{target="_blank"}: open the link in a new tab.
  - src_html[:exports code]{title="Go to the link"}: the tooltip message, i.e., the floating message when a user hovers over.
- src_html[:exports code]{<span>}: don't add line breaks before or after it.
- src_html[:exports code]{<hr>}: horizontal rule.

* Attributes
- src_html[:exports code]{id="home"}:
  - allow specific styling of the element, e.g., src_html[:exports code]{#home ul {...}} only styles the src_html[:exports code]{ul} in the block with the same id.

* Javascript
** Fetch from an HTML URL
1. src_js[:exports code]{await fetch(url)}: returns a src_js[:exports code]{Response} object.
   - src_js[:exports code]{await} waits for the method to complete.
2. src_js[:exports code]{await response.text()}: returns the src_js[:exports code]{html} string.
3. src_js[:exports code]{DOMParser().parseFromString(postHtml, "text/html")}: returns a src_js[:exports code]{Document} object, which is a complete DOM tree from the HTML string; src_js[:exports code]{DOMParser} is a built-in browser API.
4. src_js[:exports code]{postDoc.getElementById("content")}: returns an src_js[:exports code]{Element} with the src_js[:exports code]{content} id name.
5. src_js[:exports code]{content.querySelector(".post-title a")}: fetches the first src_js[:exports code]{Element} with the src_js[:exports code]{post-title} class name, and returns the first src_js[:exports code]{Element} the first src_js[:exports code]{<a>} (anchor) tag.
   - src_js[:exports code]{.} for classes, src_js[:exports code]{#} for IDs (IDs should be unique within a page)

** Modify a DOM
- src_js[:exports code]{content.querySelector(".taglist").remove()}: removes the element from the DOM, i.e., it modifies src_js[:exports code]{content}.

** Syntax
- src_js[:exports code]{const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}: add a backslash to any special character in the query; ~$&~ is a special pattern used in Javascript's src_js[:exports code]{replacement} method.
