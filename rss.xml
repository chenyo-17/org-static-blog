<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[org-static-blog]]></title>
<description><![CDATA[org-static-blog]]></description>
<link>https://chenyo-17.github.io/org-static-blog</link>
<lastBuildDate>Sun, 23 Jun 2024 19:04:11 +0200</lastBuildDate>
<item>
  <title><![CDATA[Weblab notes: React route]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb99e571">1. Router</a></li>
<li><a href="#org969f609">2. Link</a></li>
<li><a href="#orge15879f">3. Workshop 3</a>
<ul>
<li><a href="#org8897e96">3.1. Structure</a></li>
<li><a href="#org2cfdc7d">3.2. States</a></li>
<li><a href="#orgd12543a">3.3. Props</a></li>
<li><a href="#org40d784e">3.4. Why passing down the update function in props 1, 4, 6?</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<div id="outline-container-orgb99e571" class="outline-2">
<h2 id="orgb99e571"><span class="section-number-2">1.</span> Router</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>use the Reach <a href="https://reach.tech/router/">Reach Router</a> library</li>
<li>URL -&gt; Router -&gt; render different components</li>
</ul>
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>&lt;App&gt;
<span class="linenr">2: </span>  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">conditional rendering based on curren url</span>
<span class="linenr">3: </span>  &lt;Router&gt;
<span class="linenr">4: </span>    &lt;Home path=<span style="color: #98be65;">"/"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">root path</span>
<span class="linenr">5: </span>    &lt;Dashboard path=<span style="color: #98be65;">"dashboard"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">relative to the current URL</span>
<span class="linenr">6: </span>    &lt;Team path=<span style="color: #98be65;">"/team"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">absolute path: root path + "/team"</span>
<span class="linenr">7: </span>    &lt;NotFound <span style="color: #51afef;">default</span> /&gt;
<span class="linenr">8: </span>  &lt;/Router&gt;
<span class="linenr">9: </span>&lt;/App&gt;;
</pre>
</div>
</div>
</div>
<div id="outline-container-org969f609" class="outline-2">
<h2 id="org969f609"><span class="section-number-2">2.</span> Link</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>relative: <code class="src src-js">&lt;Link to=<span style="color: #98be65;">"newpage"</span>&gt;Click me&lt;/Link&gt;</code></li>
<li>absolute: <code class="src src-js">&lt;Link to=<span style="color: #98be65;">"/newpage"</span>&gt;Click me&lt;/Link&gt;</code></li>
</ul>
</div>
</div>
<div id="outline-container-orge15879f" class="outline-2">
<h2 id="orge15879f"><span class="section-number-2">3.</span> Workshop 3</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org8897e96" class="outline-3">
<h3 id="org8897e96"><span class="section-number-3">3.1.</span> Structure</h3>
<div class="outline-text-3" id="text-3-1">

<figure id="org2e27230">
<img src="./static/workshop-3-structure.png" alt="workshop-3-structure.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>The Catbook structure in workshop 3</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org2cfdc7d" class="outline-3">
<h3 id="org2cfdc7d"><span class="section-number-3">3.2.</span> States</h3>
<div class="outline-text-3" id="text-3-2">
<table>


<colgroup>
<col  class="org-center">
</colgroup>

<colgroup>
<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-center">name</th>
<th scope="col" class="org-left">states</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-center">Feed</td>
<td class="org-left"><code>stories</code>: a list of stories</td>
</tr>

<tr>
<td class="org-center">Card</td>
<td class="org-left"><code>comments</code>: a list of comments for a story id</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgd12543a" class="outline-3">
<h3 id="orgd12543a"><span class="section-number-3">3.3.</span> Props</h3>
<div class="outline-text-3" id="text-3-3">
<table>


<colgroup>
<col  class="org-center">
</colgroup>

<colgroup>
<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-center">index</th>
<th scope="col" class="org-left">props</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-center">1</td>
<td class="org-left">a function to update <code>stories</code></td>
</tr>

<tr>
<td class="org-center">2</td>
<td class="org-left">all attributes in a story</td>
</tr>

<tr>
<td class="org-center">3</td>
<td class="org-left">the attributes used to display a story</td>
</tr>

<tr>
<td class="org-center">4</td>
<td class="org-left">a story id; a list of comments under the story; a function to update <code>comments</code></td>
</tr>

<tr>
<td class="org-center">5</td>
<td class="org-left">all attributes in a comment</td>
</tr>

<tr>
<td class="org-center">6</td>
<td class="org-left">a comment id; the function to update <code>comments</code></td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org40d784e" class="outline-3">
<h3 id="org40d784e"><span class="section-number-3">3.4.</span> Why passing down the update function in props 1, 4, 6?</h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li>To share the parent states, i.e., <code>stories</code> and <code>comments</code> to child component. Since the post action happens in the child component, we need a way to automatically update the states to see new contents immediately.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo-17.github.io/org-static-blog/tags.html">Tags</a>: <a href="https://chenyo-17.github.io/org-static-blog/tag-study:web-development:react.html">study:web-development:react</a> <a href="https://chenyo-17.github.io/org-static-blog/tag-lecture:mit.html">lecture:mit</a> </div>]]></description>
  <category><![CDATA[study:web-development:react]]></category>
  <category><![CDATA[lecture:mit]]></category>
  <link>https://chenyo-17.github.io/org-static-blog/2024-06-23-weblab-notes:-react-route.html</link>
  <guid>https://chenyo-17.github.io/org-static-blog/2024-06-23-weblab-notes:-react-route.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:38:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Weblab notes: React hooks]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org61baadb">1. What is a React hook</a>
<ul>
<li><a href="#orgaa58121">1.1. <code>useState</code> is not enough</a></li>
<li><a href="#orgfe59130">1.2. <code>useEffect</code> runs after specific variable change</a></li>
</ul>
</li>
<li><a href="#org5b4861c">2. React hook patterns</a>
<ul>
<li><a href="#org5ea1ad6">2.1. Fetch and send data</a></li>
<li><a href="#orgd865c45">2.2. Conditional rendering</a></li>
<li><a href="#org83769b8">2.3. Render an array of Data</a></li>
</ul>
</li>
<li><a href="#org1c43da2">3. Example: Stopwatch</a></li>
<li><a href="#org399e039">4. DOM and component mounting</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org61baadb" class="outline-2">
<h2 id="org61baadb"><span class="section-number-2">1.</span> What is a React hook</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Special functions to access parts of the component lifestyle.</li>
<li>e.g., <code>useState</code></li>
</ul>
</div>
<div id="outline-container-orgaa58121" class="outline-3">
<h3 id="orgaa58121"><span class="section-number-3">1.1.</span> <code>useState</code> is not enough</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #51afef;">const</span> [<span style="color: #dcaeea;">persons</span>, <span style="color: #dcaeea;">setPersons</span>] = useState([]);
<span class="linenr">2: </span>
<span class="linenr">3: </span>testingStuff = () =&gt; {
<span class="linenr">4: </span>    <span style="color: #5B6268;">/* </span><span style="color: #5B6268;">assume persons is empty before</span><span style="color: #5B6268;"> */</span>
<span class="linenr">5: </span>    setPersons([...persons, <span style="color: #98be65;">"me"</span>]);
<span class="linenr">6: </span>}
<span class="linenr">7: </span>console.log(persons);
</pre>
</div>

<ul class="org-ul">
<li>The output of <code class="src src-js">console.log</code> is <code>[]</code> instead of <code>["me"]</code> because setting a state is <b><b>async</b></b>!</li>
<li>To do something immediately after a state is changed, use <code>useEffect</code> hook!</li>
</ul>
</div>
</div>
<div id="outline-container-orgfe59130" class="outline-3">
<h3 id="orgfe59130"><span class="section-number-3">1.2.</span> <code>useEffect</code> runs after specific variable change</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>useEffect(() =&gt; {
<span class="linenr">2: </span>    console.log(persons);
<span class="linenr">3: </span>}, [persons]);
</pre>
</div>

<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>useEffect(() =&gt; {
<span class="linenr">2: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">do something, e.g., interact with an external service</span><span style="color: #5B6268;"> */</span>
<span class="linenr">3: </span>
<span class="linenr">4: </span><span style="color: #51afef;">return</span> () =&gt; {
<span class="linenr">5: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">cleanup function on dismount, e.g., disconnect from external service</span><span style="color: #5B6268;"> */</span>
<span class="linenr">6: </span>}
<span class="linenr">7: </span>}, [<span style="color: #5B6268;">/*</span><span style="color: #5B6268;">dependencies</span><span style="color: #5B6268;"> */</span>])
</pre>
</div>

<ul class="org-ul">
<li><code class="src src-js">useEffect(myFunction, [var1, var2])</code> calls <code>myFunction</code> everytime when <code>var1</code> or <code>var2</code> changes</li>
<li><code class="src src-js">useEffect(myFunction, []])</code> calls only once when the component is rendered for the first time (on mount)</li>
<li><code class="src src-js">useEffect(myFunction)</code> calls at every render</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org5b4861c" class="outline-2">
<h2 id="org5b4861c"><span class="section-number-2">2.</span> React hook patterns</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org5ea1ad6" class="outline-3">
<h3 id="org5ea1ad6"><span class="section-number-3">2.1.</span> Fetch and send data</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">fetch data on mount</span><span style="color: #5B6268;"> */</span>
<span class="linenr">2: </span>useEffect(() =&gt; {
<span class="linenr">3: </span>    get(<span style="color: #98be65;">"/api/packages"</span>).then((packageList) =&gt; {
<span class="linenr">4: </span>        setPackages(packageList);
<span class="linenr">5: </span>    });
<span class="linenr">6: </span>}, []);
</pre>
</div>

<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">send data then toggle admin state</span><span style="color: #5B6268;"> */</span>
<span class="linenr">2: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">handleToggleAdmin</span> = () =&gt; {
<span class="linenr">3: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">.then(), do something once the promise is fulfilled</span>
<span class="linenr">4: </span>    post(<span style="color: #98be65;">"/api/user/admin"</span>, { admin: !admin }).then(() =&gt; {
<span class="linenr">5: </span>        setAdmin(!admin);
<span class="linenr">6: </span>    });
<span class="linenr">7: </span>};
<span class="linenr">8: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">&lt;Button onClick={handleToggleAdmin}</span><span style="color: #5B6268;"> */</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd865c45" class="outline-3">
<h3 id="orgd865c45"><span class="section-number-3">2.2.</span> Conditional rendering</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">JSX is a way of writing HTML in js</span>
<span class="linenr">2: </span><span style="color: #51afef;">let</span> <span style="color: #dcaeea;">content</span> = loading ? &lt;p&gt;Loading...&lt;/p&gt; : &lt;p&gt;Loaded&lt;/p&gt;;
<span class="linenr">3: </span><span style="color: #51afef;">return</span> (
<span class="linenr">4: </span>    &lt;div&gt;
<span class="linenr">5: </span>        &lt;h1&gt;Title&lt;/h1&gt;
<span class="linenr">6: </span>        {content}
<span class="linenr">7: </span>    &lt;/div&gt;
<span class="linenr">8: </span>);
</pre>
</div>
</div>
</div>
<div id="outline-container-org83769b8" class="outline-3">
<h3 id="org83769b8"><span class="section-number-3">2.3.</span> Render an array of Data</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">data</span> = [
<span class="linenr">2: </span>    { id: <span style="color: #da8548; font-weight: bold;">0</span>, text: <span style="color: #98be65;">"Text 1"</span> },
<span class="linenr">3: </span>    { id: <span style="color: #da8548; font-weight: bold;">1</span>, text: <span style="color: #98be65;">"Text 2"</span> },
<span class="linenr">4: </span>];
<span class="linenr">5: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">render a component for each data item</span>
<span class="linenr">6: </span><span style="color: #51afef;">return</span> data.map((item) =&gt; (
<span class="linenr">7: </span>    &lt;ItemComponent key={item.id}&gt;{item.text}&lt;/ItemComponent&gt;
<span class="linenr">8: </span>));
</pre>
</div>
<ul class="org-ul">
<li><code>key</code> is a special prop in React; it is used identify which item has changed efficiently</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1c43da2" class="outline-2">
<h2 id="org1c43da2"><span class="section-number-2">3.</span> Example: Stopwatch</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr"> 1: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">Stopwatch</span> = () =&gt; {
<span class="linenr"> 2: </span>    <span style="color: #51afef;">const</span> [<span style="color: #dcaeea;">time</span>, <span style="color: #dcaeea;">setTimer</span>] = useState(<span style="color: #da8548; font-weight: bold;">0</span>);
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>    useEffect(() =&gt; {
<span class="linenr"> 5: </span>        <span style="color: #51afef;">const</span> <span style="color: #dcaeea;">timer</span> = setInterval(() =&gt; {
<span class="linenr"> 6: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">setTimer accepts either a new state value,</span>
<span class="linenr"> 7: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">or a function that takes the previous state (oldTime) as an argument and returns the new state</span>
<span class="linenr"> 8: </span>            setTime((oldTime) =&gt; oldTime + <span style="color: #da8548; font-weight: bold;">1</span>);
<span class="linenr"> 9: </span>        }, <span style="color: #da8548; font-weight: bold;">1000</span>);
<span class="linenr">10: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if not properly cleanup after unmounting</span>
<span class="linenr">11: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">the timer will continue to run even the state no longer exists</span>
<span class="linenr">12: </span>        <span style="color: #51afef;">return</span> () =&gt; clearInterval(timer);
<span class="linenr">13: </span>    }, []);
<span class="linenr">14: </span>    <span style="color: #51afef;">return</span> &lt;&gt;TIme: {time}&lt;/&gt;;
<span class="linenr">15: </span>};
</pre>
</div>
</div>
</div>
<div id="outline-container-org399e039" class="outline-2">
<h2 id="org399e039"><span class="section-number-2">4.</span> DOM and component mounting</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>DOM (Document Object Model): a programming interface for web documents; represents the structure of a document, e.g., HTML, as a tree of objects, where each object corresponds to a part of the document; it dynamically updates the document contents
<ul class="org-ul">
<li>React is a framework that manipulates DOM</li>
</ul></li>
<li>A React component is unmounted when:
<ul class="org-ul">
<li>conditional rendering</li>
<li>routing; navigating from one route to another</li>
<li>its parent component is unmounted</li>
</ul></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo-17.github.io/org-static-blog/tags.html">Tags</a>: <a href="https://chenyo-17.github.io/org-static-blog/tag-study:web-development:react.html">study:web-development:react</a> <a href="https://chenyo-17.github.io/org-static-blog/tag-lecture:mit.html">lecture:mit</a> </div>]]></description>
  <category><![CDATA[study:web-development:react]]></category>
  <category><![CDATA[lecture:mit]]></category>
  <link>https://chenyo-17.github.io/org-static-blog/2024-06-23-weblab-notes:-react-hooks.html</link>
  <guid>https://chenyo-17.github.io/org-static-blog/2024-06-23-weblab-notes:-react-hooks.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:21:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Hello world]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4f41171">1. Hallo!</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org4f41171" class="outline-2">
<h2 id="org4f41171"><span class="section-number-2">1.</span> Hallo!</h2>
<div class="outline-text-2" id="text-1">
<p>
This is the first blog with org-static-blog!
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo-17.github.io/org-static-blog/tags.html">Tags</a>: <a href="https://chenyo-17.github.io/org-static-blog/tag-personal.html">personal</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <link>https://chenyo-17.github.io/org-static-blog/2024-06-23-hello-world.html</link>
  <guid>https://chenyo-17.github.io/org-static-blog/2024-06-23-hello-world.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:04:00 +0200</pubDate>
</item>
</channel>
</rss>
