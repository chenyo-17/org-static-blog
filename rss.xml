<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Chenyo's Blog]]></title>
<description><![CDATA[Chenyo's Blog]]></description>
<link>https://chenyo.me</link>
<lastBuildDate>Sun, 08 Sep 2024 23:10:43 +0200</lastBuildDate>
<item>
  <title><![CDATA[Build a free Telegram sticker tag bot]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orge182f78">1. What happened</a></li>
<li><a href="#org860f0ba">2. What do I need</a></li>
<li><a href="#org65562b1">3. How to build a bot</a>
<ul>
<li><a href="#org621b0eb">3.1. How to build a sticker tag bot</a></li>
<li><a href="#org9490ac6">3.2. How to make the bot private</a></li>
</ul>
</li>
<li><a href="#org0155f00">4. How to deploy the bot on Render</a></li>
<li><a href="#org4e3ed6b">5. How to connect to the Firebase</a></li>
<li><a href="#orged8cac2">6. How to configure UptimeRobot</a></li>
<li><a href="#org9b04e73">7. Conclusion</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orge182f78" class="outline-2">
<h2 id="orge182f78"><span class="section-number-2">1.</span> What happened</h2>
<div class="outline-text-2" id="text-1">
<p>
When I started to use Telegram, I really missed being able to search stickers by text, like I can in WeChat.
Sadly, Telegram only lets you search emojis by text, or find stickers using emojis.
</p>

<p>
After digging around, I discovered the easiest way to add this cool feature was through Telegram bots.
The idea? Store a tag-to-sticker map in the bot, then fetch all matching stickers when given a tag in the bot&rsquo;s <a href="https://core.telegram.org/bots/inline">inline mode</a>.
There are a few sticker tag bots on Telegram already, but they&rsquo;re either dead or <a href="https://github.com/vitaly-rudenko/tag-sticker-bot">can&rsquo;t handle</a> Unicode input like Chinese characters.
Plus, I&rsquo;m not super keen on trusting my data to someone else&rsquo;s database.
Moreover, I might want to use a bot for other personal stuff later.
</p>

<p>
So, I decided to build my own Telegram bot.
</p>
</div>
</div>
<div id="outline-container-org860f0ba" class="outline-2">
<h2 id="org860f0ba"><span class="section-number-2">2.</span> What do I need</h2>
<div class="outline-text-2" id="text-2">
<p>
My goal was to create a bot using only free services, including cloud storage for key-value pairs and a hosting platform to keep the bot running.
</p>

<p>
I stumbled upon <a href="https://render.com">Render</a> from an X recommendation which offers <a href="https://docs.render.com/free#monthly-usage-limits">750 hours per month</a> for free deployment (which equals 31 days), so I deployed my bot there once I got the bot running locally.
But then I found out Render&rsquo;s free tier doesn&rsquo;t offer permanent storage and shuts down services after <a href="https://docs.render.com/free#spinning-down-on-idle">15 minutes of inactivity</a>.
</p>

<p>
A sticker tag bot without memory isn&rsquo;t much use to anyone, so I went hunting for free cloud storage.
With some help from Claude and Perplexity, I discovered <a href="https://firebase.google.com/products/realtime-database/">Firebase Realtime database</a>, which offers 1GB storage and 10GB throughput per month on its <a href="https://firebase.google.com/pricing">free tier</a>.
</p>

<p>
Even with cloud storage, a bot that konks out every 15 minutes just won&rsquo;t cut it - I need my stickers now!
So my next quest was finding a way to keep the bot awake, which led me to <a href="https://uptimerobot.com">UptimeRobot</a>.
It&rsquo;s actually a web monitoring tool, but I can use it to ping the bot regularly, tricking it into staying &ldquo;active&rdquo; instead of dozing off.
</p>

<p>
So, to sum it up, building this sticker tag bot required:
</p>
<ul class="org-ul">
<li>a Telegram bot from <a href="https://t.me/botfather">BotFather</a>,</li>
<li>a free Render deployment,</li>
<li>a Firebase&rsquo;s free key-value storage, and</li>
<li>an UptimeRobot&rsquo;s free monitoring service.</li>
</ul>

<p>
However, these services do not work together automatically. Gluing them together required additional effort.
</p>
</div>
</div>
<div id="outline-container-org65562b1" class="outline-2">
<h2 id="org65562b1"><span class="section-number-2">3.</span> How to build a bot</h2>
<div class="outline-text-2" id="text-3">
<p>
The first step in building any bot is asking BotFather for a new bot and keeping the bot token secure.
Telegram offers a helpful <a href="https://core.telegram.org/bots/tutorial#executing-commands">tutorial</a> that explains the process using Java.
Examples in other languages can be found in their <a href="https://gitlab.com/Athamaxy/telegram-bot-tutorial/-/blob/main/TutorialBot.go">Gitlab repo</a>.
In my opinion, the most challenging part here is creating a unique bot username that is still available.
</p>

<p>
The next step involves working with the <a href="https://core.telegram.org/bots/api">Telegram bot API</a> in the chosen programming language.
This includes learning how to handle messages effectively.
For example, I used <a href="https://github.com/go-telegram-bot-api/telegram-bot-api">tgbotapi(Golang)</a>.
</p>
</div>
<div id="outline-container-org621b0eb" class="outline-3">
<h3 id="org621b0eb"><span class="section-number-3">3.1.</span> How to build a sticker tag bot</h3>
<div class="outline-text-3" id="text-3-1">
<p>
A sticker tag bot needs two main functionalities:
</p>
<ul class="org-ul">
<li>Handle direct messages to add new sticker tags.</li>
<li>Handle inline queries to search for stickers using a given tag.</li>
</ul>

<p>
To implement the first functionality, I created a simple state machine with two states:
</p>
<ol class="org-ol">
<li>The initial state waits for a sticker input and then moves to the tag state.</li>
<li>The tag state waits for any text input to use as the tag for the previous sticker.</li>
</ol>

<p>
To implement the second functionality, one needs to use the <a href="https://core.telegram.org/bots/api#inlinequeryresultcachedsticker">InlineQueryResultCachedSticker</a> method.
</p>

<p>
For local testing, one can use a lightweight local key-value storage to store and search sticker tags.
I used <a href="https://github.com/dgraph-io/badger">BadgerDB(Golang)</a> for example.
</p>

<p>
I noticed that the generated file ID for the same sticker is different each time, making it hard to check for duplicates when adding new tags.
To address this, I added a <code>/delete</code> method to remove tags when needed.
</p>
</div>
</div>
<div id="outline-container-org9490ac6" class="outline-3">
<h3 id="org9490ac6"><span class="section-number-3">3.2.</span> How to make the bot private</h3>
<div class="outline-text-3" id="text-3-2">
<p>
I couldn&rsquo;t find an official way to make a bot visible only to me.
Suggested by Claude, I predefined a list of authorized users.
Then I performed a sanity check before handling any messages.
</p>
</div>
</div>
</div>
<div id="outline-container-org0155f00" class="outline-2">
<h2 id="org0155f00"><span class="section-number-2">4.</span> How to deploy the bot on Render</h2>
<div class="outline-text-2" id="text-4">
<p>
Deploying a service on Render with a free account is challenging due to the lack of shell access, disk access, and non-so-live logs.
The process of making everything work at this stage was time-consuming and I even contacted Render&rsquo;s technical support although they only responded &ldquo;Ok I will close the ticket&rdquo; after the issue was self-resolved.
</p>

<p>
Three main steps are required here:
</p>
<ol class="org-ol">
<li>start an HTTP server with several endpoints at the bot, and</li>
<li>configure the web service and environment variables on Render&rsquo;s dashboard,</li>
<li>configure the <a href="https://blog.domotz.com/product-bytes/telegram-webhook-and-bot-api/">Telegram webhook</a> at the bot.</li>
</ol>

<p>
In step 1, starting an HTTP server at <code>0.0.0.0:&lt;some-port&gt;</code> is necessary.
One should also enable GET methods for the root and a health check endpoint to allow Render to scan the service regularly.
</p>

<p>
In step 2, one needs to fill in the service configuration and environment variables in different boxes.
This includes settings such as port, build command, and health check endpoint.
The issue I encountered was Render could not scan any port even if I have triple-checked that everything worked fine locally.
In the end, I solved this issue by adding the Golang build tag <code>-tags netgo</code> in the build command.
Actually this flag was configured by default, but I initially replaced it with a simpler build command.
</p>

<p>
In step 3, one needs to configure the webhook with the Bot API and to enable the POST method for the webhook at the HTTP server (this can also be handled by the Bot API).
The webhook can be <code>https: //&lt;your project&gt;.onrender.com/&lt;your-token&gt;</code> (or another unique URL).
This URL informs Telegram where to send and receive all messages for the bot.
</p>
</div>
</div>
<div id="outline-container-org4e3ed6b" class="outline-2">
<h2 id="org4e3ed6b"><span class="section-number-2">5.</span> How to connect to the Firebase</h2>
<div class="outline-text-2" id="text-5">
<p>
The Firebase Realtime database stores key-value pairs in the JSON format.
Connecting the bot with the database requires the following steps:
</p>
<ol class="org-ol">
<li>Create the app and the database on Firebase&rsquo;s dashboard.
Specifically, one needs to store the following 3 values for interaction:
<ul class="org-ul">
<li>The database URL, which looks like <code>https: //&lt;your-app&gt;-default-rtdb.*.firebasedatabase.app</code>.</li>
<li>The credential file, which can be downloaded at <code>Project settings-&gt;Service accounts-&gt;Firebase Admin SDK</code> (and should also be added to Render).</li>
</ul></li>
<li>Import the language-specific Firebase API to configure the database in the bot.
For example, I use <a href="https://pkg.go.dev/firebase.google.com/go/v4">firebase(Golang)</a>.</li>
<li>Update the database rules in Firebase dashboard to only allow authorized writes for specific tags, e.g., one name/path to refer to those key-value pairs.</li>
</ol>

<p>
It&rsquo;s worth noting that connecting to the database on Render may take some time after a fresh start.
During this initialization period, the log may display a <code>502 Bad Gateway</code> error to the database.
</p>
</div>
</div>
<div id="outline-container-orged8cac2" class="outline-2">
<h2 id="orged8cac2"><span class="section-number-2">6.</span> How to configure UptimeRobot</h2>
<div class="outline-text-2" id="text-6">
<p>
Before configuring UptimeRobot, an attempt was made to ping the bot from within itself, but this approach did not function for Render.
</p>

<p>
Using UptimeRobot to maintain the bot&rsquo;s active status involves two primary steps:
</p>
<ol class="org-ol">
<li>Enable the HEAD method (the sole method available for a free account) for any endpoint on the HTTP server.</li>
<li>Configure an HTTP(S) monitor for that endpoint, which appears as <code>&lt;you-project&gt;.onrender.com/&lt;endpoint&gt;</code>, and establish the monitoring interval to less than 15 minutes.</li>
</ol>
</div>
</div>
<div id="outline-container-org9b04e73" class="outline-2">
<h2 id="org9b04e73"><span class="section-number-2">7.</span> Conclusion</h2>
<div class="outline-text-2" id="text-7">
<p>
This post isn&rsquo;t meant to be a step-by-step guide for building a Telegram bot.
It skips some steps and doesn&rsquo;t include screenshots.
But don&rsquo;t worry, most of the missing bits can be figured out using AI language models these days.
The rest really depends on each specific situation.
The main point here is to show how to set up a free small web service, even when there&rsquo;s no single platform that does it all.
</p>

<p>
When I first wrote this, my bot had been up and running for 10 days.
It only had 30 minutes of downtime, which I think happened because UptimeRobot couldn&rsquo;t reach Render&rsquo;s IP address during that time.
</p>

<p>
Right now, the repository is private since I plan to add a second functionality to the bot soon.
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-tool.html">tool</a> <a href="https://chenyo.me/tag-telegram.html">telegram</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <category><![CDATA[telegram]]></category>
  <link>https://chenyo.me/2024-09-08-build-a-free-telegram-sticker-bot.html</link>
  <guid>https://chenyo.me/2024-09-08-build-a-free-telegram-sticker-bot.html</guid>
  <pubDate>Sun, 08 Sep 2024 17:01:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Install Doom Emacs with Lisp native compilation in WSL2]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1c9ab46">1. Assumptions</a></li>
<li><a href="#orga272317">2. Install prerequisite packages</a></li>
<li><a href="#org364c109">3. Install Emacs 29.4</a>
<ul>
<li><a href="#org5da0b33">3.1. Before building</a></li>
<li><a href="#org5a81b5a">3.2. Build Emacs 29.4 with native-comp</a></li>
</ul>
</li>
<li><a href="#org59d5d98">4. Install <code>ripgrep</code></a></li>
<li><a href="#org8008b50">5. Install Doom Emacs</a></li>
<li><a href="#org6f03a33">6. Some issues with running Emacs in WSL2</a></li>
</ul>
</div>
</nav>
<p>
Today I installed Doom Emacs for my husband on his WSL2.
Although the entire process was guided by Claude, there were some back-and-forth during the interaction.
Therefore I would like to record the full commands I have used here in sequence for any potential reference.
</p>
<div id="outline-container-org1c9ab46" class="outline-2">
<h2 id="org1c9ab46"><span class="section-number-2">1.</span> Assumptions</h2>
<div class="outline-text-2" id="text-1">
<p>
This installation guide assumes a fresh installation of WSL2 Ubuntu 22.04 on Windows 11 in 2024 September.
</p>
</div>
</div>
<div id="outline-container-orga272317" class="outline-2">
<h2 id="orga272317"><span class="section-number-2">2.</span> Install prerequisite packages</h2>
<div class="outline-text-2" id="text-2">
<p>
According to the Doom Emacs <a href="https://github.com/doomemacs/doomemacs#prerequisites">documentation</a>, the following packages are recommended:
</p>
<ul class="org-ul">
<li>Git 2.23+: this is already installed by default.</li>
<li>Emacs 29.4 with <a href="https://www.emacswiki.org/emacs/GccEmacs">Lisp native compilation</a>: this is finicky and will be elaborated later.</li>
<li>ripgrep 14.0+: the documentation says 11.0+ suffices, but <code>doom doctor</code> still complains the latest version (13.0) installed from <code>apt</code> is not advanced, so we need to install it from its Github released package later.</li>
<li>GNU find: also installed already.</li>
<li>fd: <code>sudo apt install fd-find</code> suffices.</li>
</ul>
</div>
</div>
<div id="outline-container-org364c109" class="outline-2">
<h2 id="org364c109"><span class="section-number-2">3.</span> Install Emacs 29.4</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org5da0b33" class="outline-3">
<h3 id="org5da0b33"><span class="section-number-3">3.1.</span> Before building</h3>
<div class="outline-text-3" id="text-3-1">
<p>
First, let&rsquo;s install some build dependencies:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">sudo</span> apt update
<span style="color: #ECBE7B;">sudo</span> apt upgrade  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">update packages</span>
<span style="color: #ECBE7B;">sudo</span> apt install build-essential libjansson4 libjansson-dev <span style="color: #98be65;">\</span>
    libgnutls28-dev libtree-sitter-dev libsqlite3-dev
<span style="color: #ECBE7B;">sudo</span> apt install texinfo  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">to generate documentation</span>
</pre>
</div>

<p>
<code>build-essnetial</code> should install necessary tools to build C/C++ programs such as gcc, g++, make, gdb and dpkg.
The rest packages install pre-compiled libraries.
</p>

<p>
Besides these packages, there are two important packages to support List native compilation:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">sudo</span> apt install ibgccjit0 libgccjit-11-dev  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">11 is my gcc version</span>
</pre>
</div>

<p>
After installing them, make sure to export the path in the current session, otherwise the compiler will not realize it.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #c678dd;">export</span> <span style="color: #dcaeea;">LD_LIBRARY_PATH</span>=/usr/lib/gcc/x86_64-linux-gnu/11:$<span style="color: #dcaeea;">LD_LIBRARY_PATH</span>
</pre>
</div>

<p>
The last thing to do is install a bunch of X and GTK-3 development libraries for Emacs GUI, and another bunch of image processing libraries.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">sudo</span> apt install libx11-dev libtiff-dev libgtk-3-dev libncurses-dev
<span style="color: #ECBE7B;">sudo</span> apt install libtiff5-dev libgif-dev libjpeg-dev libpng-dev libxpm-dev
</pre>
</div>

<p>
Without the above packages, one may encounter the following error when configuring the Emacs build:
</p>

<blockquote>
<p>
You seem to be running X, but no X development libraries
were found.  You should install the relevant development files for X
and for the toolkit you want, such as Gtk+ or Motif. Also make
sure you have development files for image handling, i.e.
tiff, gif, jpeg, png and xpm.
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org5a81b5a" class="outline-3">
<h3 id="org5a81b5a"><span class="section-number-3">3.2.</span> Build Emacs 29.4 with native-comp</h3>
<div class="outline-text-3" id="text-3-2">
<p>
At this moment, we can start to download Emacs source code:
</p>

<div class="org-src-container">
<pre class="src src-bash">wget https://ftp.gnu.org/gnu/emacs/emacs-29.4.tar.xz
tar xvf emacs-29.4.tar.xz
<span style="color: #ECBE7B;">cd</span> emacs-29.4
</pre>
</div>

<p>
Then we can configure the build (i.e., generate Makefile) with the following command.
</p>

<div class="org-src-container">
<pre class="src src-bash">./configure --with-native-compilation --with-x-toolkit=gtk3 --without-pop
</pre>
</div>

<ul class="org-ul">
<li><code>--with-native-compilation</code>: with this flag the Emacs source code is compiled to native machine code to achieve better performance.
<ul class="org-ul">
<li>Otherwise it is compiled to bytecode and then interpreted by Emacs virtual machine during runtime.</li>
</ul></li>
<li><code>--with-x-toolkit=gtk3</code>: this is recommended by Claude.</li>
<li><code>--without-pop</code>: if we are not using Emacs as the email client, we don&rsquo;t need to bother configure the protocol.</li>
</ul>

<p>
If everything goes well, one should see the following line in the output.
If not, make sure <code>libgccjit</code> has been installed and exported.
</p>

<blockquote>
<p>
Does Emacs have native lisp compiler? yes
</p>
</blockquote>

<p>
Now we can finally start compiling the Emacs:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">make</span> -j$<span style="color: #51afef;">(</span>nproc<span style="color: #51afef;">)</span>
</pre>
</div>

<p>
If some error occurs, we may want to start again, to do this:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">sudo</span> apt install autoconf automake
<span style="color: #ECBE7B;">rm</span> -f Makefile
./autogen.sh  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">regenerate the configuration file</span>
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">then rebuild</span>
<span style="color: #ECBE7B;">make</span> -j$<span style="color: #51afef;">(</span>nproc<span style="color: #51afef;">)</span>
</pre>
</div>

<p>
Finally, install Emacs globally:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">sudo</span> <span style="color: #ECBE7B;">make</span> install
</pre>
</div>

<p>
To confirm the Emacs indeed used the native Lisp compiler, one can evaluate inside the vanilla Emacs with <code>M-:</code> (<code>M</code> is <code>Alt</code> in WSL2):
</p>

<div class="org-src-container">
<pre class="src src-lisp">(native-comp-available-p) <span style="color: #5B6268;">;; </span><span style="color: #5B6268;">should return t</span>
</pre>
</div>

<p>
Congratulations! You have now installed the latest and fastest Emacs on WSL2.
</p>
</div>
</div>
</div>
<div id="outline-container-org59d5d98" class="outline-2">
<h2 id="org59d5d98"><span class="section-number-2">4.</span> Install <code>ripgrep</code></h2>
<div class="outline-text-2" id="text-4">
<p>
As mentioned in ripgrep <a href="https://github.com/BurntSushi/ripgrep?tab=readme-ov-file#installation">documentation</a>, for Debian/Ubuntu users, one should
install the latest ripgrep 14.0+ with the following commands.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">curl</span> -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.0-1_amd64.deb  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">check the latest version on its documentation</span>
<span style="color: #ECBE7B;">sudo</span> dpkg -i ripgrep_14.1.0-1_amd64.deb  <span style="color: #5B6268;"># </span><span style="color: #5B6268;">dpkg has been installed before</span>
</pre>
</div>

<p>
Instead, if one installs it with <code>apt</code>, a 13.0+ version is installed and running <code>doom doctor</code> later returns the warning:
</p>

<blockquote>
<p>
The installed ripgrep binary was not built with support for PCRE lookaheads.
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org8008b50" class="outline-2">
<h2 id="org8008b50"><span class="section-number-2">5.</span> Install Doom Emacs</h2>
<div class="outline-text-2" id="text-5">
<p>
Installing Doom Emacs is straightforward, but before that, one should first remove the default Emacs configuration folder:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">rm</span> -rf ~/.emacs.d
</pre>
</div>

<p>
Then, clone and install Doom Emacs, it could take a while.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">git</span> clone --depth <span style="color: #da8548; font-weight: bold;">1</span> https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install
</pre>
</div>

<p>
Don&rsquo;t forget to export <code>~/.config/emacs/bin</code> to <code>PATH</code>:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #ECBE7B;">echo</span> <span style="color: #98be65;">'export PATH="$HOME/.config/emacs/bin:$PATH"'</span> &gt;&gt; ~/.bashrc
<span style="color: #c678dd;">source</span> ~/.bashrc
</pre>
</div>

<p>
Now one can run <code>doom doctor</code> to check any missing dependencies, e.g., <code>shellcheck</code>.
One common issue is the Nerd font is not installed by default so that some icons are not properly displayed.
To fix that, run <code>M-x nerd-icons-install-font</code> inside the Emacs, then update the font cache with:
</p>

<div class="org-src-container">
<pre class="src src-bash">fc-cache -fv
<span style="color: #5B6268;"># </span><span style="color: #5B6268;">fc-list | </span><span style="color: #5B6268;">grep</span><span style="color: #5B6268;"> Nerd  # to verify the font is installed</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org6f03a33" class="outline-2">
<h2 id="org6f03a33"><span class="section-number-2">6.</span> Some issues with running Emacs in WSL2</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
The first thing is I cannot reload the configuration with <code>M-x doom/reload</code> as running this command always gives me the following error message so that I need to restart the Emacs every time the configuration is changed.
</p>

<blockquote>
<p>
%s sync -B -e
/bin/bash: line 1: fg: no job control
</p>
</blockquote></li>

<li>I really dislike the <a href="https://www.reddit.com/r/wsl2/comments/16b4skx/wsl_softwares_with_white_window_borders/">white border</a> that surrounds any application launched by WSL!</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-linux.html">linux</a> <a href="https://chenyo.me/tag-emacs.html">emacs</a> <a href="https://chenyo.me/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tool]]></category>
  <link>https://chenyo.me/2024-09-07-install-doom-emacs-with-lisp-native-compiler-in-wsl2.html</link>
  <guid>https://chenyo.me/2024-09-07-install-doom-emacs-with-lisp-native-compiler-in-wsl2.html</guid>
  <pubDate>Sat, 07 Sep 2024 12:38:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Hiked: Stoos]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd567c4a">1. What happened?</a></li>
<li><a href="#org36ea2ae">2. What now?</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgd567c4a" class="outline-2">
<h2 id="orgd567c4a"><span class="section-number-2">1.</span> What happened?</h2>
<div class="outline-text-2" id="text-1">
<p>
About three weeks ago, I hiked Stoos and wrote a Redbook post.
Unfortunately, the post was only visible to me, apparently violating community guidelines.
</p>

<p>
I spent most of that day trying to identify the problematic content, repeatedly editing and reposting.
Later, I learned this behavior is discouraged on Redbook, e.g., I am not really authorized to edit my own content.
</p>

<p>
Frustrated, I abandoned my efforts, leaving my Redbook homepage cluttered with articles like &ldquo;10 Behaviors That Harm Your Redbook Account&rdquo; and &ldquo;100 Forbidden Words on Redbook&rdquo;.
</p>

<p>
Though brief, this experience instilled in me a tendency towards self-censorship, a feeling I deeply resent.
I also noticed the lack of competitive alternatives to this centralized platform where users share authentic life experiences through multimedia.
</p>

<p>
Well played, Redbook!
</p>
</div>
</div>
<div id="outline-container-org36ea2ae" class="outline-2">
<h2 id="org36ea2ae"><span class="section-number-2">2.</span> What now?</h2>
<div class="outline-text-2" id="text-2">
<p>
Anyway, given that I invested considerable effort in creating post figures, I will post them here instead.
</p>


<figure id="org3749092">
<img src="./static/stoos-2.png" alt="stoos-2.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>The Stoos roadmap</figcaption>
</figure>


<figure id="org74cef6c">
<img src="./static/stoos-3.png" alt="stoos-3.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 2: </span>The uphill view</figcaption>
</figure>


<figure id="org1a79473">
<img src="./static/stoos-4.png" alt="stoos-4.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 3: </span>The top view</figcaption>
</figure>


<figure id="org8b55657">
<img src="./static/stoos-5.png" alt="stoos-5.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 4: </span>The ridge roadmap</figcaption>
</figure>


<figure id="org95d2338">
<img src="./static/stoos-6.png" alt="stoos-6.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 5: </span>The ridge view</figcaption>
</figure>


<figure id="org44b48d6">
<img src="./static/stoos-7.png" alt="stoos-7.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 6: </span>My trace</figcaption>
</figure>


<figure id="org37a95e2">
<img src="./static/stoos-8.png" alt="stoos-8.png" align="center" width="500px">

<figcaption><span class="figure-number">Figure 7: </span>Recommended apps</figcaption>
</figure>


<figure id="org5b48a6a">
<img src="./static/stoos-9.png" alt="stoos-9.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 8: </span>My favorite hike shoots</figcaption>
</figure>


<figure id="orgb5b309a">
<img src="./static/stoos-post.png" alt="stoos-post.png" align="center" width="700px">

<figcaption><span class="figure-number">Figure 9: </span>The Redbook post</figcaption>
</figure>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-trip.html">trip</a> <a href="https://chenyo.me/tag-stoos.html">stoos</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[trip]]></category>
  <category><![CDATA[stoos]]></category>
  <link>https://chenyo.me/2024-09-06-hiked:-stoos.html</link>
  <guid>https://chenyo.me/2024-09-06-hiked:-stoos.html</guid>
  <pubDate>Fri, 06 Sep 2024 21:32:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Hash Tables]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgebfcfaf">1. DBMS data structure application</a>
<ul>
<li><a href="#org49b2e07">1.1. Design decisions</a></li>
</ul>
</li>
<li><a href="#org8624d45">2. Hash tables</a>
<ul>
<li><a href="#org7070138">2.1. Where are hash tables used</a></li>
</ul>
</li>
<li><a href="#orgd3f4888">3. Hash function</a></li>
<li><a href="#orga4cb315">4. Hashing scheme</a></li>
<li><a href="#orgf23f8e6">5. Static hashing scheme</a>
<ul>
<li><a href="#org95143ed">5.1. Linear probe hashing</a>
<ul>
<li><a href="#org3d4f53f">5.1.1. Non-unique keys</a></li>
<li><a href="#orge15fd5f">5.1.2. Optimization</a></li>
</ul>
</li>
<li><a href="#orge51ce38">5.2. Cuckoo hashing</a></li>
</ul>
</li>
<li><a href="#org7d34843">6. Dynamic hashing schemes</a>
<ul>
<li><a href="#orgcc4ccdb">6.1. Chained Hashing</a></li>
<li><a href="#orgba66b11">6.2. Extendible hashing</a></li>
<li><a href="#org3fbacf8">6.3. Linear hashing</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://15445.courses.cs.cmu.edu/fall2023/notes/07-hashtables.pdf">CMU 15-445 L7 notes</a> as well as some explanation from Claude.ai.
</p>
<div id="outline-container-orgebfcfaf" class="outline-2">
<h2 id="orgebfcfaf"><span class="section-number-2">1.</span> DBMS data structure application</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Internal meta-data: <a href="https://chenyo.me/2024-08-13-db-notes:-memory-management.html#org7a44495">page tables</a>, <a href="https://chenyo.me/2024-07-31-db-notes:-database-storage.html#org66626ef">page directories</a>.</li>
<li>Tuple storage on disk.</li>
<li>Table indices: easy to find specific tuples.</li>
</ul>
</div>
<div id="outline-container-org49b2e07" class="outline-3">
<h3 id="org49b2e07"><span class="section-number-3">1.1.</span> Design decisions</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Data layout for efficient access.</li>
<li>Concurrent access to data structures.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org8624d45" class="outline-2">
<h2 id="org8624d45"><span class="section-number-2">2.</span> Hash tables</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Implements an associative array that maps keys to values.</li>
<li>On average \(O(1)\) operation complexity with the worst case \(O(n)\); \(O(n)\) storage complexity.
<ul class="org-ul">
<li>Optimization for constant complexity is important in real world.</li>
</ul></li>
</ul>
</div>
<div id="outline-container-org7070138" class="outline-3">
<h3 id="org7070138"><span class="section-number-3">2.1.</span> Where are hash tables used</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>For tuple indexing. While tuples are stored on pages with NSM or DSM, during the <b><b>query</b></b> the DBMS needs to quickly locate the page that stores specific tuples. It can achieve this with separately-stored hash tables, where each key can be a hash of a tuple id, and the value points the location.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgd3f4888" class="outline-2">
<h2 id="orgd3f4888"><span class="section-number-2">3.</span> Hash function</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Maps a large key space into a smaller domain.</li>
<li>Takes in any key as input, and returns a deterministic integer representation.</li>
<li>Needs to consider the trade-off between fast execution and collision rate.
<ul class="org-ul">
<li>Does not need to be cryptographically.</li>
<li>The state-of-art (Fall 2023) hash function is XXHash3.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orga4cb315" class="outline-2">
<h2 id="orga4cb315"><span class="section-number-2">4.</span> Hashing scheme</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>Handles key collision after hashing.</li>
<li>Needs to consider the trade-off between large table allocation (to avoid collision) and additional instruction execution when a collision occurs.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf23f8e6" class="outline-2">
<h2 id="orgf23f8e6"><span class="section-number-2">5.</span> Static hashing scheme</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>The hash table size is fixed; the DBMS has to rebuild a larger hash table (e.g., twice the size) from scratch when it runs out of space.</li>
</ul>
</div>
<div id="outline-container-org95143ed" class="outline-3">
<h3 id="org95143ed"><span class="section-number-3">5.1.</span> Linear probe hashing</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>Insertion: when a collision occurs, linearly search the adjacent slots in a circular buffer until a open one is found.</li>
<li>Lookup: search linearly from the first hashed slot until the desired entry or an empty slot is reached, or every slot has been iterated.
<ul class="org-ul">
<li>Requires to store both key and value in the slot.</li>
</ul></li>
<li>Deletion: simply deleting the entry prevents future lookups as it becomes empty; two solutions:
<ul class="org-ul">
<li>Replace the deleted entry with a dummy entry to tell future lookups to keep scanning.</li>
<li>Shift the adjacent entries which were originally shifted, i.e., those who were originally hashed to the same key.
<ul class="org-ul">
<li>Very expensive and rarely implemented in practice.</li>
</ul></li>
</ul></li>
<li>The state-of-art linear probe hashing is Google <code>absl::flat_hash_map</code>.</li>
</ul>
</div>
<div id="outline-container-org3d4f53f" class="outline-4">
<h4 id="org3d4f53f"><span class="section-number-4">5.1.1.</span> Non-unique keys</h4>
<div class="outline-text-4" id="text-5-1-1">
<ul class="org-ul">
<li>The same key may be associated with multiple different values.</li>
<li>Separate linked list: each value is a pointer to a linked list of all values, which may overflow to multiple pages.</li>
<li>Redundant keys: store the same key multiple times with different values.
<ul class="org-ul">
<li>A more common approach.</li>
<li>Linear probing still works, if it is fine to get one value.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orge15fd5f" class="outline-4">
<h4 id="orge15fd5f"><span class="section-number-4">5.1.2.</span> Optimization</h4>
<div class="outline-text-4" id="text-5-1-2">
<ul class="org-ul">
<li>Specialized hash table based on key types and size; e.g., for long string keys, one can store the pointer or the hash of the long string in the hash table.</li>
<li>Store metadata in a separate array, e.g., store empty slot in a bitmap to avoid looking up deleted keys.</li>
<li><b><b>Version control</b></b> of hash tables: invalidate entries by incrementing the version counter rather than explicitly marking the deletion.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orge51ce38" class="outline-3">
<h3 id="orge51ce38"><span class="section-number-3">5.2.</span> Cuckoo hashing</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li>Maintains multiple hash tables with different hash functions to generate different hashes for the same key using different seeds.</li>
<li>Insertion: check each table and choose one with a free slot; if none table has free slot, choose and evict an old entry and find it another table.
<ul class="org-ul">
<li>If a rare cycle happens, rebuild all hash tables with new seeds or with larger tables.</li>
</ul></li>
<li>\(O(1)\) lookups and deletion (also needs to store keys), but insertion is more expensive.</li>
<li>Practical implementation maps a key to different slots in a single hash table.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org7d34843" class="outline-2">
<h2 id="org7d34843"><span class="section-number-2">6.</span> Dynamic hashing schemes</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Resize the hash table on demand without rebuilding the entire table.</li>
</ul>
</div>
<div id="outline-container-orgcc4ccdb" class="outline-3">
<h3 id="orgcc4ccdb"><span class="section-number-3">6.1.</span> Chained Hashing</h3>
<div class="outline-text-3" id="text-6-1">
<ul class="org-ul">
<li>Maintains a linked list of buckets for each slot in the hash table; keys hashed to the same slot are inserted into the linked list.</li>
<li>Lookup: hash to the key&rsquo;s bucket and scan for it.</li>
<li>Optimization: store bloom filter in the bucket pointer list to tell if a key exist in the linked list.</li>
</ul>
</div>
</div>
<div id="outline-container-orgba66b11" class="outline-3">
<h3 id="orgba66b11"><span class="section-number-3">6.2.</span> Extendible hashing</h3>
<div class="outline-text-3" id="text-6-2">
<ul class="org-ul">
<li>Improve chained hashing to avoid letting chains grow forever.</li>
<li>Allow multiple slot locations in the hash table to point to the same chain.</li>
</ul>


<figure id="org37ed52f">
<img src="./static/db-extendible-hashing.png" alt="db-extendible-hashing.png" align="center" width="700px">

<figcaption><span class="figure-number">Figure 1: </span>Extendible hashing example</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org3fbacf8" class="outline-3">
<h3 id="org3fbacf8"><span class="section-number-3">6.3.</span> Linear hashing</h3>
<div class="outline-text-3" id="text-6-3">
<ul class="org-ul">
<li>Maintains a split pointer to keep track of next bucket to split, even if the pointed bucket is not overflowed.</li>
</ul>


<figure id="org80e9b5d">
<img src="./static/db-linear-hashing.png" alt="db-linear-hashing.png" align="center" width="750px">

<figcaption><span class="figure-number">Figure 2: </span>Linear hashing example</figcaption>
</figure>

<ul class="org-ul">
<li>There are always only 2 hash functions: \((key\ mod\ n)\) and \((key\ mod\ 2n)\) where \(n\) is the length of buckets when the split pointer is at the index 0 (i.e., the bucket length at any time is \(n + index(sp)\)).</li>
</ul>


<figure id="orgd6e1588">
<img src="./static/db-linear-hashing-deletion.png" alt="db-linear-hashing-deletion.png" align="center" width="750px">

<figcaption><span class="figure-number">Figure 3: </span>Linear hashing deletion example</figcaption>
</figure>

<ul class="org-ul">
<li>Why does \(k\ mod\ 2n < n + sp\) hold?
<ul class="org-ul">
<li>A key is only mod by \(2n\) if the result of \((k\ mod\ n)\) is above the split pointer, i.e., \(0 \leq k\ mod\ n < sp)\).</li>
<li>Let \(r = k\ mod\ n\), then \(k = pn + r\) and \(0 \leq r < sp\).</li>
<li>Let \(r' = k\ mod\ 2n\), then \(k = q(2n) + r'\).</li>
<li>If \(p = 2m\), then we also have \(k = m(2n) + r = q(2n) + r'\), in this case \(0 \leq r = r' < sp\).</li>
<li>If \(p = 2m + 1\), then we have \(k = m(2n) + r + n = q(2n) + r'\), in this case \(n \leq r' = n + r < n + sp\).</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-09-05-db-notes:-hash-tables.html</link>
  <guid>https://chenyo.me/2024-09-05-db-notes:-hash-tables.html</guid>
  <pubDate>Thu, 05 Sep 2024 12:26:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[My blog search function]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org7fc7b84">1. What happened</a></li>
<li><a href="#org4ace32e">2. What is not enough with existing search functions?</a></li>
<li><a href="#orgaed31e8">3. What does the search function do in this blog?</a></li>
<li><a href="#org0bc694f">4. How is it implemented?</a></li>
<li><a href="#orgde7ac7c">5. How can it be improved?</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org7fc7b84" class="outline-2">
<h2 id="org7fc7b84"><span class="section-number-2">1.</span> What happened</h2>
<div class="outline-text-2" id="text-1">
<p>
Two months ago, I started to use the current blog to keep track of my study and personal notes.
</p>

<p>
This blog uses <a href="https://github.com/bastibe/org-static-blog">bastibe/org-static-blog</a>, which is a convenient Emacs package to publish a static blog from Org-mode files.
</p>

<p>
When I first started, this blog had no styling at all.
With the help of Claude, I gradually decorated it with the theme and fonts of my choice.
</p>

<p>
During this process, my husband made a feature request: a blog search function.
</p>
</div>
</div>
<div id="outline-container-org4ace32e" class="outline-2">
<h2 id="org4ace32e"><span class="section-number-2">2.</span> What is not enough with existing search functions?</h2>
<div class="outline-text-2" id="text-2">
<p>
Most default search tools provided by popular static website frameworks do not return complete search results and their context.
</p>

<p>
For instance, I am learning database design.
Assume I cannot remember what a &ldquo;slotted page&rdquo; is but I know I have noted it before.
If I enter &ldquo;slotted&rdquo; in the search box of a Jekyll-based blog, it will provide me with 2 post links implying these posts contain this keyword.
In the best case, it also highlights the first occurrence of &ldquo;slotted&rdquo; in each post with its context.
</p>

<p>
This does not really meet my needs.
I would like to see all notes I have made for &ldquo;slotted&rdquo; to better refresh my memory, but the current results force me to click each post and perform a local search myself to achieve this goal.
</p>

<p>
I understand that modern search tools consider scalability and intelligence.
However, for a personal blog, we can achieve greater breadth.
</p>
</div>
</div>
<div id="outline-container-orgaed31e8" class="outline-2">
<h2 id="orgaed31e8"><span class="section-number-2">3.</span> What does the search function do in this blog?</h2>
<div class="outline-text-2" id="text-3">

<figure id="orgf40cc85">
<img src="./static/blog-search.gif" alt="blog-search.gif" align="center" width="700px" style="border: 1px solid black;">

<figcaption><span class="figure-number">Figure 1: </span>A blog search example</figcaption>
</figure>

<p>
The current search function searches for all occurrences of the given search input and highlights each occurrence in an item surrounded by its context, e.g., 50 characters before and after the input.
If multiple occurrences are close to each other, they are displayed once in the same item.
Clicking each item opens a new tab and jumps to the closest header before the input.
</p>

<p>
In this way, I can immediately see all results and their context on one page, and I only click an item when the short context is not sufficient.
</p>
</div>
</div>
<div id="outline-container-org0bc694f" class="outline-2">
<h2 id="org0bc694f"><span class="section-number-2">4.</span> How is it implemented?</h2>
<div class="outline-text-2" id="text-4">
<p>
I implemented the search function along with all styling with the help of Cursor.
The full logic can be found in <a href="https://github.com/chenyo-17/org-static-blog/blob/main/assets/search.js">search.js</a>.
</p>

<p>
In short, every time I build the blog, a list of all post links is stored in <a href="https://github.com/chenyo-17/org-static-blog/blob/main/assets/post-list.json">post-list.json</a>.
When the page is loaded, for each post link, the blog caches the full post content and all header indices.
When a search input is detected, the search function iterates through each post to find each occurrence and the closest header.
It then wraps the occurrence with certain context and prepares the link by appending the header tag to the post link.
</p>
</div>
</div>
<div id="outline-container-orgde7ac7c" class="outline-2">
<h2 id="orgde7ac7c"><span class="section-number-2">5.</span> How can it be improved?</h2>
<div class="outline-text-2" id="text-5">
<p>
The current search function is simple and sub-optimal.
It always re-stores all posts when the page is reloaded and is not lazy at all.
The search is also neither fuzzy nor the most efficient.
</p>

<p>
It just works well so far for a personal blog with about 30 posts.
</p>

<p>
In addition, after I finished the implementation, my husband made another feature request: can you also highlight all occurrences in the opened link?
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-blog.html">blog</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[blog]]></category>
  <link>https://chenyo.me/2024-08-29-my-blog-search-function.html</link>
  <guid>https://chenyo.me/2024-08-29-my-blog-search-function.html</guid>
  <pubDate>Thu, 29 Aug 2024 13:59:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Web learning in practice]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1ddbc5e">1. Basic html structure</a></li>
<li><a href="#org72282a2">2. Tags</a></li>
<li><a href="#org96f782d">3. Attributes</a></li>
<li><a href="#orgf05c8ce">4. Javascript</a>
<ul>
<li><a href="#org2c9507c">4.1. Fetch from an HTML URL</a></li>
<li><a href="#org4dff14f">4.2. Modify a DOM</a></li>
<li><a href="#org108e1e6">4.3. Syntax</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This post records the basic web development knowledge I have learned in practice.
</p>
<div id="outline-container-org1ddbc5e" class="outline-2">
<h2 id="org1ddbc5e"><span class="section-number-2">1.</span> Basic html structure</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #51afef;">!DOCTYPE</span> html&gt;
&lt;<span style="color: #c678dd;">html</span> <span style="color: #dcaeea;">lang</span>=<span style="color: #98be65;">"en"</span>&gt;

    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A head</span><span style="color: #5B6268;"> --&gt;</span>
    &lt;<span style="color: #c678dd;">head</span>&gt;
        &lt;<span style="color: #c678dd;">meta</span> <span style="color: #dcaeea;">charset</span>=<span style="color: #98be65;">"UTF-8"</span>&gt;
        <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">to accommodate different screen size</span><span style="color: #5B6268;"> --&gt;</span>
        &lt;<span style="color: #c678dd;">meta</span> <span style="color: #dcaeea;">name</span>=<span style="color: #98be65;">"viewport"</span> <span style="color: #dcaeea;">content</span>=<span style="color: #98be65;">"width=device-width, initial-scale=1.0"</span>&gt;
        <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A tab name</span><span style="color: #5B6268;"> --&gt;</span>
        &lt;<span style="color: #c678dd;">title</span>&gt;<span style="font-weight: bold; text-decoration: underline;">A website</span>&lt;/<span style="color: #c678dd;">title</span>&gt;
        &lt;<span style="color: #c678dd;">link</span> <span style="color: #dcaeea;">rel</span>=<span style="color: #98be65;">"stylesheet"</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"styles.css"</span>&gt;
    &lt;/<span style="color: #c678dd;">head</span>&gt;


    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A body</span><span style="color: #5B6268;"> --&gt;</span>
    &lt;&lt;<span style="color: #c678dd;">body</span>&gt;
    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A page header</span><span style="color: #5B6268;">  --&gt;</span>
    &lt;<span style="color: #c678dd;">header</span>&gt;
        &lt;<span style="color: #c678dd;">h1</span>&gt;<span style="font-weight: bold; text-decoration: underline;">Welcome</span>&lt;/<span style="color: #c678dd;">h1</span>&gt;
    &lt;/<span style="color: #c678dd;">header</span>&gt;

    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A navigation panel</span><span style="color: #5B6268;"> --&gt;</span>
    &lt;<span style="color: #c678dd;">nav</span>&gt;
        &lt;<span style="color: #c678dd;">ul</span>&gt;
        &lt;&lt;<span style="color: #c678dd;">li</span>&gt;&lt;<span style="color: #c678dd;">a</span> <span style="color: #dcaeea;">href</span>=<span style="color: #98be65;">"index.html"</span>&gt;Home&lt;/<span style="color: #c678dd;">a</span>&gt;&lt;/<span style="color: #c678dd;">li</span>&gt;
        &lt;/<span style="color: #c678dd;">ul</span>&gt;
    &lt;/<span style="color: #c678dd;">nav</span>&gt;

    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">The main content</span><span style="color: #5B6268;"> --&gt;</span>
    &lt;<span style="color: #c678dd;">main</span>&gt;
        &lt;<span style="color: #c678dd;">section</span> <span style="color: #dcaeea;">id</span>=<span style="color: #98be65;">"home"</span>&gt;
        &lt;<span style="color: #c678dd;">h2</span>&gt;<span style="font-weight: bold; font-style: italic; text-decoration: underline;">Home</span>&lt;/<span style="color: #c678dd;">h2</span>&gt;
        &lt;<span style="color: #c678dd;">p</span>&gt;Welcome!&lt;/<span style="color: #c678dd;">p</span>&gt;
        &lt;/<span style="color: #c678dd;">section</span>&gt;
    &lt;/<span style="color: #c678dd;">main</span>&gt;

    <span style="color: #5B6268;">&lt;!-- </span><span style="color: #5B6268;">A footer</span><span style="color: #5B6268;"> --&gt;</span>
    &lt;<span style="color: #c678dd;">footer</span>&gt;
        &lt;<span style="color: #c678dd;">p</span>&gt;<span style="color: #dcaeea;">&amp;copy;</span> All rights reserved.&lt;/<span style="color: #c678dd;">p</span>&gt;
    &lt;/<span style="color: #c678dd;">footer</span>&gt;
    &lt;/<span style="color: #c678dd;">body</span>&gt;

&lt;/<span style="color: #c678dd;">html</span>&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-org72282a2" class="outline-2">
<h2 id="org72282a2"><span class="section-number-2">2.</span> Tags</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><code class="src src-html">&lt;<span style="color: #c678dd;">a</span>&gt;</code>: contain links; have following attributes:
<ul class="org-ul">
<li><code class="src src-html"><span style="color: #dcaeea;">target</span>="_blank"</code>: open the link in a new tab.</li>
<li><code class="src src-html"><span style="color: #dcaeea;">title</span>="Go to the link"</code>: the tooltip message, i.e., the floating message when a user hovers over.</li>
</ul></li>
<li><code class="src src-html">&lt;<span style="color: #c678dd;">span</span>&gt;</code>: don&rsquo;t add line breaks before or after it.</li>
<li><code class="src src-html">&lt;<span style="color: #c678dd;">hr</span>&gt;</code>: horizontal rule.</li>
</ul>
</div>
</div>
<div id="outline-container-org96f782d" class="outline-2">
<h2 id="org96f782d"><span class="section-number-2">3.</span> Attributes</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><code class="src src-html"><span style="color: #dcaeea;">id</span>="home"</code>:
<ul class="org-ul">
<li>allow specific styling of the element, e.g., <code class="src src-html">#home ul {...}</code> only styles the <code class="src src-html">ul</code> in the block with the same id.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgf05c8ce" class="outline-2">
<h2 id="orgf05c8ce"><span class="section-number-2">4.</span> Javascript</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org2c9507c" class="outline-3">
<h3 id="org2c9507c"><span class="section-number-3">4.1.</span> Fetch from an HTML URL</h3>
<div class="outline-text-3" id="text-4-1">
<ol class="org-ol">
<li><code class="src src-js"><span style="color: #51afef;">await</span> fetch(url)</code>: returns a <code class="src src-js">Response</code> object.
<ul class="org-ul">
<li><code class="src src-js"><span style="color: #51afef;">await</span></code> waits for the method to complete.</li>
</ul></li>
<li><code class="src src-js"><span style="color: #51afef;">await</span> response.text()</code>: returns the <code class="src src-js">html</code> string.</li>
<li><code class="src src-js">DOMParser().parseFromString(postHtml, <span style="color: #98be65;">"text/html"</span>)</code>: returns a <code class="src src-js">Document</code> object, which is a complete DOM tree from the HTML string; <code class="src src-js">DOMParser</code> is a built-in browser API.</li>
<li><code class="src src-js">postDoc.getElementById(<span style="color: #98be65;">"content"</span>)</code>: returns an <code class="src src-js">Element</code> with the <code class="src src-js">content</code> id name.</li>
<li><code class="src src-js">content.querySelector(<span style="color: #98be65;">".post-title a"</span>)</code>: fetches the first <code class="src src-js">Element</code> with the <code class="src src-js">post-title</code> class name, and returns the first <code class="src src-js">Element</code> the first <code class="src src-js">&lt;a&gt;</code> (anchor) tag.
<ul class="org-ul">
<li><code class="src src-js">.</code> for classes, <code class="src src-js">#</code> for IDs (IDs should be unique within a page)</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org4dff14f" class="outline-3">
<h3 id="org4dff14f"><span class="section-number-3">4.2.</span> Modify a DOM</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li><code class="src src-js">content.querySelector(<span style="color: #98be65;">".taglist"</span>).remove()</code>: removes the element from the DOM, i.e., it modifies <code class="src src-js">content</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-org108e1e6" class="outline-3">
<h3 id="org108e1e6"><span class="section-number-3">4.3.</span> Syntax</h3>
<div class="outline-text-3" id="text-4-3">
<ul class="org-ul">
<li><code class="src src-js"><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">escapedQuery</span> = query.replace(<span style="color: #98be65;">/[.*+?^${}()|[\]\\]/</span>g, <span style="color: #98be65;">"\\$&amp;"</span>)</code>: add a backslash to any special character in the query; <code>$&amp;</code> is a special pattern used in Javascript&rsquo;s <code class="src src-js">replacement</code> method.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-web.html">web</a> <a href="https://chenyo.me/tag-app.html">app</a> </div>]]></description>
  <category><![CDATA[web]]></category>
  <category><![CDATA[app]]></category>
  <link>https://chenyo.me/2024-08-15-web-learning-in-practice.html</link>
  <guid>https://chenyo.me/2024-08-15-web-learning-in-practice.html</guid>
  <pubDate>Thu, 15 Aug 2024 19:26:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Memory Management]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc61227e">1. Goals</a></li>
<li><a href="#org77a0101">2. Locks &amp; Latches</a>
<ul>
<li><a href="#org3795c4d">2.1. Locks</a></li>
<li><a href="#orgd6fc397">2.2. Latches</a></li>
</ul>
</li>
<li><a href="#org1c76dc5">3. Buffer pool</a>
<ul>
<li><a href="#orgb852292">3.1. Metadata</a></li>
<li><a href="#org56af867">3.2. Memory allocation policies</a></li>
</ul>
</li>
<li><a href="#org42624b4">4. Buffer pool optimizations</a>
<ul>
<li><a href="#org89a77cd">4.1. Multiple buffer pools</a></li>
<li><a href="#org1b51ad8">4.2. Pre-fetching</a></li>
<li><a href="#org9ba5688">4.3. Scan sharing</a></li>
<li><a href="#org16ef737">4.4. Buffer pool bypass</a></li>
</ul>
</li>
<li><a href="#orged8eb82">5. Buffer replacement policies</a>
<ul>
<li><a href="#org590934d">5.1. Least recently used (LRU)</a></li>
<li><a href="#org52e108c">5.2. Clock</a></li>
<li><a href="#org94bdb0b">5.3. LRU-K</a>
<ul>
<li><a href="#org4f28a16">5.3.1. MySQL approximate LRU-K</a></li>
</ul>
</li>
<li><a href="#org5827e39">5.4. Localization</a></li>
<li><a href="#orga34bca6">5.5. Priority hint</a></li>
<li><a href="#org0dcf881">5.6. Dirty pages</a></li>
</ul>
</li>
<li><a href="#orgba285d4">6. Other memory pools</a></li>
<li><a href="#orgfc788e7">7. OS cache bypass</a></li>
<li><a href="#orgf8c985d">8. I/O scheduling</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://15445.courses.cs.cmu.edu/fall2023/notes/06-bufferpool.pdf">CMU 15-445 L6 notes</a> as well as some explanation from Claude.ai.
</p>
<div id="outline-container-orgc61227e" class="outline-2">
<h2 id="orgc61227e"><span class="section-number-2">1.</span> Goals</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Manage DBMS memory and move data between the memory and the disk, such that the execution engine does no worry about the data fetching.</li>
<li>Spatial control: keep relevant pages physically together on disk.</li>
<li>Temporal control: minimize the number of stalls to read data from the disk.</li>
</ul>
</div>
</div>
<div id="outline-container-org77a0101" class="outline-2">
<h2 id="org77a0101"><span class="section-number-2">2.</span> Locks &amp; Latches</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Both used to protect internal elements.</li>
</ul>
</div>
<div id="outline-container-org3795c4d" class="outline-3">
<h3 id="org3795c4d"><span class="section-number-3">2.1.</span> Locks</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>A high-level logical primitive to allow for transaction atomicity.</li>
<li>Exposed to users when queries are run.</li>
<li>Need to be able to rollback changes.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd6fc397" class="outline-3">
<h3 id="orgd6fc397"><span class="section-number-3">2.2.</span> Latches</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>A low-level protection primitive a DBMS uses in its internal data structures, e.g., hash tables.</li>
<li>Only held when the operation is being made, like a mutex.</li>
<li>Do not need to expose to users or used to rollback changes.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1c76dc5" class="outline-2">
<h2 id="org1c76dc5"><span class="section-number-2">3.</span> Buffer pool</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>An in-memory cache of pages read from the disk.</li>
<li>The buffer pool&rsquo;s region of memory is organized as an array of fixed size pages; each array entry is called a frame.</li>
<li>When the DBMS requests a page, the buffer pool first searches its cache, if not found, it copies he page from the disk into one of its frame.</li>
<li>Dirty pages (i.e., modified pages) are buffered rather than writing back immediately.</li>
</ul>
</div>
<div id="outline-container-orgb852292" class="outline-3">
<h3 id="orgb852292"><span class="section-number-3">3.1.</span> Metadata</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Page table: An in-memory hash mapping page ids to frame locations in the buffer pool.</li>
<li>Dirty flag: set by a thread whenever it modifies a page to indicate the pages must be written back to disk.</li>
<li>Pin/Reference counter: tracks the number of threads that are currently accessing the page; the storage manager is not allowed to evict a page if its pin count is greater than 0.</li>
</ul>
</div>
</div>
<div id="outline-container-org56af867" class="outline-3">
<h3 id="org56af867"><span class="section-number-3">3.2.</span> Memory allocation policies</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>The buffer pool decides when to allocate a frame for a page.</li>
<li>Global policies: decisions based on the overall workload, e.g., least recently used (LRU) or clock algorithm.</li>
<li>Local policies: decisions applying to specific query, e.g., priority-based page replacement.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org42624b4" class="outline-2">
<h2 id="org42624b4"><span class="section-number-2">4.</span> Buffer pool optimizations</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-org89a77cd" class="outline-3">
<h3 id="org89a77cd"><span class="section-number-3">4.1.</span> Multiple buffer pools</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li>Each database or page can have its own buffer pool and adopts local policies to reduce latch contention.</li>
<li>To map a page to a buffer pool, the DBMS can use object IDs or page IDs as the key.
<ul class="org-ul">
<li>Record ID: a unique identifier for a row in a table (cf. <a href="https://chenyo-17.github.io/org-static-blog/tag-database.html#org2317270">Tuple layout post</a>).</li>
<li>Object ID: a unique identifier for an object, used to reference a user-defined type.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org1b51ad8" class="outline-3">
<h3 id="org1b51ad8"><span class="section-number-3">4.2.</span> Pre-fetching</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>While the first set of pages is being processed, the DBMS can pre-fetch the second set into the buffer pool based on the dependency between pages.
<ul class="org-ul">
<li>E.g., If pages are index-organized, the sibling pages can be pre-fetched.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org9ba5688" class="outline-3">
<h3 id="org9ba5688"><span class="section-number-3">4.3.</span> Scan sharing</h3>
<div class="outline-text-3" id="text-4-3">
<ul class="org-ul">
<li>Query cursors can reuse retrieved data.</li>
<li>When a query comes while a previous query is being processed by scanning the table, the new query can attach its scanning cursor to the first query&rsquo;s cursor.</li>
<li>The DBMS keeps track of where the second query joined to make sure it also completes the scan.</li>
</ul>
</div>
</div>
<div id="outline-container-org16ef737" class="outline-3">
<h3 id="org16ef737"><span class="section-number-3">4.4.</span> Buffer pool bypass</h3>
<div class="outline-text-3" id="text-4-4">
<ul class="org-ul">
<li>Scanned pages do not have to be stored in the buffer pool to avoid the overhead.</li>
<li>Use cases: a query needs to read a large sequence of contiguous pages; temporary pages like sorting or joins.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orged8eb82" class="outline-2">
<h2 id="orged8eb82"><span class="section-number-2">5.</span> Buffer replacement policies</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>The DBMS decides which page to evict from the buffer pool to free up a frame.</li>
</ul>
</div>
<div id="outline-container-org590934d" class="outline-3">
<h3 id="org590934d"><span class="section-number-3">5.1.</span> Least recently used (LRU)</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>LRU maintains a timestamp of when each page was last accessed, and evicts the page with the oldest timestamp.
<ul class="org-ul">
<li>The timestamp can be stored in a queue for efficient sorting.</li>
</ul></li>
<li>Susceptible to sequential flooding, where the buffer pool is corrupted due to a sequential scan.
<ul class="org-ul">
<li>With the LRU policy the oldest pages are evicted, but they are more likely to be scanned soon.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org52e108c" class="outline-3">
<h3 id="org52e108c"><span class="section-number-3">5.2.</span> Clock</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li>An approximation of LRU but replace the timestamp with a reference bit which is set to 1 when a page is accessed.</li>
<li>Regularly sweeping all pages, if a bit is set to 1, reset to 0; if a bit is 0, evict the page.</li>
</ul>
</div>
</div>
<div id="outline-container-org94bdb0b" class="outline-3">
<h3 id="org94bdb0b"><span class="section-number-3">5.3.</span> LRU-K</h3>
<div class="outline-text-3" id="text-5-3">
<ul class="org-ul">
<li>Tracks the last K accessed timestamps to predict the next accessed time, hence avoid the sequential flooding issue.</li>
</ul>
</div>
<div id="outline-container-org4f28a16" class="outline-4">
<h4 id="org4f28a16"><span class="section-number-4">5.3.1.</span> MySQL approximate LRU-K</h4>
<div class="outline-text-4" id="text-5-3-1">
<ul class="org-ul">
<li>Use a linked list with two entry points: &ldquo;old&rdquo; and &ldquo;young&rdquo;.</li>
<li>The new pages are always inserted to the head of &ldquo;old&rdquo;.</li>
<li>If a page in the &ldquo;old&rdquo; is accessed again, it is then inserted to the head of &ldquo;young&rdquo;.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org5827e39" class="outline-3">
<h3 id="org5827e39"><span class="section-number-3">5.4.</span> Localization</h3>
<div class="outline-text-3" id="text-5-4">
<ul class="org-ul">
<li>Instead of using a global replacement policy, the DBMS make eviction decisions based on each query.</li>
<li>Pages brought in by one query are less likely to evict pages that are important for other ongoing queries.</li>
<li>The DBMS can <b><b>predicts</b></b> more accurately which pages should stay or be evicted once the query is complete, so that the buffer pool is less polluted with less useful pages.</li>
</ul>
</div>
</div>
<div id="outline-container-orga34bca6" class="outline-3">
<h3 id="orga34bca6"><span class="section-number-3">5.5.</span> Priority hint</h3>
<div class="outline-text-3" id="text-5-5">
<ul class="org-ul">
<li>Transactions tell the buffer pool where pages are important based on the <b><b>context</b></b> of each page.</li>
</ul>
</div>
</div>
<div id="outline-container-org0dcf881" class="outline-3">
<h3 id="org0dcf881"><span class="section-number-3">5.6.</span> Dirty pages</h3>
<div class="outline-text-3" id="text-5-6">
<ul class="org-ul">
<li>Two ways to handle dirty pages in the buffer pool:
<ul class="org-ul">
<li>Fast: only drop clean pages.</li>
<li>Slow: write back dirty pages to ensure persistent change, and then evict them (if they will not be read again.).</li>
</ul></li>
<li>Can periodically walk through the page table and write back dirty pages in the background.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgba285d4" class="outline-2">
<h2 id="orgba285d4"><span class="section-number-2">6.</span> Other memory pools</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>A DBMS also maintains other pools to store:
<ul class="org-ul">
<li>query caches,</li>
<li>logs,</li>
<li>temporary tables, e.g., sorting, join,</li>
<li>dictionary caches.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgfc788e7" class="outline-2">
<h2 id="orgfc788e7"><span class="section-number-2">7.</span> OS cache bypass</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li>Most DBMS use direct I/O (e.g., with <code>fsync</code> instead of <code>fwrite</code>) to bypass the OS cache to avoid redundant page copy and to manage eviction policies more intelligently (cf. <a href="https://chenyo-17.github.io/org-static-blog/tag-database.html#org611ff38">Why not OS post</a>).</li>
</ul>
</div>
</div>
<div id="outline-container-orgf8c985d" class="outline-2">
<h2 id="orgf8c985d"><span class="section-number-2">8.</span> I/O scheduling</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>The DBMS maintains internal <b><b>queue</b></b> to track page read/write.</li>
<li>The priority are determined by multi-facets, e.g., critical path task, SLAs.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-08-13-db-notes:-memory-management.html</link>
  <guid>https://chenyo.me/2024-08-13-db-notes:-memory-management.html</guid>
  <pubDate>Tue, 13 Aug 2024 07:46:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Storage Models & Compression]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc883165">1. Database workloads</a>
<ul>
<li><a href="#org876ebf6">1.1. OLTP (Online Transaction Processing)</a></li>
<li><a href="#org10f91cb">1.2. OLAP (Online Analytical Processing)</a></li>
<li><a href="#orgae3ac54">1.3. HTAP (Hybrid)</a></li>
</ul>
</li>
<li><a href="#org567cf9a">2. Storage models</a>
<ul>
<li><a href="#orge440f74">2.1. N-ary Storage Model (NSM)</a></li>
<li><a href="#org908f62d">2.2. Decomposition Storage Model (DSM)</a></li>
<li><a href="#org801e1ad">2.3. Partition Attributes Across (PAX)</a></li>
</ul>
</li>
<li><a href="#orgeb9dd65">3. Database compression</a>
<ul>
<li><a href="#orgeeab136">3.1. Compression granularity</a></li>
<li><a href="#orgbe6afe5">3.2. Naive compression</a></li>
</ul>
</li>
<li><a href="#org406dcf9">4. Columnar compression</a>
<ul>
<li><a href="#orgfd3bfbe">4.1. Dictionary encoding</a></li>
<li><a href="#orgb4ae498">4.2. Run-Length encoding (RLE)</a></li>
<li><a href="#org7b9f9f9">4.3. Bit-packing encoding</a></li>
<li><a href="#orgf9503c8">4.4. Mostly encoding</a></li>
<li><a href="#org747efa1">4.5. Bitmap (One-hot) encoding</a></li>
<li><a href="#org14bcf11">4.6. Delta encoding</a></li>
<li><a href="#orgc3a6508">4.7. Incremental encoding</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://15445.courses.cs.cmu.edu/fall2023/notes/05-storage3.pdf">CMU 15-445 L5 notes</a>.
</p>
<div id="outline-container-orgc883165" class="outline-2">
<h2 id="orgc883165"><span class="section-number-2">1.</span> Database workloads</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org876ebf6" class="outline-3">
<h3 id="org876ebf6"><span class="section-number-3">1.1.</span> OLTP (Online Transaction Processing)</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Characterized by fast, repetitive, simple queries that operator on a small amount of data, e.g., a user adds an item to its Amazon cart and pay.</li>
<li>Usually more writes than read.</li>
</ul>
</div>
</div>
<div id="outline-container-org10f91cb" class="outline-3">
<h3 id="org10f91cb"><span class="section-number-3">1.2.</span> OLAP (Online Analytical Processing)</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Characterized by complex read queries on large data.</li>
<li>E.g., compute the most popular item in a period.</li>
</ul>
</div>
</div>
<div id="outline-container-orgae3ac54" class="outline-3">
<h3 id="orgae3ac54"><span class="section-number-3">1.3.</span> HTAP (Hybrid)</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>OLTP + OLAP.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org567cf9a" class="outline-2">
<h2 id="org567cf9a"><span class="section-number-2">2.</span> Storage models</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Different ways to store tuples in pages.</li>
</ul>
</div>
<div id="outline-container-orge440f74" class="outline-3">
<h3 id="orge440f74"><span class="section-number-3">2.1.</span> N-ary Storage Model (NSM)</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>Store all attributes for a single tuple contiguously in a single page, e.g., slotted pages.</li>
<li>Pros: good for queries that need the entire tuple, e.g., OLTP.</li>
<li>Cons: inefficient for scanning large data with a few attributes, e.g., OLAP.</li>
</ul>
</div>
</div>
<div id="outline-container-org908f62d" class="outline-3">
<h3 id="org908f62d"><span class="section-number-3">2.2.</span> Decomposition Storage Model (DSM)</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>Store each attribute for all tuples contiguously in a block of data, i.e., column store.</li>
<li>Pros: save I/O; better data compression; ideal for bulk single attribute queries like OLAP.</li>
<li>Cons: slow for point queries due to tuple splitting, e.g., OLTP.</li>
<li>2 common ways to put back tuples:
<ul class="org-ul">
<li>Most common: use fixed-length offsets, e.g., the value in a given column belong to the same tuple as the value in another column at the same offset.</li>
<li>Less common: use embedded tuple ids, e.g., each attribute is associated with the tuple id, and the DBMS stores a mapping to jump to any attribute with the given tuple id.</li>
</ul></li>
</ul>


<figure id="org72f63eb">
<img src="./static/db-dsm-storage-model.png" alt="db-dsm-storage-model.png" align="center" width="550px">

<figcaption><span class="figure-number">Figure 1: </span>DSM storage model (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org801e1ad" class="outline-3">
<h3 id="org801e1ad"><span class="section-number-3">2.3.</span> Partition Attributes Across (PAX)</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li>Rows are horizontally partitioned into groups of rows; each row group uses a column store.</li>
<li>A PAX file has a global header containing a directory with each row group&rsquo;s offset; each row group maintains its own header with content metadata.</li>
</ul>


<figure id="org4455f3c">
<img src="./static/db-pax-storage-model.png" alt="db-pax-storage-model.png" align="center" width="300px">

<figcaption><span class="figure-number">Figure 2: </span>PAX storage model (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-orgeb9dd65" class="outline-2">
<h2 id="orgeb9dd65"><span class="section-number-2">3.</span> Database compression</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Disk I/O is always the main bottleneck; read-only analytical workloads are popular; compression in advance allows for more I/O throughput.</li>
<li><b><b>Real-world</b></b> data sets have the following properties for compression:
<ul class="org-ul">
<li><b><b>Highly skewed</b></b> distributions for attribute values.</li>
<li><b><b>High correlation</b></b> between attributes of the same tuple, e.g., zip code to city.</li>
</ul></li>
<li>Requirements on the database compression:
<ul class="org-ul">
<li>Fixed-length values to follow word-alignment; variable length data stored in separate mappings.</li>
<li>Postpone decompression as long as possible during query execution, i.e., <b><b>late materialization</b></b>.</li>
<li>Lossless; any lossy compression can only be performed at the  application level.</li>
</ul></li>
</ul>
</div>
<div id="outline-container-orgeeab136" class="outline-3">
<h3 id="orgeeab136"><span class="section-number-3">3.1.</span> Compression granularity</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Block level: compress all tuples for the same table.</li>
<li>Tuple level: compress each tuple (NSM only).</li>
<li>Attribute level: compress one or multiple values within one tuple.</li>
<li>Columnar level: compress one or multiple columns across multiple tuples (DSM only).</li>
</ul>
</div>
</div>
<div id="outline-container-orgbe6afe5" class="outline-3">
<h3 id="orgbe6afe5"><span class="section-number-3">3.2.</span> Naive compression</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>Engineers often use a general purpose compression algorithm with lower compression ratio in exchange for faster compression/decompression.</li>
<li>E.g., compress disk pages by padding them to a power of 2KBs and storing them in the buffer pool.
<ul class="org-ul">
<li>Why small chunk: must decompress before reading/writing the data every time, hence need o limit the compression scope.</li>
</ul></li>
<li>Does not consider the high-level data semantics, thus cannot utilize late materialization.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org406dcf9" class="outline-2">
<h2 id="org406dcf9"><span class="section-number-2">4.</span> Columnar compression</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>Works best with OLAP, may need additional support for writes.</li>
</ul>
</div>
<div id="outline-container-orgfd3bfbe" class="outline-3">
<h3 id="orgfd3bfbe"><span class="section-number-3">4.1.</span> Dictionary encoding</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li>The most common database compression scheme, support late materialization.</li>
<li>Replace frequent value patterns with smaller codes, and use a dictionary to map codes to their original values.</li>
<li>Need to support fast encoding and decoding, so hash function is impossible.</li>
<li>Need to support order-preserving encodings, i.e., sorting codes in the same order as original values, to support <b><b>range queries</b></b>.
<ul class="org-ul">
<li>E.g., when <code>SELECT DISTINCT</code> with pattern-matching, the DBMS only needs to scan the encoding dictionary (but without <code>DISTINCT</code> it still needs to scan the whole column).</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgb4ae498" class="outline-3">
<h3 id="orgb4ae498"><span class="section-number-3">4.2.</span> Run-Length encoding (RLE)</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>Compress runs (consecutive instances) of the same value in a column into triplets <code>(value, offset, length)</code>.</li>
<li>Need to cluster same column values to maximize the compression.</li>
</ul>


<figure id="org41f927d">
<img src="./static/db-rle-storage-model.png" alt="db-rle-storage-model.png" align="center" width="550px">

<figcaption><span class="figure-number">Figure 3: </span>Run-length encoding (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org7b9f9f9" class="outline-3">
<h3 id="org7b9f9f9"><span class="section-number-3">4.3.</span> Bit-packing encoding</h3>
<div class="outline-text-3" id="text-4-3">
<ul class="org-ul">
<li>Use less bits to store an attribute.</li>
</ul>


<figure id="org186437e">
<img src="./static/db-bit-packing-storage-model.png" alt="db-bit-packing-storage-model.png" align="center" width="250px">

<figcaption><span class="figure-number">Figure 4: </span>Bit-packing encoding (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-orgf9503c8" class="outline-3">
<h3 id="orgf9503c8"><span class="section-number-3">4.4.</span> Mostly encoding</h3>
<div class="outline-text-3" id="text-4-4">
<ul class="org-ul">
<li>Use a special marker to indicate values that exceed the bit size and maintains a look-up table to store them.</li>
</ul>


<figure id="org5d2928a">
<img src="./static/db-mostly-encoding-storage-model.png" alt="db-mostly-encoding-storage-model.png" align="center" width="550px">

<figcaption><span class="figure-number">Figure 5: </span>Mostly encoding (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org747efa1" class="outline-3">
<h3 id="org747efa1"><span class="section-number-3">4.5.</span> Bitmap (One-hot) encoding</h3>
<div class="outline-text-3" id="text-4-5">
<ul class="org-ul">
<li>Only practical if the value cardinality is low.</li>
</ul>


<figure id="org4d22f30">
<img src="./static/db-bitmap-encoding-storage-model.png" alt="db-bitmap-encoding-storage-model.png" align="center" width="400px">

<figcaption><span class="figure-number">Figure 6: </span>Bitmap encoding (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org14bcf11" class="outline-3">
<h3 id="org14bcf11"><span class="section-number-3">4.6.</span> Delta encoding</h3>
<div class="outline-text-3" id="text-4-6">
<ul class="org-ul">
<li>Record the difference between values; the base value can be stored in-line or in a separate look-up table.</li>
<li>Can be combined with RLE encoding.</li>
</ul>


<figure id="orga9e25bd">
<img src="./static/db-delta-encoding-storage-model.png" alt="db-delta-encoding-storage-model.png" align="center" width="500px">

<figcaption><span class="figure-number">Figure 7: </span>Delta encoding (<a href="https://15445.courses.cs.cmu.edu/fall2023/slides/05-storage3.pdf">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-orgc3a6508" class="outline-3">
<h3 id="orgc3a6508"><span class="section-number-3">4.7.</span> Incremental encoding</h3>
<div class="outline-text-3" id="text-4-7">
<ul class="org-ul">
<li>Common prefixes or suffixes and their lengths are recorded to avoid duplication.</li>
<li>Need to sort the data first.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-08-08-db-notes:-storage-models-and-compression.html</link>
  <guid>https://chenyo.me/2024-08-08-db-notes:-storage-models-and-compression.html</guid>
  <pubDate>Thu, 08 Aug 2024 17:48:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: Blockworks news (Sei, Monad, Solana)]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org02b5ac5">1. Terminology</a>
<ul>
<li><a href="#orgc46841b">1.1. Ethereum sharding</a></li>
<li><a href="#org6944512">1.2. Blob</a></li>
<li><a href="#org452bd47">1.3. Erasure coding</a></li>
<li><a href="#orgd73043f">1.4. Data availability sampling (DAS)</a></li>
<li><a href="#org22b5678">1.5. Danksharding (L2 optimization)</a></li>
<li><a href="#org0a50460">1.6. Relations between L1 and L2 scaling</a></li>
<li><a href="#orgf5225ef">1.7. Double spending prevention</a></li>
<li><a href="#orge000ad0">1.8. Sealevel (Solana)</a></li>
</ul>
</li>
<li><a href="#org0ac981c">2. Ways to achieve parallel processing</a></li>
<li><a href="#org3be02aa">3. Production-ready parallelized EVM projects (Jan 2024)</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://blockworks.co/news/parallelized-evms-gaining-popularity">Blockworks news (12.01.2024)</a> as well as some terminology explained online, e.g., <a href="https://www.coindesk.com/learn/what-is-ethereum-sharding-a-beginners-guide/">Coindesk</a> and <a href="https://chatgpt.com/c/824f05c9-dc75-4eb6-aeda-59d057baf83a">GPT-4o</a>.
</p>
<div id="outline-container-org02b5ac5" class="outline-2">
<h2 id="org02b5ac5"><span class="section-number-2">1.</span> Terminology</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgc46841b" class="outline-3">
<h3 id="orgc46841b"><span class="section-number-3">1.1.</span> Ethereum sharding</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>The Ethereum mainnet is divided into smaller interconnected networks called shards.</li>
<li>Each shard processes and validates its own transactions parallel to others.</li>
<li>Pros: increase scalability and <b><b>participation</b></b>.</li>
<li>Cons: a single unit can be compromised; lead to centralization.</li>
</ul>
</div>
</div>
<div id="outline-container-org6944512" class="outline-3">
<h3 id="org6944512"><span class="section-number-3">1.2.</span> Blob</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Rather than storing each transaction data directly in the blockchain, the data is aggregated into a blob (binary object).</li>
<li>Each blob performs erasure coding to dive the blob into multiple smaller pieces with redundancy.</li>
<li>Encoded pieces are stored separately, the block header contain pointers to the piece locations without storing actual data.</li>
<li>Transactions in a block may be distributed across multiple blobs.</li>
</ul>
</div>
</div>
<div id="outline-container-org452bd47" class="outline-3">
<h3 id="org452bd47"><span class="section-number-3">1.3.</span> Erasure coding</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Allows one to encode blobs such that if at least half of the data in the blob is published, anyone in the network can reconstruct and re-publish the rest of the data.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd73043f" class="outline-3">
<h3 id="orgd73043f"><span class="section-number-3">1.4.</span> Data availability sampling (DAS)</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>Validators randomly sample blob pieces to confirm the data can be reconstructed.g</li>
<li>If a client cannot get enough pieces to verify the blob availability, or the blob fails the integrity check, or transactions within the blob are invalid or inconsistent with the blockchain state, the blob is rejected.</li>
</ul>
</div>
</div>
<div id="outline-container-org22b5678" class="outline-3">
<h3 id="org22b5678"><span class="section-number-3">1.5.</span> Danksharding (L2 optimization)</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>A specific sharding implementation proposal.</li>
<li>Require data availability sampling and <a href="https://chenyo-17.github.io/org-static-blog/tag-evm.html#orgf2db0ef">proposer-builder separation</a>.</li>
<li>Can support hundreds of individual rollups.</li>
</ul>
</div>
</div>
<div id="outline-container-org0a50460" class="outline-3">
<h3 id="org0a50460"><span class="section-number-3">1.6.</span> Relations between L1 and L2 scaling</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>L1 scaling: optimizations directly to the Ethereum mainnet and core infrastructure, e.g., parallel EVM.</li>
<li>L2 scaling: building secondary rollup layers, e.g., optimistic rollups and ZK rollups, to offload mainnet computation and storage.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf5225ef" class="outline-3">
<h3 id="orgf5225ef"><span class="section-number-3">1.7.</span> Double spending prevention</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>Bitcoin: uses UTXOs to track which inputs have been spent (no need to go through the entire chain).</li>
<li>Ethereum: uses a nounce to track the number of transactions sent from an account, the nounce is included in the transaction and is incremented by 1 for every new transaction, and all transactions must be executed in order.</li>
</ul>
</div>
</div>
<div id="outline-container-orge000ad0" class="outline-3">
<h3 id="orge000ad0"><span class="section-number-3">1.8.</span> Sealevel (Solana)</h3>
<div class="outline-text-3" id="text-1-8">
<ul class="org-ul">
<li>Solana&rsquo;s parallel smart contract runtime to process thousands of contracts in parallel.</li>
<li>Solana transactions describe all states a transaction accesses to efficiently recognize transaction dependency and to schedule parallel execution without accessing full blockchain state.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org0ac981c" class="outline-2">
<h2 id="org0ac981c"><span class="section-number-2">2.</span> Ways to achieve parallel processing</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Process independent transactions in parallel.</li>
<li>Sharding.</li>
</ul>
</div>
</div>
<div id="outline-container-org3be02aa" class="outline-2">
<h2 id="org3be02aa"><span class="section-number-2">3.</span> Production-ready parallelized EVM projects (Jan 2024)</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Sei: optimistic parallel execution.</li>
<li>Monad: custom EVM implementation, optimistic parallel execution, <b><b>custom state database</b></b>.
<ul class="org-ul">
<li>Commodity databases are not optimized for Merkle tree data read/write with SSD.</li>
</ul></li>
<li>Neon (Solana): transactions pre-specify dependencies.</li>
<li>See <a href="https://chenyo-17.github.io/org-static-blog/tag-evm.html#orgcb5510d">BNB chain post</a> for more solutions.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-blockworks.html">blockworks</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[blockworks]]></category>
  <link>https://chenyo.me/2024-08-08-parallel-evm:-blockworks-bigger-picture.html</link>
  <guid>https://chenyo.me/2024-08-08-parallel-evm:-blockworks-bigger-picture.html</guid>
  <pubDate>Thu, 08 Aug 2024 09:19:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[My Exam Organization Experience]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org9675a18">1. What is it about?</a></li>
<li><a href="#org867f915">2. My first exam</a></li>
<li><a href="#org123e1b9">3. My second exam</a></li>
<li><a href="#org3fd6a68">4. My third exam</a></li>
<li><a href="#org31e1d93">5. My fourth exam</a></li>
<li><a href="#org2f93c2e">6. My feeling</a></li>
</ul>
</div>
</nav>
<p>
This post was co-authored with the assistance of Cursor and Claude AI.
</p>
<div id="outline-container-org9675a18" class="outline-2">
<h2 id="org9675a18"><span class="section-number-2">1.</span> What is it about?</h2>
<div class="outline-text-2" id="text-1">
<p>
Over the past years, I&rsquo;ve been involved in organizing and monitoring four exams.
Yesterday marked my fourth and likely final exam monitoring session for the foreseeable future.
Now seems like an opportune moment to reflect on my exam organization journey.
</p>
</div>
</div>
<div id="outline-container-org867f915" class="outline-2">
<h2 id="org867f915"><span class="section-number-2">2.</span> My first exam</h2>
<div class="outline-text-2" id="text-2">
<p>
My first exam experience was relatively straightforward.
As I was unfamiliar with the exam content, my primary responsibility was taking students to the restrooms.
I recall accompanying nearly 10 students during the session.
For the remainder of the time, I sat at the back of the room, occupying myself with some drawing.
</p>
</div>
</div>
<div id="outline-container-org123e1b9" class="outline-2">
<h2 id="org123e1b9"><span class="section-number-2">3.</span> My second exam</h2>
<div class="outline-text-2" id="text-3">
<p>
This exam was identical to the first, but I was tasked with designing a significant portion of the questions.
Initially, formulating questions seemed straightforward, but I later realized my inability to create effective ones.
My first draft incorporated connections between various questions.
During the review process, I was advised to maximize information density in questions, as stressed students prefer concise text.
Additional challenges emerged when I began grading the exams.
For example, open-ended questions consistently yielded unexpected answers, requiring me to modify the grading scheme while maintaining consistency with previous assessments.
</p>

<p>
The exam monitoring this time was more demanding as I began responding to student inquiries.
My limited knowledge of the entire exam often required me to seek assistance from colleagues, and occasionally I struggled to comprehend the questions.
</p>

<p>
Grading the exam proved to be the most challenging aspect of the process.
Evaluating over 100 exams, deciphering handwriting, determining fair point allocations, and recording scores was an incredibly tedious task.
Unlike traditional mathematics exams that focus primarily on calculations, our exam encouraged creative thinking.
Each answer contained implicit assumptions about the question, requiring careful interpretation to avoid excessive point deductions.
The process was extremely time-consuming and offered minimal personal benefit or satisfaction.
</p>
</div>
</div>
<div id="outline-container-org3fd6a68" class="outline-2">
<h2 id="org3fd6a68"><span class="section-number-2">4.</span> My third exam</h2>
<div class="outline-text-2" id="text-4">
<p>
This was a different exam, where I again designed one part and monitored its administration.
Fortunately, due to its advanced nature, few students registered for this exam.
This time, I had the privilege of collaborating with exceptional colleagues.
Despite these advantages, the design process still demanded considerable effort on my part.
</p>

<p>
A unique aspect of this exam was that I also developed the course material, as it was a newly introduced subject.
The topic proved challenging, and the exercises were demanding.
Students expressed concerns about the complexity of the material.
Consequently, we faced the task of devising ways to simplify the exam questions without compromising their effectiveness.
</p>
</div>
</div>
<div id="outline-container-org31e1d93" class="outline-2">
<h2 id="org31e1d93"><span class="section-number-2">5.</span> My fourth exam</h2>
<div class="outline-text-2" id="text-5">
<p>
Now comes the most recent exam, where I took on the role of a coordinator.
This position entailed not only designing my portion of the tasks but also finding colleagues to design other tasks, managing the timeline, reviewing drafts, printing exams, coordinating exam monitoring, and overseeing the grading process.
Fortunately, I had the support of proactive and helpful colleagues, which allowed everything to proceed smoothly.
</p>

<p>
The monitoring process proved particularly demanding this time.
As I was now familiar with the entire exam, I was responsible for reading instructions, making announcements, and answering as many questions as possible.
I had to arrive at the exam rooms by 8 AM, forgoing breakfast, and remained standing and focused until noon.
In retrospect, I may have been overly diligent due to inexperience and could have perhaps allowed myself to relax more. However, I&rsquo;ll never know for certain, as this marks the conclusion of my exam organization duties.
</p>

<p>
Well, not quite the end, as I still need to complete the grading and submit the results.
</p>
</div>
</div>
<div id="outline-container-org2f93c2e" class="outline-2">
<h2 id="org2f93c2e"><span class="section-number-2">6.</span> My feeling</h2>
<div class="outline-text-2" id="text-6">
<p>
After four instances of exam organization experience, I must admit that I do not recommend it.
This opinion is, of course, highly personal, as I am not particularly inclined towards teaching.
From my perspective, it is a job that demands significant effort while offering minimal returns.
I can confidently say that I invest more time in the exam process than any individual student taking it.
</p>

<p>
The process of designing and grading exams presents a complex optimization challenge.
There&rsquo;s an inverse relationship between the time spent on design and the time required for grading.
The less effort put into crafting the exam, the more time-consuming the grading process becomes.
Moreover, it&rsquo;s disheartening to spend two full days meticulously designing and reviewing a question,
only to have it attempted by a mere handful of students.
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-teach.html">teach</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[teach]]></category>
  <link>https://chenyo.me/2024-08-07-my-exam-organization-experience.html</link>
  <guid>https://chenyo.me/2024-08-07-my-exam-organization-experience.html</guid>
  <pubDate>Wed, 07 Aug 2024 20:16:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Database storage]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org09dbc83">1. Data storage</a>
<ul>
<li><a href="#org92af993">1.1. Volatile device</a></li>
<li><a href="#org54ff7e0">1.2. Non-volatile device</a></li>
<li><a href="#org48bad0d">1.3. Storage hierarchy</a></li>
<li><a href="#org09269d2">1.4. Persistent memory</a></li>
<li><a href="#orgfdf2675">1.5. NVM (non-volatile memory express)</a></li>
</ul>
</li>
<li><a href="#orgba9373d">2. DBMS architecture</a>
<ul>
<li><a href="#org232cc8e">2.1. Why not OS</a></li>
</ul>
</li>
<li><a href="#org762b2f5">3. Database pages</a>
<ul>
<li><a href="#org35eca5b">3.1. Hardware page</a></li>
</ul>
</li>
<li><a href="#org2725c17">4. Database heap</a></li>
<li><a href="#org105df8a">5. Page layout</a>
<ul>
<li><a href="#orgb54e409">5.1. Slotted-pages</a></li>
<li><a href="#orgd61b63c">5.2. Log-structured</a>
<ul>
<li><a href="#org6e65d7a">5.2.1. Log compaction</a></li>
</ul>
</li>
<li><a href="#org4c964f1">5.3. Index-organized storage</a></li>
</ul>
</li>
<li><a href="#orgdfeb043">6. Tuple layout</a>
<ul>
<li><a href="#orgb48d818">6.1. Denormalized tuple data</a></li>
</ul>
</li>
<li><a href="#org577df1e">7. Data representation</a>
<ul>
<li><a href="#orge8e97ae">7.1. Integers</a></li>
<li><a href="#org9d7c8ea">7.2. Variable precision numbers</a></li>
<li><a href="#org59d89b8">7.3. Fixed-point precision numbers</a></li>
<li><a href="#orgf9be359">7.4. Variable-length data</a></li>
<li><a href="#org88c2bb5">7.5. Dates/Times</a></li>
<li><a href="#org1882d0c">7.6. Null</a></li>
</ul>
</li>
<li><a href="#org96b5e35">8. System catalogs</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://15445.courses.cs.cmu.edu/fall2023/notes/03-storage1.pdf">CMU 15-445 L3 notes</a> and <a href="https://15445.courses.cs.cmu.edu/fall2023/notes/04-storage2.pdf">CMU 15-445 L4 notes</a>.
</p>
<div id="outline-container-org09dbc83" class="outline-2">
<h2 id="org09dbc83"><span class="section-number-2">1.</span> Data storage</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org92af993" class="outline-3">
<h3 id="org92af993"><span class="section-number-3">1.1.</span> Volatile device</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>The data is lost once the power is off.</li>
<li>Support fast random access with byte-addressable locations, i.e., can jump to any byte address and access the data.</li>
<li>A.k.a memory, e.g., DRAM.</li>
</ul>
</div>
</div>
<div id="outline-container-org54ff7e0" class="outline-3">
<h3 id="org54ff7e0"><span class="section-number-3">1.2.</span> Non-volatile device</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>The data is retained after the power is off.</li>
<li>Block/Page addressable, i.e., in order to read a value at a particular offset, first need to load 4KB page into memory that holds the value.</li>
<li>Perform better for sequential access, i.e., contiguous chunks.</li>
<li>A.k.a disk, e.g., SSD (solid-state storage) and HDD (spinning hard drives).</li>
</ul>
</div>
</div>
<div id="outline-container-org48bad0d" class="outline-3">
<h3 id="org48bad0d"><span class="section-number-3">1.3.</span> Storage hierarchy</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Close to CPU: faster, smaller, more expensive.</li>
</ul>
</div>
</div>
<div id="outline-container-org09269d2" class="outline-3">
<h3 id="org09269d2"><span class="section-number-3">1.4.</span> Persistent memory</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>As fast as DRAM, with the persistence of disk.</li>
<li>Not in widespread production use.</li>
<li>A.k.a, non-volatile memory.</li>
</ul>
</div>
</div>
<div id="outline-container-orgfdf2675" class="outline-3">
<h3 id="orgfdf2675"><span class="section-number-3">1.5.</span> NVM (non-volatile memory express)</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>NAND flash drives that connect over an improved hardware interface to allow faster transfer.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgba9373d" class="outline-2">
<h2 id="orgba9373d"><span class="section-number-2">2.</span> DBMS architecture</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Primary storage location of the database is on disks.</li>
<li>The DBMS is responsible for data movement between disk and memory with a buffer pool.</li>
<li>The data is organized into pages by the storage manager; the first page is the directory page</li>
<li>To execute the query, the execution engine asks the buffer pool for a page; the buffer pool brings the page to the memory, gives the execution engine the page pointer, and ensures the page is retained in the memory while being executed.</li>
</ul>
</div>
<div id="outline-container-org232cc8e" class="outline-3">
<h3 id="org232cc8e"><span class="section-number-3">2.1.</span> Why not OS</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>The architecture is like virtual memory: a large address space and a place for the OS to bring the pages from the disk.</li>
<li>The OS way to achieve virtual memory is to use <code>mmap</code> to map the contents of a file in a process address space, and the OS is responsible for the data movement.</li>
<li>If <code>mmap</code> hits a page fault, the process is blocked; however a DBMS should be able to still process other queries.</li>
<li>A DBMS knows more about the data being processed (the OS cannot decode the file contents) and can do better than OS.</li>
<li>Can still use some OS operations:
<ul class="org-ul">
<li><code>madvise</code>: tell the OS when DBMS is planning on reading some page.</li>
<li><code>mlock</code>: tell the OS to not swap ranges outs of disk.</li>
<li><code>msync</code>: tell the OS to flush memory ranges out to disk, i.e., write.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org762b2f5" class="outline-2">
<h2 id="org762b2f5"><span class="section-number-2">3.</span> Database pages</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Usually fixed-sized blocks of data.</li>
<li>Can contain different data types, e.g., tuples, indexes; data of different types are usually not mixed within the same page.</li>
<li>Some DBMS requires each page is self-contained, i.e., a tuple does not point to another page.</li>
<li>Each page is given a unique id, which can be mapped to the file path and offset to find the page.</li>
</ul>
</div>
<div id="outline-container-org35eca5b" class="outline-3">
<h3 id="org35eca5b"><span class="section-number-3">3.1.</span> Hardware page</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>The storage that a device guarantees an atomic write, i.e., if the hardware page is 4KB and the DBMS tries to write 4KB to the disk, either all 4KB is written or none is.</li>
<li>If the database page is larger than the hardware page, the DBMS requires extra measures to ensure the writing atomicity itself.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org2725c17" class="outline-2">
<h2 id="org2725c17"><span class="section-number-2">4.</span> Database heap</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>A heap file (e.g., a table) is an unordered collection of pages where tuples are stored in random order.</li>
<li>To locate a page in a heap file, a DBMS can use either a linked list or a page directory.
<ul class="org-ul">
<li>Linked list: the header page holds a pointer to a list of data and free pages; require a sequential scan when finding a specific page.</li>
<li>Page directory: a DBMS uses special pages to track the location of each data page and the free space in database files.
<ul class="org-ul">
<li>All changes to the page directory must be recorded on disk to allow the DBMS to find on restart.</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org105df8a" class="outline-2">
<h2 id="org105df8a"><span class="section-number-2">5.</span> Page layout</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>Each page includes a header to record the page meta-data, e.g., page size, checksum, version.</li>
<li>Two main approaches to laying out data in pages: slotted-pages and log-structured.</li>
</ul>
</div>
<div id="outline-container-orgb54e409" class="outline-3">
<h3 id="orgb54e409"><span class="section-number-3">5.1.</span> Slotted-pages</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>The header keeps track of the number of used slots, the offset of the starting of each slot.</li>
<li>When adding a tuple, the slot array grows from the beginning to the end, the tuple data grows from the end to the beginning; the page is full when they meet.</li>
<li>Problems associated with this layout are:
<ul class="org-ul">
<li>Fragmentation: tuple deletions leave gaps in the pages.</li>
<li>Inefficient disk I/O: need to fetch the entire block to update a tuple; users could randomly jump to multiple different pages to update a tuple.</li>
</ul></li>
</ul>


<figure id="org31a56b5">
<img src="https://miro.medium.com/v2/resize:fit:935/1*7AuKrdEJQpfRYhavwWzwhg.png" alt="1*7AuKrdEJQpfRYhavwWzwhg.png" align="center" width="400px">

<figcaption><span class="figure-number">Figure 1: </span>Slotted pages (<a href="https://miro.medium.com/v2/resize:fit:935/1*7AuKrdEJQpfRYhavwWzwhg.png">Source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-orgd61b63c" class="outline-3">
<h3 id="orgd61b63c"><span class="section-number-3">5.2.</span> Log-structured</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li>Only allows creations of new pages and no overwrites.</li>
<li>Stores the log records of changes to the tuples; the DBMS appends new log entries to an in-memory buffer without checking previous records -&gt; fast writes.</li>
<li>Potentially slow reads; can be optimized by bookkeeping the latest write of each tuple.</li>
</ul>
</div>
<div id="outline-container-org6e65d7a" class="outline-4">
<h4 id="org6e65d7a"><span class="section-number-4">5.2.1.</span> Log compaction</h4>
<div class="outline-text-4" id="text-5-2-1">
<ul class="org-ul">
<li>Take only the most recent change for each tuple across several pages.</li>
<li>There is only one entry for each tuple after the compaction, and can be easily sorted by id for faster lookup -&gt; called Sorted String Table (SSTable).</li>
<li>Universal compaction: any log files can be compacted.</li>
<li>Level compaction: level 0 (smallest) files can be compacted to created a level 1 file.</li>
<li>Write amplification issue: for each logical write, there could be multiple physical writes.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org4c964f1" class="outline-3">
<h3 id="org4c964f1"><span class="section-number-3">5.3.</span> Index-organized storage</h3>
<div class="outline-text-3" id="text-5-3">
<ul class="org-ul">
<li>Both page-oriented and log-structured storage rely on additional index to find a tuple since tables are inherently unsorted.</li>
<li>In an index-organized storage scheme, the DBMS stores tuples as the value of an index data structure.</li>
<li>E.g., In a B-tree indexed DBMS, the index (i.e., primary keys) are stored as the intermediate nodes, and the data is stored in the leaf nodes.</li>
</ul>


<figure id="orgf501c0e">
<img src="https://docs.oracle.com/en/database/oracle/oracle-database/21/cncpt/img/cncpt272.gif" alt="cncpt272.gif" align="center" width="400px">

<figcaption><span class="figure-number">Figure 2: </span>Index-organized storage (<a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/cncpt/img/cncpt272.gif">Source</a>)</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-orgdfeb043" class="outline-2">
<h2 id="orgdfeb043"><span class="section-number-2">6.</span> Tuple layout</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Tuple: a sequence of bytes for a DBMS to decode.</li>
<li>Tuple header: contains tuple meta-data, e.g., visibility information (which transactions write the tuple).</li>
<li>Tuple data: cannot exceed the size of a page.</li>
<li>Unique id: usually page id + offset/slot; an application cannot rely on it to mean anything.</li>
</ul>
</div>
<div id="outline-container-orgb48d818" class="outline-3">
<h3 id="orgb48d818"><span class="section-number-3">6.1.</span> Denormalized tuple data</h3>
<div class="outline-text-3" id="text-6-1">
<ul class="org-ul">
<li>If two tables are related, a DBMS can &ldquo;pre-join&rdquo; them so that the tables are on the same page.</li>
<li>The read is faster since only one page is required to load, but the write is more expensive since a tuple needs more space (<b><b>not free lunch in DB system!</b></b>).</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org577df1e" class="outline-2">
<h2 id="org577df1e"><span class="section-number-2">7.</span> Data representation</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li>A data representation scheme specifies how a DBMS stores the bytes of a tuple.</li>
<li>Tuples can be word-aligned via padding or attribute reordering to make sure the CPU can access a tuple without unexpected behavior.</li>
<li>5 high level data types stored in a tuple: integer, variable-precision numbers, fixed-point precision numbers, variable length values, dates/times.</li>
</ul>
</div>
<div id="outline-container-orge8e97ae" class="outline-3">
<h3 id="orge8e97ae"><span class="section-number-3">7.1.</span> Integers</h3>
<div class="outline-text-3" id="text-7-1">
<ul class="org-ul">
<li>Fixed length, usually stored using the DBMS native C/C++ types.</li>
<li>E.g., <code>INTEGER</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-org9d7c8ea" class="outline-3">
<h3 id="org9d7c8ea"><span class="section-number-3">7.2.</span> Variable precision numbers</h3>
<div class="outline-text-3" id="text-7-2">
<ul class="org-ul">
<li>Inexact, variable-precision numeric types; fast than arbitrary precision numbers.</li>
<li>Could have rounding errors.</li>
<li>E.g., <code>REAL</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-org59d89b8" class="outline-3">
<h3 id="org59d89b8"><span class="section-number-3">7.3.</span> Fixed-point precision numbers</h3>
<div class="outline-text-3" id="text-7-3">
<ul class="org-ul">
<li>Arbitrary precision data type stored in exact, variable-length binary representation (almost like a string) with additional meta-data (e.g., length, decimal position).</li>
<li>E.g., <code>DECIMAL</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf9be359" class="outline-3">
<h3 id="orgf9be359"><span class="section-number-3">7.4.</span> Variable-length data</h3>
<div class="outline-text-3" id="text-7-4">
<ul class="org-ul">
<li>Represent data of arbitrary length, usually stored with a header to keep the track of the length and the checksum.</li>
<li>Overflowed data is stored on a special overflow page referenced by the tuple, the overflow page can also contain pointers to next overflow pages.</li>
<li>Some DBMS allows to store files (e.g., photos) externally, but the DBMS cannot modify them.</li>
<li>E.g., <code>BLOB</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-org88c2bb5" class="outline-3">
<h3 id="org88c2bb5"><span class="section-number-3">7.5.</span> Dates/Times</h3>
<div class="outline-text-3" id="text-7-5">
<ul class="org-ul">
<li>Usually represented as unit time, e.g., micro/milli-seconds.</li>
<li>E.g., <code>TIMESTAMP</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-org1882d0c" class="outline-3">
<h3 id="org1882d0c"><span class="section-number-3">7.6.</span> Null</h3>
<div class="outline-text-3" id="text-7-6">
<ul class="org-ul">
<li>3 common approaches to represent nulls:
<ul class="org-ul">
<li>Most common: store a bitmap in a centralized header to specify which attributes are null.</li>
<li>Designate a value, e.g., <code>INT32_MIN</code>.</li>
<li>Not recommended: store a flag per attribute to mark a value is null; may need more bits to ensure word alignment.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org96b5e35" class="outline-2">
<h2 id="org96b5e35"><span class="section-number-2">8.</span> System catalogs</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>A DBMS maintains an internal catalog table for the table meta-data, e.g., tables/columns, user permissions, table statistics.</li>
<li>Bootstrapped by special code.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-07-31-db-notes:-database-storage.html</link>
  <guid>https://chenyo.me/2024-07-31-db-notes:-database-storage.html</guid>
  <pubDate>Wed, 31 Jul 2024 18:26:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Ethereum Merkle Patricia Trie]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org1c18add">1. Blockchain fundamentals</a>
<ul>
<li><a href="#org8de988b">1.1. RLP (Recursive Length Prefix)</a></li>
<li><a href="#org94ac411">1.2. Merkle tree</a>
<ul>
<li><a href="#org4fadafa">1.2.1. Complexity for \(N\) items.</a></li>
</ul>
</li>
<li><a href="#org39b8c76">1.3. Patricia tree</a></li>
<li><a href="#org2c7d03c">1.4. Merkle Patricia Tree (MPT)</a>
<ul>
<li><a href="#org8949d03">1.4.1. Prefix byte</a></li>
<li><a href="#org71c158d">1.4.2. Complexity for \(N\) items and key length \(K\)</a></li>
</ul>
</li>
<li><a href="#orgff111de">1.5. Rollup state tree</a></li>
<li><a href="#org4212dc0">1.6. PoI for Verkle tree (see MegaETH post for details)</a></li>
<li><a href="#org091905e">1.7. Polynomial/KZG commitment</a></li>
</ul>
</li>
<li><a href="#org3a1c55c">2. Ethereum MPT data structure</a></li>
<li><a href="#org582f94f">3. Ethereum MPT Functionality</a></li>
<li><a href="#org55349ab">4. Proof of inclusion</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note of Ethereum Merkle Patricia Trie (MPT), resources are from:
</p>
<ul class="org-ul">
<li><a href="https://github.com/zhangchiqing/merkle-patricia-trie?tab=readme-ov-file">Simplified Go implementation of Ethereum MPT (2022)</a></li>
<li><a href="https://www.youtube.com/watch?v=Qn6sFmo8xGo">Blockchain trees Youtube (2022)</a></li>
<li><a href="https://claude.ai/chat/a3ee5b1f-4d83-46c1-b681-d2d7b170c7e1">Claude.ai</a></li>
</ul>
<div id="outline-container-org1c18add" class="outline-2">
<h2 id="org1c18add"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org8de988b" class="outline-3">
<h3 id="org8de988b"><span class="section-number-3">1.1.</span> RLP (Recursive Length Prefix)</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>A serialization method to encode arbitrarily nested arrays of binary data.</li>
<li>RLP provides a simple (e.g., no type), space-efficient and deterministic encoding.</li>
</ul>
</div>
</div>
<div id="outline-container-org94ac411" class="outline-3">
<h3 id="org94ac411"><span class="section-number-3">1.2.</span> Merkle tree</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Used in Bitcoin to simplify proof of inclusion (PoI) of a transaction.</li>
<li>If one computes the hash of an array of \(N\):
<ul class="org-ul">
<li>Construction complexity: \(O(n)\) time and space.</li>
<li>PoI complexity: \(O(n)\) time and space (needs all other items).</li>
</ul></li>
</ul>
</div>
<div id="outline-container-org4fadafa" class="outline-4">
<h4 id="org4fadafa"><span class="section-number-4">1.2.1.</span> Complexity for \(N\) items.</h4>
<div class="outline-text-4" id="text-1-2-1">
<ul class="org-ul">
<li>Construction: \(O(2n)\) time and space.</li>
<li>PoI complexity:
<ul class="org-ul">
<li>\(O(logN)\) space: PoI requires one hash from each level from the leaf to the root (the Merkle tree is binary).</li>
<li>\(O(logN)\) time: \(O(logN)\) to collect all hashes, and \(O(logN)\) to generate the proof.</li>
</ul></li>
</ul>


<figure id="org362ed9e">
<img src="https://blockonomi.com/wp-content/uploads/2018/06/merkle-tree.jpg" alt="merkle-tree.jpg" align="center" width="500px">

<figcaption><span class="figure-number">Figure 1: </span>Bitcoin Merkle Tree (<a href="https://blockonomi.com/wp-content/uploads/2018/06/merkle-tree.jpg">source</a>)</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-org39b8c76" class="outline-3">
<h3 id="org39b8c76"><span class="section-number-3">1.3.</span> Patricia tree</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Trie: a data structure that stores key-value pair in a key&rsquo;s prefix tree.</li>
<li>Patricia tree: compress trie by merging nodes on the same path.</li>
<li>The structure the Patricia tree is independent of the item insertion order.</li>
<li>The time complexity for add, query and deletion is \(O(K)\), where \(K\) is the key length.</li>
</ul>


<figure id="org0d76376">
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Patricia_trie.svg/525px-Patricia_trie.svg.png" alt="525px-Patricia_trie.svg.png" align="center" width="400px">

<figcaption><span class="figure-number">Figure 2: </span>Patricia Tree (<a href="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Patricia_trie.svg/525px-Patricia_trie.svg.png">source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org2c7d03c" class="outline-3">
<h3 id="org2c7d03c"><span class="section-number-3">1.4.</span> Merkle Patricia Tree (MPT)</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>MPT is a hex-ary Merkle tree with an additional DB for hash lookup.</li>
<li>There are 4 types of nodes:
<ul class="org-ul">
<li>Empty node: the null node the root points to when first creating the tree.</li>
<li>Leaf node: stores the real data, e.g., account balance.</li>
<li>Branch node: stores the pointers to at most 16 other nodes, e.g., they have the common prefix (nibbles) before and differ at the current <b><b>nibble</b></b> (4 bit,0-f).</li>
<li>Extension node: record the compressed common prefix for a branch node.</li>
</ul></li>
<li>Each <b><b>pointer</b></b> in the tree is the <b><b>hash value</b></b> of the child node; the real node data is stored in a separate DB that maps from a node hash to its data.</li>
<li>If the child node is small, the parent node could also directly store the node data rather than the hash pointer.</li>
<li>In practical implementation, the <b><b>entire tree</b></b> is typically stored in a KV DB, and each node is stored with its hash as the key.</li>
</ul>


<figure id="orgdf4672c">
<img src="https://github.com/zhangchiqing/merkle-patricia-trie/raw/master/diagrams/4_add_4th_tx_kv.png" alt="4_add_4th_tx_kv.png" align="center" width="400px">

<figcaption><span class="figure-number">Figure 3: </span>MPT DB storage (<a href="https://github.com/zhangchiqing/merkle-patricia-trie/raw/master/diagrams/4_add_4th_tx_kv.png">source</a>)</figcaption>
</figure>
</div>
<div id="outline-container-org8949d03" class="outline-4">
<h4 id="org8949d03"><span class="section-number-4">1.4.1.</span> Prefix byte</h4>
<div class="outline-text-4" id="text-1-4-1">
<ul class="org-ul">
<li>Identify both the node type and the parity of the stored nibbles.</li>
<li>Leaf node: 2 if the <code>key-end</code> has even number of nibbles, e.g., the compressed ending of an account; 3X if the number is odd (so the last 4-bit is stored as X in the prefix).</li>
<li>Extension: 0 if the <code>shared nibbles</code> has even number; 1X if has odd number.</li>
</ul>
</div>
</div>
<div id="outline-container-org71c158d" class="outline-4">
<h4 id="org71c158d"><span class="section-number-4">1.4.2.</span> Complexity for \(N\) items and key length \(K\)</h4>
<div class="outline-text-4" id="text-1-4-2">
<ul class="org-ul">
<li>Construction:
<ul class="org-ul">
<li>Time: worst \(O(NK)\); average: \(O(Nlog_{16}N)\).</li>
<li>Space: \(O(N)\).</li>
</ul></li>
<li>Indexing (e.g., query an account balance):
<ul class="org-ul">
<li>Time: tree traversal worst \(O(K)\), average \(O(log_{16}N)\); <b><b>each traversal equals a DB query</b></b>.</li>
</ul></li>
<li>PoI: \(O(16log_{16}N)\) time and space.
<ul class="org-ul">
<li>Calculating the hash of a branch node requires the hash of all 16 child nodes.</li>
</ul></li>
</ul>


<figure id="org43a3d49">
<img src="https://i.sstatic.net/YZGxe.png" alt="YZGxe.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 4: </span>Merkle Patricia Tree (<a href="https://i.sstatic.net/YZGxe.png">source</a>)</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-orgff111de" class="outline-3">
<h3 id="orgff111de"><span class="section-number-3">1.5.</span> Rollup state tree</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Rollup has a higher performance requirement for PoI.</li>
<li><b><b>Separate</b></b> the indexing and PoI with a sorted key-value arrays and a (binary) Merkle tree.
<ul class="org-ul">
<li>MPT: <code>{Addr0: State0, Addr1: State1,...}</code>.</li>
<li>Rollup: map: <code>{Addr0: Id0, Addr1: Id1,...}</code> + array: <code>[(Addr0, State0), (Addr1, State1),...]</code>.</li>
</ul></li>
<li>When a client wants to query an account, it first gets the key id from the map, then get the state from the array.</li>
<li>When a node wants to generate PoI, it follows the merkle path and collect hashes (more hashes than MPT).</li>
</ul>
</div>
</div>
<div id="outline-container-org4212dc0" class="outline-3">
<h3 id="org4212dc0"><span class="section-number-3">1.6.</span> PoI for Verkle tree (see <a href="https://chenyo-17.github.io/org-static-blog/2024-07-04-parallel-evm:-megaeth.html">MegaETH post</a> for details)</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>Stateless light nodes get a witness along with the new block, the witness is a PoI for the state change in the block.</li>
<li>Light nodes download related state information, e.g., changed account from other full nodes, or from the portal network.</li>
</ul>
</div>
</div>
<div id="outline-container-org091905e" class="outline-3">
<h3 id="org091905e"><span class="section-number-3">1.7.</span> Polynomial/KZG commitment</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>In MPT, PoI for a branch node requires the hash values of all branches.</li>
<li>KZG commitment reduce the proof size by adding a polynomial formula \(f(x)\) in the branch node, and each branch has a point \((x, y)\) such that \(y = f(x)\).</li>
<li>In this way, the proof no longer requires hashes of other branches, the proof space complexity \(O(log_{16}N)\) (no 16 coefficient).</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org3a1c55c" class="outline-2">
<h2 id="org3a1c55c"><span class="section-number-2">2.</span> Ethereum MPT data structure</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Essentially is a key-value mapping; it provides <code>Get</code>, <code>Put</code> and <code>Del</code> functions.</li>
<li>Ethereum has 3 MPTs: transaction trie; receipt trie and state trie, each trie root hash is included in the block header.
<ul class="org-ul">
<li><code>transactionTrie</code>: all transactions included in the block.
<ul class="org-ul">
<li>The keys are the RLP encodings of an unsigned integer starting from 0.</li>
<li>The values are the RLP encodings of the transaction.</li>
</ul></li>
<li><code>stateTrie</code>: all account states in the network.</li>
<li><code>receiptTrie</code>: the outcomes of all transaction executions in the block, e.g., gas used, transaction status.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org582f94f" class="outline-2">
<h2 id="org582f94f"><span class="section-number-2">3.</span> Ethereum MPT Functionality</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Allows to verify <b><b>data integrity</b></b> with the <code>Hash</code> function to compute the Merkle root hash.</li>
<li>Allows to verify the <b><b>inclusion</b></b> of a key-value pair without the access to the entire key-value pairs.
<ul class="org-ul">
<li>A full node provide a merkle proof <code>Proof</code> for a key-value pair (e.g., an account and its balance).</li>
<li>A light node can verify a proof only against the root hash with <code>VerifyProf(rootHash, key, proof)</code>; if the proof does not match the hash (e.g., the balance mismatches), an error is thrown.</li>
</ul></li>
<li>Why would a light node trust the root hash: it trusts the consensus mechanism, e.g., other benign full nodes verify the hash, act honestly is more profitable.</li>
</ul>
</div>
</div>
<div id="outline-container-org55349ab" class="outline-2">
<h2 id="org55349ab"><span class="section-number-2">4.</span> Proof of inclusion</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>Proof: the path from the root to the leaf node.</li>
<li>Verification: start from the root, decode the node to match the nibbles until find the node that matches all the remaining nibbles; if not found, the proof is invalid.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-trie.html">trie</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[trie]]></category>
  <link>https://chenyo.me/2024-07-28-ethereum-merkle-patricia-trie.html</link>
  <guid>https://chenyo.me/2024-07-28-ethereum-merkle-patricia-trie.html</guid>
  <pubDate>Sun, 28 Jul 2024 09:34:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[End of my first German course]]></title>
  <description><![CDATA[
<p>
It&rsquo;s been a while since I wanted to document my experience in my German course.
Now, having completed the first month, there couldn&rsquo;t be a better time to do so.
</p>

<p>
Initially, I approached the course with some dissatisfaction.
The pace felt too slow, and I was critical of my teacher&rsquo;s methods.
Boredom and impatience set in as I waited for others to catch up.
</p>

<p>
But then I began interacting with my classmates, and I had the chance to hear a different world.
</p>

<p>
One of the first people I met was a talkative Ukrainian woman.
When she is not satisfied with something, she interrupts and shouts.
She knows a lot about healthcare, and she told me this and that about refugee polices.
I admire her enviable energy.
</p>

<p>
When I first walked in the classroom, I noticed a young man who already spoke rapid German.
I asked him how he did it and he said since he started learning German four months ago, he only spoke German.
He is smart and also speaks English, Turkish and Afghanistan.
His experience reminds me a lot of the book &ldquo;The New Odyssey&rdquo;, and I am curious about more of his stories.
He is only 19 years old, I believe a bright future awaits him.
</p>


<figure id="orgbc634f9">
<img src="https://m.media-amazon.com/images/I/71oHotKSYQL._AC_UF1000,1000_QL80_.jpg" alt="71oHotKSYQL._AC_UF1000,1000_QL80_.jpg" align="center" width="300px">

<figcaption><span class="figure-number">Figure 1: </span>The New Odyssey</figcaption>
</figure>

<p>
The man sitting next to me has a political asylum visa.
He was a political journalist not welcomed by the government.
He said so he lived at the borderline for many years before he came here.
He is no longer young and it was his second time to take the same course.
He has a beautiful handwriting.
</p>

<p>
Another young man I know a bit comes from Latin America, he often dozes off in the class due to his Uber delivery job.
I also met a young lady from Turkey, she is so charming with a wonderful personality.
There are also two resilient mothers who undertake childcare with their studies.
</p>

<p>
In the last week I finally got to know my teacher a bit.
He told us he worked 220 hours a month at the moment so that he can pay his expense for he and his girlfriend, and he used to work even more.
He said he had different trainings in different countries, and now he finally got a new passport.
He shared with us different information that help foreigners maintain a basic life here.
</p>

<p>
In the end, I still think the course is too easy for me, who has spent twenty years staying in schools.
But I wish I had talked more with everyone about their lives.
So many people come here, and each finds their own way to stay and live.
Life is always hard but also incredible, and I wish I don&rsquo;t ever forget it.
</p>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-german.html">german</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[german]]></category>
  <link>https://chenyo.me/2024-07-27-finish-my-first-month-german-course.html</link>
  <guid>https://chenyo.me/2024-07-27-finish-my-first-month-german-course.html</guid>
  <pubDate>Sat, 27 Jul 2024 00:28:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: Reth scaling plan]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org8e35197">1. Blockchain fundamentals</a>
<ul>
<li><a href="#orgd310929">1.1. Ethereum engine API</a></li>
<li><a href="#org8307a2a">1.2. Foundry</a></li>
<li><a href="#orgc058c46">1.3. Revm</a></li>
<li><a href="#orgd66a76f">1.4. Alloy</a></li>
<li><a href="#orgbfce8ea">1.5. Erigon &amp; Staged sync</a></li>
<li><a href="#orgd7c05cf">1.6. Storage engines</a>
<ul>
<li><a href="#orgf0549b1">1.6.1. ACID</a></li>
<li><a href="#org1cf5db6">1.6.2. MVCC (Multi-version concurrency control)</a></li>
<li><a href="#org0f6d9ed">1.6.3. Common database models</a></li>
<li><a href="#org972eba8">1.6.4. Common storage engines</a></li>
</ul>
</li>
<li><a href="#org2a0963c">1.7. Reth</a></li>
<li><a href="#orga21c821">1.8. Why gas per second as the performance metric</a></li>
<li><a href="#org885708e">1.9. EVM cost models</a></li>
<li><a href="#org96ea706">1.10. TPC benchmark</a></li>
<li><a href="#orgdafae44">1.11. State growth</a></li>
<li><a href="#org6231cab">1.12. JIT (Just-In-Time) and AOT (Ahead-of-Time) EVM</a></li>
<li><a href="#orgcf6d779">1.13. Actor model</a></li>
<li><a href="#org736f068">1.14. Storage trie</a></li>
<li><a href="#org729a236">1.15. Serverless database</a></li>
</ul>
</li>
<li><a href="#orgc862d95">2. Reth scaling plan</a>
<ul>
<li><a href="#org4edbabf">2.1. Vertical scaling (2024)</a>
<ul>
<li><a href="#org9e0a6ff">2.1.1. JIT/AOT EVM</a></li>
<li><a href="#orga17c3a7">2.1.2. Parallel EVM</a></li>
<li><a href="#orgfeebff5">2.1.3. Optimized state commitment</a></li>
</ul>
</li>
<li><a href="#orge7e0e6e">2.2. Horizontal scaling (2025)</a>
<ul>
<li><a href="#org8ed1373">2.2.1. Multi-Rollup (?)</a></li>
<li><a href="#org4a02add">2.2.2. Cloud-Native nodes.</a></li>
</ul>
</li>
<li><a href="#orgf5a3281">2.3. Open questions</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://www.paradigm.xyz/2024/04/reth-perf">Reth-performance-blog</a> as well as some terminology explain online, e.g., <a href="https://github.com/paradigmxyz/reth">Reth-repo</a> and <a href="https://claude.ai/chat/6364436f-d279-4c6b-947e-237bfea26409">Claude.ai</a>.
</p>
<div id="outline-container-org8e35197" class="outline-2">
<h2 id="org8e35197"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgd310929" class="outline-3">
<h3 id="orgd310929"><span class="section-number-3">1.1.</span> <a href="https://github.com/ethereum/execution-apis/blob/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine/paris.md">Ethereum engine API</a></h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>A collection of JSON-RPC methods that all execution clients implement.</li>
<li>Specify the interfaces between consensus and execution layers.</li>
</ul>
</div>
</div>
<div id="outline-container-org8307a2a" class="outline-3">
<h3 id="org8307a2a"><span class="section-number-3">1.2.</span> <a href="https://github.com/foundry-rs/foundry/">Foundry</a></h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>A Rust-written toolkit for Ethereum application development.</li>
<li>Consists of an Ethereum testing framework Forge; a framework to interact with the chain Cast; a local Ethereum node Anvil; and a Solidity REPL (Read-Eval-Print-Loop: an interactive environment) Chisel.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc058c46" class="outline-3">
<h3 id="orgc058c46"><span class="section-number-3">1.3.</span> <a href="https://github.com/bluealloy/revm/">Revm</a></h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>A Rust-written EVM; responsible for executing transactions and contracts.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd66a76f" class="outline-3">
<h3 id="orgd66a76f"><span class="section-number-3">1.4.</span> <a href="https://github.com/alloy-rs">Alloy</a></h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>A library to interact with the Ethereum and other EVM-base chains.</li>
</ul>
</div>
</div>
<div id="outline-container-orgbfce8ea" class="outline-3">
<h3 id="orgbfce8ea"><span class="section-number-3">1.5.</span> <a href="https://erigon.tech/">Erigon</a> &amp; Staged sync</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Erigon: a Go-written Ethereum client implementation (execution layer).</li>
<li>Staged sync: break the chain synchronization process into distinct stages in order to achieve better efficiency.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd7c05cf" class="outline-3">
<h3 id="orgd7c05cf"><span class="section-number-3">1.6.</span> Storage engines</h3>
<div class="outline-text-3" id="text-1-6">
</div>
<div id="outline-container-orgf0549b1" class="outline-4">
<h4 id="orgf0549b1"><span class="section-number-4">1.6.1.</span> ACID</h4>
<div class="outline-text-4" id="text-1-6-1">
<ul class="org-ul">
<li>A set of properties for database transactions: atomicity, consistency, isolation, duration.</li>
<li>Atomicity: a transaction is treated as an indivisible unit; if any part of the transaction fails, the entire transaction is rolled back.</li>
<li>Consistency: a transaction brings the database from one valid state to another.</li>
<li>Isolation: concurrent transaction execution leave the database in the same state as if transactions are executed sequentially</li>
<li>Duration: a committed transaction remains committed even when the system fails.</li>
</ul>
</div>
</div>
<div id="outline-container-org1cf5db6" class="outline-4">
<h4 id="org1cf5db6"><span class="section-number-4">1.6.2.</span> MVCC (Multi-version concurrency control)</h4>
<div class="outline-text-4" id="text-1-6-2">
<ul class="org-ul">
<li>A concurrency control model used in DBMS.</li>
<li>MVCC keeps multiple version of data simultaneously, each transaction sees a snapshot of the database.</li>
</ul>
</div>
</div>
<div id="outline-container-org0f6d9ed" class="outline-4">
<h4 id="org0f6d9ed"><span class="section-number-4">1.6.3.</span> Common database models</h4>
<div class="outline-text-4" id="text-1-6-3">
<ul class="org-ul">
<li>Relational model, e.g., SQL.</li>
<li>Document model.</li>
<li>Network model.</li>
<li>key-value, e.g., NoSQL.</li>
</ul>
</div>
</div>
<div id="outline-container-org972eba8" class="outline-4">
<h4 id="org972eba8"><span class="section-number-4">1.6.4.</span> Common storage engines</h4>
<div class="outline-text-4" id="text-1-6-4">
<ul class="org-ul">
<li>MDBX: Ultra-fate key-value embedded database with ACID and MVCC supported.</li>
<li>LevelDB: Google-developed key-value store using log-structured merge-tree for high write throughput.</li>
<li>RocksDB: Meta&rsquo;s fork of LevelDB, optimized for fast storage.</li>
<li>LSM-based DBs, e.g., BadgerDB: optimized for write-heavy workloads with log-structured merge-tree.</li>
<li>BoltDB: Go-written key-value database with optimized B+ tree, ACID supported.</li>
<li>LMDB: memory-mapped key-value store with ACID and MVCC supported.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org2a0963c" class="outline-3">
<h3 id="org2a0963c"><span class="section-number-3">1.7.</span> Reth</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>A Rust implementation of an Ethereum full node; allows users to interact with the Ethereum blockchain.</li>
<li>An execution layer that implements all Ethereum engine APIs.</li>
<li>Modularity: every component is built as a library.</li>
<li>Performance: uses Erigon staged-sync node architecture and other Rust libraries (e.g., Alloy, revm); tests and optimizes on Foundry.</li>
<li>Database/Storage engine: MDBX.</li>
</ul>
</div>
</div>
<div id="outline-container-orga21c821" class="outline-3">
<h3 id="orga21c821"><span class="section-number-3">1.8.</span> Why gas per second as the performance metric</h3>
<div class="outline-text-3" id="text-1-8">
<ul class="org-ul">
<li>More nuanced than TPS.</li>
<li>Allows for a clear understanding for the capacity and efficiency.</li>
<li>Helps assessing the cost implications, e.g., DoS attacks.</li>
</ul>
</div>
</div>
<div id="outline-container-org885708e" class="outline-3">
<h3 id="org885708e"><span class="section-number-3">1.9.</span> EVM cost models</h3>
<div class="outline-text-3" id="text-1-9">
<ul class="org-ul">
<li>Determines the computational and storage costs for the execution.</li>
<li>Key aspects: gas, gas cost (for each operation), gas price (in Wei), gas limit.</li>
</ul>
</div>
</div>
<div id="outline-container-org96ea706" class="outline-3">
<h3 id="org96ea706"><span class="section-number-3">1.10.</span> TPC benchmark</h3>
<div class="outline-text-3" id="text-1-10">
<ul class="org-ul">
<li>Standardized performance tests for transaction processing and databases, e.g., how many transactions a system can process in a given period.</li>
<li>Offer benchmarks for different scenarios, e.g., TPC-C for online transaction processing.</li>
</ul>
</div>
</div>
<div id="outline-container-orgdafae44" class="outline-3">
<h3 id="orgdafae44"><span class="section-number-3">1.11.</span> State growth</h3>
<div class="outline-text-3" id="text-1-11">
<ul class="org-ul">
<li>State: the set of data for building and validating new Ethereum blocks.</li>
<li>State growth: the accumulation of new account and new contract storage.</li>
</ul>
</div>
</div>
<div id="outline-container-org6231cab" class="outline-3">
<h3 id="org6231cab"><span class="section-number-3">1.12.</span> JIT (Just-In-Time) and AOT (Ahead-of-Time) EVM</h3>
<div class="outline-text-3" id="text-1-12">
<ul class="org-ul">
<li>JIT: convert bytecode to native machine code just before execution to bypass the VM&rsquo;s interpretative process.</li>
<li>AOT: compile the highest demand contracts and store them on disk, to avoid untrusted bytecode absuing native-code compilation.</li>
</ul>
</div>
</div>
<div id="outline-container-orgcf6d779" class="outline-3">
<h3 id="orgcf6d779"><span class="section-number-3">1.13.</span> Actor model</h3>
<div class="outline-text-3" id="text-1-13">
<ul class="org-ul">
<li>A paradigm/framework for designing distributed systems.</li>
<li>Actor: each actor is an independent entity to receive, process and send messages; create new actors or modify its state.</li>
</ul>
</div>
</div>
<div id="outline-container-org736f068" class="outline-3">
<h3 id="org736f068"><span class="section-number-3">1.14.</span> Storage trie</h3>
<div class="outline-text-3" id="text-1-14">
<ul class="org-ul">
<li>Each contract account has its own storage trie, which is usually stored in a KV database.</li>
</ul>
</div>
</div>
<div id="outline-container-org729a236" class="outline-3">
<h3 id="org729a236"><span class="section-number-3">1.15.</span> Serverless database</h3>
<div class="outline-text-3" id="text-1-15">
<ul class="org-ul">
<li>Allow developers to focus on writing queries without managing database servers.</li>
<li>Automatically scales up or down base on the workload.</li>
<li>Pay-per-use pricing.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc862d95" class="outline-2">
<h2 id="orgc862d95"><span class="section-number-2">2.</span> Reth scaling plan</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Current status (April 2024): achieves 100-200 mg/s during live sync, including sender recovery, transaction execution and block trie calculation.</li>
<li>The scaling plan does not involve solving state growth.</li>
</ul>
</div>
<div id="outline-container-org4edbabf" class="outline-3">
<h3 id="org4edbabf"><span class="section-number-3">2.1.</span> Vertical scaling (2024)</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>Optimize how each system handle transactions and data.</li>
</ul>
</div>
<div id="outline-container-org9e0a6ff" class="outline-4">
<h4 id="org9e0a6ff"><span class="section-number-4">2.1.1.</span> JIT/AOT EVM</h4>
<div class="outline-text-4" id="text-2-1-1">
<ul class="org-ul">
<li>Reduce EVM interpreter overhead to speed up single-threaded transaction processing.</li>
<li>The processing costs \(\approx\) 50% EVM time</li>
<li>Released on <a href="https://www.paradigm.xyz/2024/06/revmc">June 2024</a>.</li>
</ul>


<figure id="orgfac8e4a">
<img src="https://www.paradigm.xyz/static/reth-perf/3.png" alt="3.png" align="center" width="500px">

<figcaption><span class="figure-number">Figure 1: </span>The JIT/AOT compiler (<a href="https://www.paradigm.xyz/static/reth-perf/3.png">source</a>)</figcaption>
</figure>
</div>
</div>
<div id="outline-container-orga17c3a7" class="outline-4">
<h4 id="orga17c3a7"><span class="section-number-4">2.1.2.</span> Parallel EVM</h4>
<div class="outline-text-4" id="text-2-1-2">
<ul class="org-ul">
<li>Utilize multiple cores during EVM execution.</li>
<li>&lt;80% of historical transactions have non-conflicting dependencies.</li>
<li>Historical sync: can calculate the best parallelization schedule offline; an early attempt is <a href="https://github.com/paradigmxyz/reth/tree/rkrasiuk/parallel">available</a>.</li>
<li>Live sync: combine serial and parallel execution based on static analysis, since Block STM has poor performance during heavy state contention periods; an early attempt is <a href="https://github.com/risechain/pevm">available</a>.</li>
</ul>
</div>
</div>
<div id="outline-container-orgfeebff5" class="outline-4">
<h4 id="orgfeebff5"><span class="section-number-4">2.1.3.</span> Optimized state commitment</h4>
<div class="outline-text-4" id="text-2-1-3">
<ul class="org-ul">
<li>Traditional EVM implementation <b><b>couples</b></b> the transaction execution and the state root computation: the state root is updated whenever a transaction updates a trie, since the state root computation has to be sequential from the updated node to the root, this is slow.</li>
<li>Reth <b><b>decouples</b></b> the process: raw state data is stored in KV databases, and each trie is <b><b>re-built</b></b> for each block from the databases in the end.
<ul class="org-ul">
<li>Pro: can use more efficient databases.</li>
<li>Con: need to re-calculate the entire trie, which costs &gt;75% of end-to-end block production time.</li>
</ul></li>
<li>Optimizations:
<ul class="org-ul">
<li>Now already re-calculate the storage trie for each updated contract in parallel.</li>
<li>Can also calculate the account trie when the storage tries are computed.</li>
<li>Pre-fetch cached trie nodes (cached by the state root computation) by tracking updated accounts and storage, e.g., a part of the trie may remain the same hash.</li>
</ul></li>
<li>Going beyond:
<ul class="org-ul">
<li>Only calculate the state root every \(T\) blocks.</li>
<li><b><b>Lag</b></b> the state root computation a few blocks behind to advance executions.</li>
<li>Use a cheaper encoder and hash function (Blake3).</li>
<li>Use wider branch nodes.</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orge7e0e6e" class="outline-3">
<h3 id="orge7e0e6e"><span class="section-number-3">2.2.</span> Horizontal scaling (2025)</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>Spread the workload across multiple systems.</li>
</ul>
</div>
<div id="outline-container-org8ed1373" class="outline-4">
<h4 id="org8ed1373"><span class="section-number-4">2.2.1.</span> Multi-Rollup (?)</h4>
<div class="outline-text-4" id="text-2-2-1">
<ul class="org-ul">
<li>Reduce operational overhead of running multiple rollups.</li>
</ul>
</div>
</div>
<div id="outline-container-org4a02add" class="outline-4">
<h4 id="org4a02add"><span class="section-number-4">2.2.2.</span> Cloud-Native nodes.</h4>
<div class="outline-text-4" id="text-2-2-2">
<ul class="org-ul">
<li>Deploy the heavy node (e.g., sequencer) as a service stack that can autoscale with compute demand and use cloud storage for persistence.</li>
<li>Similar to serverless database projects, e.g., NeonDB.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgf5a3281" class="outline-3">
<h3 id="orgf5a3281"><span class="section-number-3">2.3.</span> Open questions</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li>Second order effects of above changes, e.g., on light clients.</li>
<li>What is the best, average and worst case scenarios for each optimization.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-reth.html">reth</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[reth]]></category>
  <link>https://chenyo.me/2024-07-24-parallel-evm:-reth.html</link>
  <guid>https://chenyo.me/2024-07-24-parallel-evm:-reth.html</guid>
  <pubDate>Wed, 24 Jul 2024 15:54:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Modern SQL]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd056863">1. Terminology</a>
<ul>
<li><a href="#org6f3ce30">1.1. SQL and relational algebra</a></li>
<li><a href="#org15aee8a">1.2. SQL commands</a></li>
</ul>
</li>
<li><a href="#org4a8f52b">2. SQL syntax</a>
<ul>
<li><a href="#org41dad9a">2.1. Join</a></li>
<li><a href="#org5d2ef30">2.2. Aggregation function</a></li>
<li><a href="#orge7c812b">2.3. String operation</a></li>
<li><a href="#orgbd97136">2.4. Date and time</a></li>
<li><a href="#org1bb67b0">2.5. Output redirection</a></li>
<li><a href="#org454df2a">2.6. Output control</a></li>
<li><a href="#org1950e68">2.7. Nested queries</a></li>
<li><a href="#orgf3c4c80">2.8. Window functions</a></li>
<li><a href="#org7969147">2.9. Common Table Expressions (CTE)</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://15445.courses.cs.cmu.edu/fall2022/notes/02-modernsql.pdf">CMU 15-445 L2 notes</a>, along with some SQL command explained by <a href="https://claude.ai/chat/a2f07962-eb31-4f76-9a31-5e408722894b">Claude.ai</a>.
</p>
<div id="outline-container-orgd056863" class="outline-2">
<h2 id="orgd056863"><span class="section-number-2">1.</span> Terminology</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org6f3ce30" class="outline-3">
<h3 id="org6f3ce30"><span class="section-number-3">1.1.</span> SQL and relational algebra</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Relational algebra is based on sets (unordered, no duplicates); SQL is based on bags (unordered, allows duplicates).</li>
<li>SQL is a declarative query language; users use SQL to specify the desired result, each DBMS determines the most efficient strategy to produce the answer.</li>
</ul>
</div>
</div>
<div id="outline-container-org15aee8a" class="outline-3">
<h3 id="org15aee8a"><span class="section-number-3">1.2.</span> SQL commands</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Data manipulation language (DML): <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>.</li>
<li><p>
Data definition language (DDL): <code>CREATE</code>.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #51afef;">CREATE</span> TABLR student (
    sid <span style="color: #ECBE7B;">INT</span> <span style="color: #51afef;">PRIMARY</span> <span style="color: #51afef;">KEY</span>,
    <span style="color: #51afef;">name</span> <span style="color: #ECBE7B;">VARCHAR</span>(<span style="color: #da8548; font-weight: bold;">16</span>),
    login <span style="color: #ECBE7B;">VARCHAR</span>(<span style="color: #da8548; font-weight: bold;">32</span>) <span style="color: #51afef;">UNIQUE</span>,
    age <span style="color: #ECBE7B;">SMALLINT</span>,
    gpa <span style="color: #ECBE7B;">FLOAT</span>
);
</pre>
</div></li>
<li>Data control language (DCL): security, access control.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org4a8f52b" class="outline-2">
<h2 id="org4a8f52b"><span class="section-number-2">2.</span> SQL syntax</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org41dad9a" class="outline-3">
<h3 id="org41dad9a"><span class="section-number-3">2.1.</span> Join</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><p>
Combine columns from one or more tables and produces a new table.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">All students that get an A in 15-721</span>
<span style="color: #51afef;">SELECT</span> s.<span style="color: #51afef;">name</span>
    <span style="color: #51afef;">FROM</span> enrolled <span style="color: #51afef;">AS</span> e, student <span style="color: #51afef;">AS</span> s
<span style="color: #51afef;">WHERE</span> e.grade = <span style="color: #98be65;">'A'</span> <span style="color: #51afef;">AND</span> e.cid = <span style="color: #98be65;">'15-721'</span>
    <span style="color: #51afef;">AND</span> e.sid = s.sid
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org5d2ef30" class="outline-3">
<h3 id="org5d2ef30"><span class="section-number-3">2.2.</span> Aggregation function</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li><code>AVG(COL)</code>, <code>MIN(COL)</code>, <code>MAX(COL)</code>, <code>COUNT(COL)</code>.</li>
<li><p>
Take as input a bag of tuples and produce a single scalar value.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get number of students and their average GPA with a '@cs' login</span>
<span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">AVG</span>(gpa), <span style="color: #c678dd;">COUNT</span>(sid) <span style="color: #51afef;">FROM</span> student <span style="color: #51afef;">WHERE</span> login <span style="color: #51afef;">LIKE</span> <span style="color: #98be65;">'@cs'</span>;
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get the unique students</span>
<span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">COUNT</span>(<span style="color: #51afef;">DISTINCT</span> login) <span style="color: #51afef;">FROM</span> student <span style="color: #51afef;">WHERE</span> login <span style="color: #51afef;">LIKE</span> <span style="color: #98be65;">'@cs'</span>;
</pre>
</div></li>
<li><p>
Non-aggregated values in <code>SELECT</code> output must appear in <code>GROUP BY</code>.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get the average GPA in each course</span>
<span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">AVG</span>(s.gpa), e.cid
    <span style="color: #51afef;">FROM</span> enrolled <span style="color: #51afef;">AS</span> e, student <span style="color: #51afef;">AS</span> s
<span style="color: #51afef;">WHERE</span> e.sid = s.sid
<span style="color: #51afef;">GROUP</span> <span style="color: #51afef;">BY</span> e.cid;
</pre>
</div></li>
<li><p>
<code>HAVING</code>: filter output results based on aggregation computation.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">AVG</span>(s.gpa), e.cid
    <span style="color: #51afef;">FROM</span> enrolled <span style="color: #51afef;">AS</span> e, student <span style="color: #51afef;">AS</span> s
<span style="color: #51afef;">WHERE</span> e.sid = s.sid
<span style="color: #51afef;">GROUP</span> <span style="color: #51afef;">BY</span> e.cid
<span style="color: #51afef;">HAVING</span> <span style="color: #c678dd;">AVG</span>(s.gpa) &gt; <span style="color: #da8548; font-weight: bold;">3.9</span>;
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orge7c812b" class="outline-3">
<h3 id="orge7c812b"><span class="section-number-3">2.3.</span> String operation</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li>Strings are case sensitive and single-quotes only in the SQL standard.</li>
<li>Use <code>LIKE</code> for string pattern matching:
<ul class="org-ul">
<li><code>%</code> matches any sub-string,</li>
<li><code>_</code> matches any one character</li>
</ul></li>
<li>Standard string functions: <code>UPPER(S)</code>, <code>SUBSTRING(S, B, E)</code>.</li>
<li><code>||</code>: string concatenation.</li>
</ul>
</div>
</div>
<div id="outline-container-orgbd97136" class="outline-3">
<h3 id="orgbd97136"><span class="section-number-3">2.4.</span> Date and time</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>Attributes: <code>DATE</code>, <code>TIME</code>.</li>
<li>Different DBMS have different date/time operations.</li>
</ul>
</div>
</div>
<div id="outline-container-org1bb67b0" class="outline-3">
<h3 id="org1bb67b0"><span class="section-number-3">2.5.</span> Output redirection</h3>
<div class="outline-text-3" id="text-2-5">
<ul class="org-ul">
<li><p>
One can store the results into another table
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">output to a non-existing table</span>
<span style="color: #51afef;">SELECT</span> <span style="color: #51afef;">DISTINCT</span> cis <span style="color: #51afef;">INTO</span> CourseIds <span style="color: #51afef;">FROM</span> enrolled;
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">output to an existing table with the same number of columns and column type</span>
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">but the names do not matter</span>
<span style="color: #51afef;">INSERT</span> <span style="color: #51afef;">INTO</span> CourseIds (<span style="color: #51afef;">SELECT</span> <span style="color: #51afef;">DISTINCT</span> cid <span style="color: #51afef;">FROM</span> enrolled);
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org454df2a" class="outline-3">
<h3 id="org454df2a"><span class="section-number-3">2.6.</span> Output control</h3>
<div class="outline-text-3" id="text-2-6">
<ul class="org-ul">
<li>Use <code>ORDER</code>, <code>ASC</code> and <code>DESC</code> to sort the output tuples; otherwise the output could have different order every time.</li>
<li><p>
Use <code>LIMIT</code>, <code>OFFSET</code> to restrict the output number.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #51afef;">SELECT</span> sid <span style="color: #51afef;">FROM</span> enrolled <span style="color: #51afef;">WHERE</span> cid = <span style="color: #98be65;">'15-721'</span>
<span style="color: #51afef;">ORDER</span> <span style="color: #51afef;">BY</span> <span style="color: #c678dd;">UPPER</span>(grade) <span style="color: #51afef;">DESC</span>, sid + <span style="color: #da8548; font-weight: bold;">1</span> <span style="color: #51afef;">ASC</span>;
    <span style="color: #51afef;">LIMIT</span> <span style="color: #da8548; font-weight: bold;">10</span> OFFSET <span style="color: #da8548; font-weight: bold;">10</span>;  <span style="color: #5B6268;">-- </span><span style="color: #5B6268;">output 10 tuples, starting from the 11th tuple</span>
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org1950e68" class="outline-3">
<h3 id="org1950e68"><span class="section-number-3">2.7.</span> Nested queries</h3>
<div class="outline-text-3" id="text-2-7">
<ul class="org-ul">
<li>Nested queries are often difficult to optimize.</li>
<li>The inner query can access attributes defined in the outer query.</li>
<li><p>
Inner queries can appear anywhere.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Output a column 'one' with 1s, the number of 1s</span>
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">equals to the number of rows in 'student'</span>
<span style="color: #51afef;">SELECT</span> (<span style="color: #51afef;">SELECT</span> <span style="color: #da8548; font-weight: bold;">1</span>) <span style="color: #51afef;">AS</span> one <span style="color: #51afef;">FROM</span> student;

<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get the names of students that are enrolled in '15-445'</span>
<span style="color: #51afef;">SELECT</span> <span style="color: #51afef;">name</span> <span style="color: #51afef;">FROM</span> students
    <span style="color: #51afef;">WHERE</span> sid <span style="color: #51afef;">IN</span> (
        <span style="color: #51afef;">SELECT</span> sid <span style="color: #51afef;">FROM</span> enrolled
        <span style="color: #51afef;">WHERE</span> cid = <span style="color: #98be65;">'15-445'</span>
);

<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get student record with the highest id</span>
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">that is enrolled in at least one course.</span>
<span style="color: #51afef;">SELECT</span> student.sid, <span style="color: #51afef;">name</span>
    <span style="color: #51afef;">FROM</span> student
    <span style="color: #5B6268;">-- </span><span style="color: #5B6268;">the intermediate output is aliases as max_e</span>
    <span style="color: #51afef;">JOIN</span> (<span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">MAX</span>(sid) <span style="color: #51afef;">AS</span> sid <span style="color: #51afef;">FROM</span> enrolled) <span style="color: #51afef;">AS</span> max_e
    <span style="color: #5B6268;">-- </span><span style="color: #5B6268;">only select student who has the max_e</span>
    <span style="color: #51afef;">ON</span> student.sid = max_e.sid;

<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">the above is same as below, but `join` syntax is more preferred</span>
<span style="color: #51afef;">SELECT</span> student.sid, <span style="color: #51afef;">name</span>
<span style="color: #51afef;">FROM</span> student <span style="color: #51afef;">AS</span> s, (<span style="color: #51afef;">SELECT</span> <span style="color: #c678dd;">MAX</span>(sid) <span style="color: #51afef;">AS</span> sid <span style="color: #51afef;">FROM</span> enrolled) <span style="color: #51afef;">AS</span> max_e
<span style="color: #51afef;">WHERE</span> s.sid = max_e.sid;
</pre>
</div></li>

<li>Nested query results expression:
<ul class="org-ul">
<li><code>ALL</code>: must satisfy expression for all <b><b>rows</b></b> in sub-query.</li>
<li><code>ANY</code>, <code>IN</code>: must satisfy expression for at least one row in sub-query.</li>
<li><p>
<code>EXISTS</code>: at least one row is returned.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get all courses with no students enrolled in</span>
<span style="color: #51afef;">SELECT</span> * <span style="color: #51afef;">FROM</span> course
    <span style="color: #51afef;">WHERE</span> <span style="color: #51afef;">NOT</span> <span style="color: #51afef;">EXISTS</span>(
        <span style="color: #51afef;">SELECT</span> * <span style="color: #51afef;">FROM</span> enrolled
            <span style="color: #51afef;">WHERE</span> course.cid = enrolled.cid
)

<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">Get students whose gpa is larget than the highest score in '15-712'</span>
<span style="color: #5B6268;">-- </span><span style="color: #5B6268;">and the login has a level &gt; 3</span>
<span style="color: #51afef;">SELECT</span> student.sid, <span style="color: #51afef;">name</span>
    <span style="color: #51afef;">FROM</span> student <span style="color: #51afef;">AS</span> S
<span style="color: #51afef;">WHERE</span> s.gpa &gt; <span style="color: #51afef;">ALL</span> (
    <span style="color: #51afef;">SELECT</span> course.score <span style="color: #51afef;">FROM</span> course
        <span style="color: #51afef;">WHERE</span> course.cid = <span style="color: #98be65;">'15-712'</span>
)
<span style="color: #51afef;">AND</span> student.login <span style="color: #51afef;">IN</span> (
    <span style="color: #51afef;">SELECT</span> login <span style="color: #51afef;">FROM</span> enrolled
    <span style="color: #51afef;">WHERE</span> <span style="color: #51afef;">level</span> &gt; <span style="color: #da8548; font-weight: bold;">3</span>
);
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgf3c4c80" class="outline-3">
<h3 id="orgf3c4c80"><span class="section-number-3">2.8.</span> Window functions</h3>
<div class="outline-text-3" id="text-2-8">
<ul class="org-ul">
<li>Perform sliding calculation across a set of tuples.</li>
</ul>
</div>
</div>
<div id="outline-container-org7969147" class="outline-3">
<h3 id="org7969147"><span class="section-number-3">2.9.</span> Common Table Expressions (CTE)</h3>
<div class="outline-text-3" id="text-2-9">
<ul class="org-ul">
<li>An alternative to windows or nested queries when writing more complex queries.</li>
<li><p>
CTEs use <code>WITH</code> to bind the output of an inner query to a temporary table.
</p>
<div class="org-src-container">
<pre class="src src-sql"><span style="color: #51afef;">WITH</span> cteName (col1, col2) <span style="color: #51afef;">AS</span> (
    <span style="color: #51afef;">SELECT</span> <span style="color: #da8548; font-weight: bold;">1</span>, <span style="color: #da8548; font-weight: bold;">2</span>
)
<span style="color: #51afef;">SELECT</span> col1 + col2 <span style="color: #51afef;">FROM</span> cteName;
</pre>
</div></li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-07-23-db-notes:-modern-sql.html</link>
  <guid>https://chenyo.me/2024-07-23-db-notes:-modern-sql.html</guid>
  <pubDate>Tue, 23 Jul 2024 13:05:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[CMU 15-445 notes: Relational Model & Algebra]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga6c0bcb">1. Terminology</a>
<ul>
<li><a href="#org0be0704">1.1. Database</a></li>
<li><a href="#org741bffb">1.2. Database design consideration</a></li>
<li><a href="#orgb521aa5">1.3. Database management system (DBMS)</a></li>
<li><a href="#org511a521">1.4. Data model</a></li>
<li><a href="#orgb637d47">1.5. Schema</a></li>
<li><a href="#orgbd43fd2">1.6. Entities and Tables</a></li>
<li><a href="#org77ba9cc">1.7. Attributes and Fields</a></li>
<li><a href="#org2b44df9">1.8. Logical layer</a></li>
<li><a href="#org3935188">1.9. Physical layer</a></li>
<li><a href="#orgde0d029">1.10. Data manipulation languages (DMLs)</a></li>
<li><a href="#org192d223">1.11. SQL (Structured Query Language) and relational model</a></li>
</ul>
</li>
<li><a href="#org3d7854a">2. Relational model</a>
<ul>
<li><a href="#org4206e1f">2.1. A relation</a></li>
<li><a href="#org1e39a79">2.2. A domain</a></li>
<li><a href="#org0351d4c">2.3. A tuple</a></li>
<li><a href="#org198e851">2.4. Keys</a></li>
</ul>
</li>
<li><a href="#org39775ff">3. Relational Algebra</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://www.youtube.com/watch?v=uikbtpVZS2s&amp;list=PLSE8ODhjZXjaKScG3l0nuOiDTTqpfnWFf&amp;index=2">CMU 15-445 L1 video</a> and <a href="https://15445.courses.cs.cmu.edu/fall2022/notes/01-introduction.pdf">CMU 15-445 L1 notes</a>, along with some terminology explained by <a href="https://claude.ai/chat/14f3c4ec-0ca8-495e-ac70-dd13f9eab5ea">Claude.ai</a>.
</p>
<div id="outline-container-orga6c0bcb" class="outline-2">
<h2 id="orga6c0bcb"><span class="section-number-2">1.</span> Terminology</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org0be0704" class="outline-3">
<h3 id="org0be0704"><span class="section-number-3">1.1.</span> Database</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>An organized collection of inter-related data that models some aspect of the real-world.</li>
</ul>
</div>
</div>
<div id="outline-container-org741bffb" class="outline-3">
<h3 id="org741bffb"><span class="section-number-3">1.2.</span> Database design consideration</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Data integrity: protect invalid writing.</li>
<li>Implementation: query complexity, concurrent query.</li>
<li>Durability: replication, fault tolerance.</li>
</ul>
</div>
</div>
<div id="outline-container-orgb521aa5" class="outline-3">
<h3 id="orgb521aa5"><span class="section-number-3">1.3.</span> Database management system (DBMS)</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>A software that manages a database.</li>
<li>Allow the definition, creation, query, update and administration of databases.</li>
</ul>
</div>
</div>
<div id="outline-container-org511a521" class="outline-3">
<h3 id="org511a521"><span class="section-number-3">1.4.</span> Data model</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>A conceptual, high-level representation of how data is structured</li>
<li>Defines entities, attributes, relationships between entities and constraints.</li>
</ul>
</div>
</div>
<div id="outline-container-orgb637d47" class="outline-3">
<h3 id="orgb637d47"><span class="section-number-3">1.5.</span> Schema</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>A concrete implementation of a data model.</li>
<li>Defines tables, fields, data types, keys and rules.</li>
<li>Typically represented by a specific database language.</li>
</ul>
</div>
</div>
<div id="outline-container-orgbd43fd2" class="outline-3">
<h3 id="orgbd43fd2"><span class="section-number-3">1.6.</span> Entities and Tables</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>Entities: conceptual representations of objects in the logical data model.</li>
<li>Tables: physical storage structures in the physical data model.</li>
</ul>
</div>
</div>
<div id="outline-container-org77ba9cc" class="outline-3">
<h3 id="org77ba9cc"><span class="section-number-3">1.7.</span> Attributes and Fields</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>Attributes: properties of an entity.</li>
<li>Fields: columns in a database table.</li>
</ul>
</div>
</div>
<div id="outline-container-org2b44df9" class="outline-3">
<h3 id="org2b44df9"><span class="section-number-3">1.8.</span> Logical layer</h3>
<div class="outline-text-3" id="text-1-8">
<ul class="org-ul">
<li>The entities and attributes the database has.</li>
</ul>
</div>
</div>
<div id="outline-container-org3935188" class="outline-3">
<h3 id="org3935188"><span class="section-number-3">1.9.</span> Physical layer</h3>
<div class="outline-text-3" id="text-1-9">
<ul class="org-ul">
<li>How are entities and attributes stored in the database.</li>
</ul>
</div>
</div>
<div id="outline-container-orgde0d029" class="outline-3">
<h3 id="orgde0d029"><span class="section-number-3">1.10.</span> Data manipulation languages (DMLs)</h3>
<div class="outline-text-3" id="text-1-10">
<ul class="org-ul">
<li>Methods to store and retrieve information from a database.</li>
<li>Procedural: the query specifies the (high-level) strategy the DBMS should use to get the results, e.g., with relational algebra.</li>
<li>Declarative: the query specifies only what data is desired but not how to get it, e.g., with relational calculus (a formal language).</li>
</ul>
</div>
</div>
<div id="outline-container-org192d223" class="outline-3">
<h3 id="org192d223"><span class="section-number-3">1.11.</span> SQL (Structured Query Language) and relational model</h3>
<div class="outline-text-3" id="text-1-11">
<ul class="org-ul">
<li>SQL <b><b>implements</b></b> the relational model in DBMS and provides a standard way to create, manipulate and query relational databases.</li>
<li>Different SQL implementation may vary and do not strictly adhere to the relational model, e.g., allow duplicate rows.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org3d7854a" class="outline-2">
<h2 id="org3d7854a"><span class="section-number-2">2.</span> Relational model</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>A <b><b>data model</b></b> that defines a database <b><b>abstraction</b></b> to avoid maintenance overhead when changing the physical layer.</li>
<li>Data is stored as relations/tables.</li>
<li>Physical layer implementation and execution strategy depends on DBMS implementation.</li>
</ul>


<figure id="orgeee23ac">
<img src="https://www.guru99.com/images/1/091318_0803_RelationalD1.png" alt="091318_0803_RelationalD1.png" align="center" width="500px">

<figcaption><span class="figure-number">Figure 1: </span>Relational model concepts (<a href="https://www.guru99.com/images/1/091318_0803_RelationalD1.png">Source</a>)</figcaption>
</figure>
</div>
<div id="outline-container-org4206e1f" class="outline-3">
<h3 id="org4206e1f"><span class="section-number-3">2.1.</span> A relation</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>An unordered set that contains the relationship of attributes that represent entities.</li>
<li>Relationships are unordered in the relation.</li>
</ul>
</div>
</div>
<div id="outline-container-org1e39a79" class="outline-3">
<h3 id="org1e39a79"><span class="section-number-3">2.2.</span> A domain</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>A named set of allowable values for a specific attribute.</li>
</ul>
</div>
</div>
<div id="outline-container-org0351d4c" class="outline-3">
<h3 id="org0351d4c"><span class="section-number-3">2.3.</span> A tuple</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li>A set of attribute values in the relation.</li>
<li>Values can also be lists or nested data structures.</li>
<li><code>Null</code>: a special value in any attribute which means the attribute in a tuple is undefined.</li>
<li>\(n-ary\): a relation with \(n\) attributes.</li>
</ul>
</div>
</div>
<div id="outline-container-org198e851" class="outline-3">
<h3 id="org198e851"><span class="section-number-3">2.4.</span> Keys</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li>Primary key: uniquely identifies a single tuple.</li>
<li>Foreign key: specifies that an attribute (e.g., <code>CustomerID</code>) in one relation (e.g., <code>OrderTable</code>) has to map to a tuple (e.g., the tuple with the same <code>CustomerID</code>) in another relation (e.g., <code>CustomerTable</code>).</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org39775ff" class="outline-2">
<h2 id="org39775ff"><span class="section-number-2">3.</span> Relational Algebra</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>A set of fundamental operations to retrieve and manipulate tuples in a relation.</li>
<li>Each operator takes in one or more relations as inputs, and outputs a new relation; operators can be chained.</li>
<li>Is a <b><b>procedure language</b></b>, meaning the execution always follow the query, even there exists more efficient way to get the same result; A better way is to be more declarative, e.g., SQL&rsquo;s <code>where</code> syntax.</li>
<li><a href="https://i.sstatic.net/AHjRg.png">Common relational algebra</a>.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-database.html">database</a> <a href="https://chenyo.me/tag-cmu.html">cmu</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[database]]></category>
  <category><![CDATA[cmu]]></category>
  <link>https://chenyo.me/2024-07-17-db-notes:-relational-model.html</link>
  <guid>https://chenyo.me/2024-07-17-db-notes:-relational-model.html</guid>
  <pubDate>Wed, 17 Jul 2024 17:05:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: BEP-130]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgd3f57aa">1. Blockchain fundamentals</a>
<ul>
<li><a href="#org21b22c5">1.1. System contract</a></li>
<li><a href="#org8391b1b">1.2. Transaction execution phases</a></li>
</ul>
</li>
<li><a href="#orgcc3219d">2. Design principle</a></li>
<li><a href="#orgd84fbc0">3. Workflow</a>
<ul>
<li><a href="#orgb4eb357">3.1. Dispatch factors</a></li>
<li><a href="#orgf62ed6b">3.2. Slot execution stages</a></li>
<li><a href="#org5559d50">3.3. Conflict detection</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://github.com/bnb-chain/BEPs/blob/master/BEPs/BEP130.md">BEP-130</a>.
BEP-130 is a proposal that introduces a parallel transaction execution mechanism on the BNB Smart Chain (BSC).
</p>
<div id="outline-container-orgd3f57aa" class="outline-2">
<h2 id="orgd3f57aa"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org21b22c5" class="outline-3">
<h3 id="org21b22c5"><span class="section-number-3">1.1.</span> System contract</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Built-in contracts to perform system level operations, e,g., gas fee reward, cross chain communication.</li>
<li>Cannot be executed concurrently since they depend on the execution results of other transactions, e.g., a number of transaction made by an account at some timestamp.</li>
</ul>
</div>
</div>
<div id="outline-container-org8391b1b" class="outline-3">
<h3 id="org8391b1b"><span class="section-number-3">1.2.</span> Transaction execution phases</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Block mining phase: received from the P2P transaction pool, could contain invalid transactions.</li>
<li>Block sync phase: the block is confirmed.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgcc3219d" class="outline-2">
<h2 id="orgcc3219d"><span class="section-number-2">2.</span> Design principle</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Should always produce the same result as the current sequential execution.</li>
<li>Should be decoupled into existing or new modules with no circular dependency.</li>
<li>Should be configurable based on node hardware resources.</li>
<li>Keep it simple and smart.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd84fbc0" class="outline-2">
<h2 id="orgd84fbc0"><span class="section-number-2">3.</span> Workflow</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-orgb4eb357" class="outline-3">
<h3 id="orgb4eb357"><span class="section-number-3">3.1.</span> Dispatch factors</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Is the slot idle or occupied?</li>
<li>Is there a same address contract running or pending in this slot?</li>
<li>Has the slot&rsquo;s pending transactions size reached the max transactions queue size limitation?</li>
<li>Is there a big transaction index gap between the slot&rsquo;s head transaction and the dispatched transaction?</li>
<li>Is the transaction contract likely to have high gas cost or a conflict rate?</li>
</ul>
</div>
</div>
<div id="outline-container-orgf62ed6b" class="outline-3">
<h3 id="orgf62ed6b"><span class="section-number-3">3.2.</span> Slot execution stages</h3>
<div class="outline-text-3" id="text-3-2">
<ol class="org-ol">
<li>Execute the transaction \(Tx_i\)based on a specific worldstate, e.g., the state when the execution starts.</li>
<li>Wait for the finalization of the previous transaction \(Tx_{i-1}\).</li>
<li>Detect if there is any conflict between the state read by \(Tx_i\) and the state change after the execution of \(Tx_i\) starts.</li>
<li>If a conflict is detected, re-execute \(Tx_{i}\) again based on the latest finalized worldstate.</li>
<li>Finalize the state changed by \(Tx_i\) to the latest worldstate.</li>
<li>The state changes are kept within each slot, and are merged to the main StateDB once the execution is done.</li>
<li>The first transaction in a block can be immediately finalized.</li>
<li>If \(Tx_i\) and \(Tx_{i-1}\) are in the same slot, \(Tx_i\) can immediately start conflict detection.</li>
<li>Re-executed transaction can be immediately finalized as it reads the latest worldstate.</li>
</ol>
</div>
</div>
<div id="outline-container-org5559d50" class="outline-3">
<h3 id="org5559d50"><span class="section-number-3">3.3.</span> Conflict detection</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>Detection items: storage key/value pair; account balance; contract content and status.</li>
<li>Overlap reads without write, or hardcode writes without read are not conflicts.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-bnb.html">bnb</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[bnb]]></category>
  <link>https://chenyo.me/2024-07-14-parallel-evm:-bep-130.html</link>
  <guid>https://chenyo.me/2024-07-14-parallel-evm:-bep-130.html</guid>
  <pubDate>Sun, 14 Jul 2024 12:38:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: BNB chain]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org692002e">1. Blockchain fundamentals</a>
<ul>
<li><a href="#orgc01c7f3">1.1. Why is parallel EVM not easy</a></li>
<li><a href="#org5852a59">1.2. A Parallel EVM ideas</a></li>
<li><a href="#orgae14d67">1.3. Block STM algorithm</a></li>
</ul>
</li>
<li><a href="#org469835a">2. BNB Parallel EVM 1.0: Infrastructure</a></li>
<li><a href="#org85edded">3. BNB Parallel EVM 2.0: Performance enhancement</a></li>
<li><a href="#org25d0edc">4. BNB Parallel EVM 3.0: Production</a>
<ul>
<li><a href="#orgdb0a8db">4.1. Hint-based dispatcher</a></li>
<li><a href="#org7f1d3ce">4.2. Seamless BNB chain ecosystem integration</a></li>
</ul>
</li>
<li><a href="#org552bf83">5. Comparison with other solutions</a></li>
<li><a href="#orgdb8a7d8">6. Other optimizations</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://www.bnbchain.org/zh-CN/blog/road-to-high-performance-parallel-evm-for-bnb-chain">BNB chain-blog</a>.
</p>
<div id="outline-container-org692002e" class="outline-2">
<h2 id="org692002e"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgc01c7f3" class="outline-3">
<h3 id="orgc01c7f3"><span class="section-number-3">1.1.</span> Why is parallel EVM not easy</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Lack of visibility of potential transaction conflict.</li>
<li>Blockchains experience transaction bursts, e.g., &gt;70M transactions per day.</li>
</ul>
</div>
</div>
<div id="outline-container-org5852a59" class="outline-3">
<h3 id="org5852a59"><span class="section-number-3">1.2.</span> A Parallel EVM ideas</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Run multiple EVM instances concurrently on different threads.</li>
<li>Execute transactions independently on each thread and later merge a finial state update.</li>
<li><a href="https://lh7-us.googleusercontent.com/Dh1GAMYlMkiRI0xWQ0ByYOxq_GNtA9h1PP1OF7FP9b8O3VRxVtlh1eq991OlNa4rNX_ZXH8tVPRBeN58_0dBF1jPUVRuuJMl4JqmBchhCTZp_vF-W003l77KajIjIMCHfapjsBH--0EpMi0FT2iNPlw">Parallel EVM scheme</a></li>
</ul>
</div>
</div>
<div id="outline-container-orgae14d67" class="outline-3">
<h3 id="orgae14d67"><span class="section-number-3">1.3.</span> Block STM algorithm</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Optimistic parallelism: assigns transactions to various threads.</li>
<li>Software transaction memory (STM): detect conflicts when transactions try to modify the same shared state simultaneously.</li>
<li>Conflict resolution: when conflicts are detected, the offending transactions are discarded without affecting the blockchain state and are re-executed.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org469835a" class="outline-2">
<h2 id="org469835a"><span class="section-number-2">2.</span> BNB Parallel EVM 1.0: Infrastructure</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Proposal: <a href="https://github.com/bnb-chain/BEPs/pull/130?ref=bnbchain.ghost.io">BEP-130 (2022)</a></li>
<li>Dispatcher: distributes transactions across threads to optimize throughput.</li>
<li>Parallel execution engine: execute transactions independently on each thread.</li>
<li>Local stateDB: each thread maintains a local stateDB to record state access.</li>
<li>Conflict detection: detect conflicts and re-execute conflicting transactions.</li>
<li>State commit: the finalized results are committed to the global state DB.</li>
</ul>
</div>
</div>
<div id="outline-container-org85edded" class="outline-2">
<h2 id="org85edded"><span class="section-number-2">3.</span> BNB Parallel EVM 2.0: Performance enhancement</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Dispatcher: combine both static and dynamic dispatch strategies.</li>
<li>Execution engine: streaming pipeline to enable smooth transaction processing.</li>
<li>Conflict detection: ensure data integrity while minimizing unnecessary re-execution.</li>
<li>Memory: shared memory pools and light copying techniques to reduce memory footprint.</li>
<li>The overall performance ranges from 20% to 50%.</li>
</ul>
</div>
</div>
<div id="outline-container-org25d0edc" class="outline-2">
<h2 id="org25d0edc"><span class="section-number-2">4.</span> BNB Parallel EVM 3.0: Production</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-orgdb0a8db" class="outline-3">
<h3 id="orgdb0a8db"><span class="section-number-3">4.1.</span> Hint-based dispatcher</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li>leverages external hint providers to analyze transactions and generate predictions about potential state access conflicts.</li>
<li>Simple hints include read/write state sets; advanced hints incorporate weak/strong ordering for optimal parallelism.</li>
<li>Conflicting transactions are assigned to the same slot.</li>
<li>Transactions with no conflicts are distributed across different slots.</li>
<li>Conflict detector remains as a backup for handling unforeseen conflicts.</li>
</ul>
</div>
</div>
<div id="outline-container-org7f1d3ce" class="outline-3">
<h3 id="org7f1d3ce"><span class="section-number-3">4.2.</span> Seamless BNB chain ecosystem integration</h3>
<div class="outline-text-3" id="text-4-2">
<ul class="org-ul">
<li>Modularization and reconstructing.</li>
<li>Thorough testing and validation.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org552bf83" class="outline-2">
<h2 id="org552bf83"><span class="section-number-2">5.</span> Comparison with other solutions</h2>
<div class="outline-text-2" id="text-5">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Solutions</th>
<th scope="col" class="org-left">TX dependency check</th>
<th scope="col" class="org-left">Conflict resolution</th>
<th scope="col" class="org-left">StateDB optimization</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">BlockSTM</td>
<td class="org-left">tracks at execution</td>
<td class="org-left">re-execution</td>
<td class="org-left">N/A</td>
</tr>

<tr>
<td class="org-left">Polygon</td>
<td class="org-left">minimal metadata solution</td>
<td class="org-left">reduced re-execution</td>
<td class="org-left">N/A</td>
</tr>

<tr>
<td class="org-left">Monad</td>
<td class="org-left">static analysis</td>
<td class="org-left">reduced re-execution</td>
<td class="org-left">Monad DB</td>
</tr>

<tr>
<td class="org-left">Sei</td>
<td class="org-left">tracks at execution</td>
<td class="org-left">re-execution</td>
<td class="org-left">SeiDB</td>
</tr>

<tr>
<td class="org-left">Neon EVM and Solana Sealevel</td>
<td class="org-left">contract provided</td>
<td class="org-left">reduced re-execution</td>
<td class="org-left">depends on Solana</td>
</tr>

<tr>
<td class="org-left">BNBChain</td>
<td class="org-left">hint info</td>
<td class="org-left">reduced or eliminated re-execution</td>
<td class="org-left">Thread local DB</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgdb8a7d8" class="outline-2">
<h2 id="orgdb8a7d8"><span class="section-number-2">6.</span> Other optimizations</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Opcode-level optimization: fine-tuning individual EVM instructions for maximum efficiency.</li>
<li>Compilation optimization: JIT/AOT compilation paradigms; instruction-level parallelism (SIMD).</li>
<li>Database sharding: distribute data across multiple databases.</li>
<li>Concurrent node execution.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-bnb.html">bnb</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[bnb]]></category>
  <link>https://chenyo.me/2024-07-07-parallel-evm:-bnb-chain.html</link>
  <guid>https://chenyo.me/2024-07-07-parallel-evm:-bnb-chain.html</guid>
  <pubDate>Sun, 07 Jul 2024 22:19:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: MegaETH]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5c3e8ab">1. Blockchain fundamentals</a>
<ul>
<li><a href="#orga0d52bb">1.1. Conduit chain</a></li>
<li><a href="#orge387075">1.2. Gas per second</a></li>
<li><a href="#orgebc2be6">1.3. Target gas per block</a></li>
<li><a href="#orge4eafd0">1.4. Current blockchain scalability</a></li>
<li><a href="#orged90e86">1.5. Blockchain node hardware requirements</a></li>
<li><a href="#org518fd18">1.6. L1 and L2 nodes</a></li>
<li><a href="#orgc5407bd">1.7. Verifying a block</a></li>
<li><a href="#orgd5db719">1.8. Maximum extractable value (MEV)</a></li>
<li><a href="#orgb86c515">1.9. Proposer-builder separation (PBS)</a></li>
<li><a href="#org70b52e9">1.10. Live and historical sync</a></li>
<li><a href="#org0eba903">1.11. Portal Network</a></li>
<li><a href="#org6ac304b">1.12. Verkle tree</a></li>
<li><a href="#orgbdeeb13">1.13. Node storage</a>
<ul>
<li><a href="#orgd969047">1.13.1. History expiry</a></li>
<li><a href="#org3df501a">1.13.2. State expiry</a></li>
<li><a href="#org59ddae4">1.13.3. Statelessness</a></li>
</ul>
</li>
<li><a href="#org63563d5">1.14. Software transactional memory (STM)</a></li>
<li><a href="#org9d1e30b">1.15. Block-STM</a></li>
</ul>
</li>
<li><a href="#org3f1b395">2. What is MagaETH</a>
<ul>
<li><a href="#org38b4ee1">2.1. Node specialization</a></li>
<li><a href="#orgfe0cee6">2.2. Design philosophy</a></li>
</ul>
</li>
<li><a href="#org2690d16">3. MegaETH challenges</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://megaeth.systems/research">MegaETH-blog</a> as well as some terminology explained online, e.g.,  <a href="https://ethereum.org/en/roadmap/">ethereum.org</a>.
</p>

<p>
In summary, this blog proposes many challenges when designing a high-performance EVM chain, but does not include any design details of MegaETH itself.
</p>
<div id="outline-container-org5c3e8ab" class="outline-2">
<h2 id="org5c3e8ab"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orga0d52bb" class="outline-3">
<h3 id="orga0d52bb"><span class="section-number-3">1.1.</span> <a href="https://docs.conduit.xyz/">Conduit chain</a></h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Allows one to deploy a rollup through its Rollups-as-a-service platform within in minutes.</li>
</ul>
</div>
</div>
<div id="outline-container-orge387075" class="outline-3">
<h3 id="orge387075"><span class="section-number-3">1.2.</span> Gas per second</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Reflects the amount of computation the blockchain can handle per second.</li>
<li>Different EVM operation costs different gas, e.g., <code>ADD</code> costs 3 gas.</li>
<li>Block gas limit: ensures that any node can reliably keep up with the rest of the network.</li>
</ul>
</div>
</div>
<div id="outline-container-orgebc2be6" class="outline-3">
<h3 id="orgebc2be6"><span class="section-number-3">1.3.</span> Target gas per block</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Dynamically regulate the amount of computation a block can include.</li>
<li><code>Gas per second = Target Gas per block / Block time</code>.</li>
</ul>
</div>
</div>
<div id="outline-container-orge4eafd0" class="outline-3">
<h3 id="orge4eafd0"><span class="section-number-3">1.4.</span> Current blockchain scalability</h3>
<div class="outline-text-3" id="text-1-4">

<figure id="org217aac8">
<img src="https://hackmd.io/_uploads/rkHVB0iHR.png" alt="rkHVB0iHR.png" align="center" width="500px">

<figcaption><span class="figure-number">Figure 1: </span>2024 blockchain scalability comparison</figcaption>
</figure>

<ul class="org-ul">
<li>Throughput: 100MGas/s (\(\approx\) 3700 ERC-20 transfer) cannot compares to Web2 database with &gt;1M transactions per second.</li>
<li>Capacity: Complex applications cannot be on-chain, e.g., compute large Fibonacci (e.g., \(10^8\)) number would take 55 seconds on opBNB, while in C just 30 milliseconds in a single core.</li>
<li>Delay: Applications that require fast feedback loop, e.g., high-frequency trading are not feasible with long block times, e.g., 1s.</li>
</ul>
</div>
</div>
<div id="outline-container-orged90e86" class="outline-3">
<h3 id="orged90e86"><span class="section-number-3">1.5.</span> Blockchain node hardware requirements</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Lower hardware requirements for full nodes increase decentralization.</li>
<li>Higher requirements increase performance and security.</li>
</ul>
</div>
</div>
<div id="outline-container-org518fd18" class="outline-3">
<h3 id="org518fd18"><span class="section-number-3">1.6.</span> L1 and L2 nodes</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>L1 nodes are homogeneous; each node performs identical tasks, i.e., transaction consensus and execution without specialization.</li>
<li>L2 nodes are heterogeneous; different nodes perform specific tasks, e.g., sequencer node determines the transaction order, prover nodes rely on accelerators to enhance proof generation.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc5407bd" class="outline-3">
<h3 id="orgc5407bd"><span class="section-number-3">1.7.</span> Verifying a block</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>Re-execute the transactions in the block.</li>
<li>Applying the changes to Ethereum state trie.</li>
<li>Calculate the new root hash and compare it with the root hash provided by the block.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd5db719" class="outline-3">
<h3 id="orgd5db719"><span class="section-number-3">1.8.</span> Maximum extractable value (MEV)</h3>
<div class="outline-text-3" id="text-1-8">
<ul class="org-ul">
<li>Validators maximize their profitability by favorably ordering transactions.</li>
</ul>
</div>
</div>
<div id="outline-container-orgb86c515" class="outline-3">
<h3 id="orgb86c515"><span class="section-number-3">1.9.</span> Proposer-builder separation (PBS)</h3>
<div class="outline-text-3" id="text-1-9">
<ul class="org-ul">
<li>Block builders are responsible for creating blocks and offering them to the block proposer in each slot.</li>
<li>Block proposers cannot see the contents, but simply choose the most profitable one and pay a fee to the block builder before broadcasting the block.</li>
<li>PBS makes it harder for block builders to censor transactions, and to outperform individuals at MEV extraction.</li>
</ul>
</div>
</div>
<div id="outline-container-org70b52e9" class="outline-3">
<h3 id="org70b52e9"><span class="section-number-3">1.10.</span> Live and historical sync</h3>
<div class="outline-text-3" id="text-1-10">
<ul class="org-ul">
<li>Live (online): continuously update a node with the latest data.</li>
<li>Historical (offline): synchronize a node by downloading the processing data up to a certain point.</li>
<li>Historical sync has much higher TPS than live sync, e.g., 10x, since historical sync can perform batch processing and does not have network latency.</li>
</ul>
</div>
</div>
<div id="outline-container-org0eba903" class="outline-3">
<h3 id="org0eba903"><span class="section-number-3">1.11.</span> <a href="https://ethereum.org/en/developers/docs/networking-layer/portal-network/">Portal Network</a></h3>
<div class="outline-text-3" id="text-1-11">
<ul class="org-ul">
<li>An in-development p2p network for serving historical data where each node stores a small piece of Ethereum&rsquo;s history.</li>
<li>Light nodes do not need to trust on full nodes.</li>
<li>The entire history exists distributed across the network.</li>
</ul>
</div>
</div>
<div id="outline-container-org6ac304b" class="outline-3">
<h3 id="org6ac304b"><span class="section-number-3">1.12.</span> <a href="https://ethereum.org/en/roadmap/verkle-trees/">Verkle tree</a></h3>
<div class="outline-text-3" id="text-1-12">
<ul class="org-ul">
<li>Stateless clients rely on a witness that arrives with the block for PoI rather on maintaining own local trie.</li>
<li><b><b>Witness</b></b>: the minimal set of data that prove the values of the state that are being changed by the transactions in a block.</li>
</ul>

<ul class="org-ul">
<li>Merkle tree is too large to be broadcast between peers; the witness is a path connecting the data from leaved to the root, and to verify the data the hash of all sibling nodes are also required (to compute the parent hash).</li>
<li>Verkle trees reduce the witness size by shortening the distance between leaves and eliminating the need to provide sibling nodes; Using a polynomial commitment scheme (see <a href="https://chenyo-17.github.io/org-static-blog/2024-07-28-ethereum-merkle-patricia-trie.html">Ethereum MPT post</a> for explanation) allows the witness to have a fixed size.</li>
</ul>
</div>
</div>
<div id="outline-container-orgbdeeb13" class="outline-3">
<h3 id="orgbdeeb13"><span class="section-number-3">1.13.</span> Node storage</h3>
<div class="outline-text-3" id="text-1-13">
<ul class="org-ul">
<li>High disk space is the main barrier to a full node access, due to the need to store large chunks of Ethereum state data to process new transactions.</li>
<li>Using cheap hard drivers to store old data cannot keep up with new blocks.</li>
<li>Clients should find new ways to verify transactions without relying on looking up local databases.</li>
</ul>
</div>
<div id="outline-container-orgd969047" class="outline-4">
<h4 id="orgd969047"><span class="section-number-4">1.13.1.</span> History expiry</h4>
<div class="outline-text-4" id="text-1-13-1">
<ul class="org-ul">
<li>Nodes discard state data older than X blocks with weak subjectivity checkpoints, i.e., a genesis block close to the present.</li>
<li>Nodes can request historical data from peers with Portal Network, e.g., altruistic nodes that are willing to maintain and serve historical achieves, e.g., DAO.</li>
<li>Does not fundamentally change how Ethereum node handles data.</li>
<li>Controversial due to it could introduce new censorship risks if centralized organizations are providing historical data.</li>
<li>EIP-4444 is under active discussion regarding community management.</li>
</ul>
</div>
</div>
<div id="outline-container-org3df501a" class="outline-4">
<h4 id="org3df501a"><span class="section-number-4">1.13.2.</span> State expiry</h4>
<div class="outline-text-4" id="text-1-13-2">
<ul class="org-ul">
<li>Remove state from individual nodes if it has not been accessed recently.</li>
<li>The inactive accounts is not deleted, but stored separately from the active state and can be resurrected.</li>
<li>A leading approach requires to add timestamps to the account address.</li>
<li>The responsibility of storing old data may also be moved to centralized providers.</li>
</ul>
</div>
</div>
<div id="outline-container-org59ddae4" class="outline-4">
<h4 id="org59ddae4"><span class="section-number-4">1.13.3.</span> Statelessness</h4>
<div class="outline-text-4" id="text-1-13-3">
<ul class="org-ul">
<li>weak statelessness: only block producers need access to full state data.</li>
<li>Weak statelessness require Verkle trees and proposer-builder separation.</li>
<li>strong statelessness: no nodes need access to the full state data.</li>
<li>In strong statelessness, witnesses are generated by users to declare accounts related to the transaction; not a part of Ethereum&rsquo;s roadmap.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org63563d5" class="outline-3">
<h3 id="org63563d5"><span class="section-number-3">1.14.</span> Software transactional memory (STM)</h3>
<div class="outline-text-3" id="text-1-14">
<ul class="org-ul">
<li>A concurrency control mechanism to control access to shares memory in software.</li>
<li>A transaction refers to a piece of code executing a series of reads and writes to the shared memory.</li>
<li>Transactions are isolated; changes made by one transaction are not visible to others until the transaction commits.</li>
<li>When a conflict is detected, e.g., two transactions try to modify the same memory, one transaction is rolled back.</li>
</ul>
</div>
</div>
<div id="outline-container-org9d1e30b" class="outline-3">
<h3 id="org9d1e30b"><span class="section-number-3">1.15.</span> Block-STM</h3>
<div class="outline-text-3" id="text-1-15">
<ul class="org-ul">
<li>A parallel execution engine to schedule smart contract transactions based on STM.</li>
<li>Transactions are grouped in blocks, every execution of the block must yield the deterministic and consistent outcome.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org3f1b395" class="outline-2">
<h2 id="org3f1b395"><span class="section-number-2">2.</span> What is MagaETH</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>An EVM-compatible L2 blockchain with Web2-level real-time processing and publishing, i.e., millisecond-level response times under heavy load.</li>
<li>Main idea: delegate security and censorship resistance to base layers, e.g., Ethereum to make room for L2 optimization.</li>
</ul>
</div>
<div id="outline-container-org38b4ee1" class="outline-3">
<h3 id="org38b4ee1"><span class="section-number-3">2.1.</span> Node specialization</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>sequencer: only one active sequencer at any time to <b><b>eliminate the consensus overhead</b></b>.</li>
<li>full node: receive state diff from the sequencer via a p2p network and apply the diffs to update local states; don&rsquo;t re-execute transactions, only validates the block indirectly using proofs provided by the provers.</li>
<li>provers: validate the block asynchronously using the stateless validation scheme.</li>
<li><a href="https://vitalik.eth.limo/general/2021/12/06/endgame.html">Endgame, Vitalik 2021</a>: Node specialization ensures trustless and high decentralized block validation (more provers), even though block production becomes more centralized (one sequencer).</li>
</ul>
</div>
</div>
<div id="outline-container-orgfe0cee6" class="outline-3">
<h3 id="orgfe0cee6"><span class="section-number-3">2.2.</span> Design philosophy</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li>Reth (Rust implementation of the Ethereum protocol) is bottlenecked by the MPT update in a live sync setup, even with a powerful sequencer.</li>
<li><a href="https://www.usenix.org/conference/atc19/presentation/keynote">Measure, then build</a>: first get insights from real problems, then design techniques to address all problems simultaneously.</li>
<li>Prefer clean-slate, as addressing any bottleneck in isolation rarely results in significant end-to-end performance improvement.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org2690d16" class="outline-2">
<h2 id="org2690d16"><span class="section-number-2">3.</span> MegaETH challenges</h2>
<div class="outline-text-2" id="text-3">

<figure id="orga4c0bc3">
<img src="https://hackmd.io/_uploads/BJW2EG4L0.png" alt="BJW2EG4L0.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 2: </span>A transaction life-cycle.</figcaption>
</figure>

<ul class="org-ul">
<li>State synchronization requires high data compression given limited network bandwidth.</li>
<li>Updating the hash root requires intensive disk I/O operation, which cannot be well speedup with optimized smart-contract compilers.</li>
<li>Cannot easily raise block gas limit without properly repricing opcodes that do not benefit from optimized compilation.</li>
<li>Parallelism is low for long dependency chains.</li>
<li>The actual user experience highly depend on the infrastructure, e.g., RPC nodes, indexers.</li>
<li>Support transaction priorities, e.g., critical transactions should be processed without queuing delays.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-megaeth.html">megaeth</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[megaeth]]></category>
  <link>https://chenyo.me/2024-07-04-parallel-evm:-megaeth.html</link>
  <guid>https://chenyo.me/2024-07-04-parallel-evm:-megaeth.html</guid>
  <pubDate>Thu, 04 Jul 2024 15:34:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[My German course]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org5062ad6">1. Was ist passiert</a></li>
<li><a href="#org0227d18">2. Ich kann kein gutes Englisch schreiben</a></li>
<li><a href="#orgde6e28d">3. Ich kann nicht mich vorstellen</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org5062ad6" class="outline-2">
<h2 id="org5062ad6"><span class="section-number-2">1.</span> Was ist passiert</h2>
<div class="outline-text-2" id="text-1">
<p>
Ich habe seit diesem Montag einen intensiven Deutschkurs gemacht.
Die Kurs fangt von 8:30 Uhr bis 11:45 Uhr jeden Tag an.
Weil von mein Wohnung bis zu die Schule ich fast einen Stunden brauche, muss ich vor 7 aufstehen und zur Bushaltstelle runnen.
Nach dem Kurs fahre ich mit dem Bus zur Buro und arbeite ich bis zum Abendessen.
Danach komme ich nach Haus zuruck und mache ein paar Haushalt.
Ich gehe circa 11 Uhr ins Bett.
</p>
</div>
</div>
<div id="outline-container-org0227d18" class="outline-2">
<h2 id="org0227d18"><span class="section-number-2">2.</span> Ich kann kein gutes Englisch schreiben</h2>
<div class="outline-text-2" id="text-2">
<p>
Wenn ich hier diesen Satzen schreibe, merke ich, dass ich komplexe Satze auf Englisch nicht mehr schreiben kann.
</p>

<p>
This is interesting, I am still in the starting phase, I cannot speak fluently at all and I have grammar mistakes everywhere.
However, now when I try to type something in english, the german translation pops up in my mind first.
If I don&rsquo;t know the german, I have a problem writing it down in english.
As a result, my written english falls back to almost the same level as german.
</p>
</div>
</div>
<div id="outline-container-orgde6e28d" class="outline-2">
<h2 id="orgde6e28d"><span class="section-number-2">3.</span> Ich kann nicht mich vorstellen</h2>
<div class="outline-text-2" id="text-3">
<p>
All my classmates come from diverse backgrounds.
At least 5 are Ukriainian, and at least 2 from some countries that I have never heard before.
English is no longer a universal language, but with my broken german I can barely chat.
</p>

<p>
Even with english, I have struggled a lot introducing myself.
In the past decade, I never had this issue since everyone around me shared the similar experience.
I can easily position myself; which education I had, which university I went, what work I am doing, what issue I have, etc.
But this coordinate system works no more in this class.
I am only confusing others if I mention I am a PhD student.
So you are a student, they ask, why would they pay a student?
</p>

<p>
Once I asked classmate what she does on weekend.
She paused, and said: because you are working, so the weekend is different for you, but I don&rsquo;t work, so there is no difference for me.
And before this I have never thought of such a bias in my question.
</p>

<p>
More and more often recently, I realize how limited my perspective is.
I did not know what the life with a social worker is like.
I did not know that Afghan can often speak Turkish.
I did not know what my lecturer thinks when he works as a security guard at night.
I have been too much caught up in my own world, such that I am unable to ask a meaningful question of people I don&rsquo;t understand.
I want to know more about the difference of this world, but I don&rsquo;t know how.
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-german.html">german</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[german]]></category>
  <link>https://chenyo.me/2024-07-04-my-german-course.html</link>
  <guid>https://chenyo.me/2024-07-04-my-german-course.html</guid>
  <pubDate>Thu, 04 Jul 2024 13:36:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Ethereum Virtual Machine]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgded331c">1. Terminology</a>
<ul>
<li><a href="#org759fe8d">1.1. Motivation</a></li>
<li><a href="#org9fbd4fb">1.2. Blockchain paradigm</a></li>
<li><a href="#orga17711a">1.3. Ethereum Transaction execution</a></li>
<li><a href="#orga13af86">1.4. World state \(\sigma\)</a>
<ul>
<li><a href="#orgdc2478c">1.4.1. The account state \(\sigma[a]\)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note of EVM, resources are from:
</p>
<ul class="org-ul">
<li><a href="https://ethereum.org/en/developers/docs/evm/">ethereum.org</a></li>
<li><a href="https://chatgpt.com/g/g-TJq7kBEsX-evm-gpt">EVM GPT</a></li>
<li><a href="https://ethereum.github.io/yellowpaper/paper.pdf">Ethereum yellowpaper: Paris version (26.06.2024)</a></li>
</ul>
<div id="outline-container-orgded331c" class="outline-2">
<h2 id="orgded331c"><span class="section-number-2">1.</span> Terminology</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>EVM: a decentralized virtual environment that executes code consistently and securely across all Ethereum nodes.</li>
<li>Gas: used to measure the computational effort required to execute smart contracts.</li>
<li>Ether(ETH): the native cryptocurrency in Ethereum; used to incentivize computation.</li>
<li>Wei: the smallest subdenomination of Ether; 1 Ether = \(10^{18}\) Wei.</li>
<li>State: A modified Merkle Patricia Trie to keep all accounts linked by hashes and reducible to a single root hash stored on the blockchain.</li>
<li>State transition function: <code>Y(S, T)=S'</code>: produces a <b><b>deterministic</b></b> new valid state (<code>S'</code>) given an old valid state (<code>S</code>) new set of valid transactions (<code>T</code>)</li>
<li>Transactions: signed instructions from accounts, includes
<ul class="org-ul">
<li>a contraction creation to create a new contract account containing compiled contract bytecode, or</li>
<li>a message call to a contract to execute the bytecode.</li>
</ul></li>
<li>Proof of work: a spam deterrence mechanism; demonstrate the potential for a basic data channel to carry a strong economic signal without relying on trust.</li>
<li>Fork: a disagreement between nodes as to which root-to-leaf path down the block tree is the best blockchain.</li>
<li>Chain Id (\(\beta\)): distinguish between diverged blockchains (EIP-155).</li>
</ul>


<figure id="orge113bec">
<img src="https://ethereum.org/_next/image/?url=%2Fcontent%2Fdevelopers%2Fdocs%2Fevm%2Fevm.png&amp;w=1920&amp;q=75" alt="?url=%2Fcontent%2Fdevelopers%2Fdocs%2Fevm%2Fevm.png&amp;w=1920&amp;q=75" align="center" width="500px">

<figcaption><span class="figure-number">Figure 1: </span>The EVM structure</figcaption>
</figure>
</div>
<div id="outline-container-org759fe8d" class="outline-3">
<h3 id="org759fe8d"><span class="section-number-3">1.1.</span> Motivation</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>To facilitate transactions between individuals who would otherwise have no means to trust one another.</li>
<li>To enforce a rich and unambiguous agreement autonomously (crypto-lay system).</li>
</ul>
</div>
</div>
<div id="outline-container-org9fbd4fb" class="outline-3">
<h3 id="org9fbd4fb"><span class="section-number-3">1.2.</span> Blockchain paradigm</h3>
<div class="outline-text-3" id="text-1-2">
<div class="latex" id="orgc66f7da">
\begin{aligned}
\sigma_{t+1} & \equiv \Pi\left(\boldsymbol{\sigma}_t, B\right) \\
B & \equiv\left(\ldots,\left(T_0, T_1, \ldots\right), \ldots\right) \\
\Pi(\boldsymbol{\sigma}, B) & \equiv \Upsilon\left(\Upsilon\left(\boldsymbol{\sigma}, T_0\right), T_1\right) \ldots
\end{aligned}

</div>
<ul class="org-ul">
<li>\(\sigma\): a valid state between two transactions.</li>
<li>\(B\): a block including a series of transactions.</li>
<li>\(\Upsilon\): the Ethereum state transition function.</li>
<li>\(\Pi\): the block-level state transition function.</li>
</ul>
</div>
</div>
<div id="outline-container-orga17711a" class="outline-3">
<h3 id="orga17711a"><span class="section-number-3">1.3.</span> Ethereum Transaction execution</h3>
<div class="outline-text-3" id="text-1-3">
<ol class="org-ol">
<li>An user (externally owned accounts, EOA) signs a transaction, including the sender, receiver (the contract address), Ether value, Gas limit and Gas price.</li>
<li>The transaction is broadcast to the Ethereum network.</li>
<li>Once a validator receives the transaction, it first performs sanity check, e.g., signature validation, balance check.</li>
<li>Upon passing the validation, a transaction is included in a block and executed.
<ol class="org-ol">
<li>Initialization: PC set to the start of the contract code; Gas limit; empty stack, memory; contract state trie loaded to the storage.</li>
<li>Execution: locally executes each bytecode and modifies stack (<code>PUSH</code>), memory (<code>MSTORE</code>) and storage (<code>SSTORE</code>); modifies the global state tree (<code>CALL</code>).</li>
<li>Abortion: if the gas is used up, all state changes during the execution are reverted.</li>
</ol></li>
<li>After the execution is finished, the validator assembles the block and proposes the new block.</li>
<li>If a consensus is reached, the block is appended to the blockchain, and other nodes verify the block and update their global states accordingly.</li>
</ol>
</div>
</div>
<div id="outline-container-orga13af86" class="outline-3">
<h3 id="orga13af86"><span class="section-number-3">1.4.</span> World state \(\sigma\)</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>A mapping between 160-bit addresses and account states, maintained in a modified Merkle Patricia tree (MPT), serialized as RLP, stored in a off-chain database backend.</li>
<li>MPT benefits: the root node depends on all internal data; allows any previous state with known root hash to be recalled as the tree is immutable.</li>
<li><a href="https://media.licdn.com/dms/image/D4D12AQG2itcSOHtiKw/article-cover_image-shrink_720_1280/0/1690981109933?e=1725494400&amp;v=beta&amp;t=4e2FSROhKCs2qeGtpyb5STePXe80agLfg3G9nuD4oKc">Merkle Patricia Trie representation of state data across blocks</a></li>
</ul>
</div>
<div id="outline-container-orgdc2478c" class="outline-4">
<h4 id="orgdc2478c"><span class="section-number-4">1.4.1.</span> The account state \(\sigma[a]\)</h4>
<div class="outline-text-4" id="text-1-4-1">
<ul class="org-ul">
<li><code>nonce</code>: the number of transactions the address has sent, or the number of contracts the address has made.</li>
<li><code>balance</code>: the number of Wei owned by the address.</li>
<li><code>storageRoot</code>: a 256-bit hash of the root node of a MPT which encodes the account storage, i.e., the contract storage.</li>
<li><code>codeHash</code>: the hash of the EVM code, i.e., the contract bytecode, which is executed if the address receives a message call.</li>
</ul>
</div>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <link>https://chenyo.me/2024-06-30-ethereum-virtual-machine.html</link>
  <guid>https://chenyo.me/2024-06-30-ethereum-virtual-machine.html</guid>
  <pubDate>Sun, 30 Jun 2024 11:29:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Viewed: Interlaken]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org7b12a34">1. Where did we go</a></li>
<li><a href="#org3b3d66c">2. Why did we go</a></li>
<li><a href="#org6aaa32a">3. What did we do</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org7b12a34" class="outline-2">
<h2 id="org7b12a34"><span class="section-number-2">1.</span> Where did we go</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>We rent a car and drove to Interlaken.</li>
<li>We visited <a href="https://aareschlucht.ch/">Aareschlucht</a> and <a href="https://www.brienz.ch/">Brienz</a>, and did some short strolls around.</li>
</ul>


<figure id="orgb28e5f2">
<img src="./static/car.jpg" alt="car.jpg" align="center" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>The view outside the car</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org3b3d66c" class="outline-2">
<h2 id="org3b3d66c"><span class="section-number-2">2.</span> Why did we go</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>According to the unpredictable <a href="https://www.meteoschweiz.admin.ch/#tab=forecast-map">Meteoswiss</a> forecast, this Saturday would have been the only weekend-day with some good weather in limited locations to go hiking since 2? or 3? weeks ago.</li>
<li>But this was not the case anymore when we arrived the <a href="https://www.interlaken.ch/en/experiences/mountains-panoramas/mountain-excursions/brienzer-rothorn">Rothorn Kulm</a> restaurant via the <a href="https://www.interlaken.ch/en/experiences/poi/brienz-rothorn-railway">steam train</a>.</li>
</ul>


<figure id="orgb6447a6">
<img src="./static/restaurant.jpg" alt="restaurant.jpg" align="center" width="400px">

<figcaption><span class="figure-number">Figure 2: </span>The weather at the Rothorn Kulm</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org6aaa32a" class="outline-2">
<h2 id="org6aaa32a"><span class="section-number-2">3.</span> What did we do</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>We first went a tour in Aareschlucht, where we experienced both strong cold wind and gentle warm wind.</li>
<li>We then did a half-hour small hiking to go back to our starting point.</li>
<li>Then we drove to Brienz, and had a relaxing lunch along the lake, where I ate a piece of watermelon.</li>
<li>We took the 1-hour steam train to the Rothorn Kulm, when we arrived it started to be foggy, windy and rainy.</li>
<li>We refilled our energy with hot drinks and snacks in the restaurant, and took a short stroll around the restaurant.</li>
<li>We went back to the restaurant to escape the cold (yes it is end of June) and waited for the steam train to go down.</li>
<li>During the train down the sun came out a bit, and the view was clear and nice again!</li>
</ol>


<figure id="org8bbf12e">
<img src="./static/water.jpg" alt="water.jpg" align="center" width="600px">

<figcaption><span class="figure-number">Figure 3: </span>The water in Aareschlucht</figcaption>
</figure>


<figure id="orge121191">
<img src="./static/view.jpg" alt="view.jpg" align="center" width="600px">

<figcaption><span class="figure-number">Figure 4: </span>The view on the train</figcaption>
</figure>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-trip.html">trip</a> <a href="https://chenyo.me/tag-interlaken.html">interlaken</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[trip]]></category>
  <category><![CDATA[interlaken]]></category>
  <link>https://chenyo.me/2024-06-29-viewed:-interlaken.html</link>
  <guid>https://chenyo.me/2024-06-29-viewed:-interlaken.html</guid>
  <pubDate>Sat, 29 Jun 2024 23:52:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Parallel EVM: Sei-v2]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6b26b28">1. Blockchain fundamentals</a>
<ul>
<li><a href="#orgf2af216">1.1. Mainnet and Testnet</a></li>
<li><a href="#org5d02c4b">1.2. Mainnet Alpha and Beta</a></li>
<li><a href="#orge5a5ec2">1.3. Layer 1 and Layer 2</a></li>
<li><a href="#orgc5d0ec2">1.4. Rollups</a></li>
<li><a href="#orgf147245">1.5. State channels</a></li>
<li><a href="#org3ddd500">1.6. Sidechains</a></li>
<li><a href="#orgbafdbcc">1.7. Ethereum and EVM</a></li>
<li><a href="#org2708c3e">1.8. IAVL tree</a></li>
<li><a href="#orgd5bbce3">1.9. CosmWasm contract</a></li>
<li><a href="#org062c4b6">1.10. Cosmos Ecosystem</a></li>
<li><a href="#org6e9ef5f">1.11. Blockchain layers</a></li>
<li><a href="#org1baac8c">1.12. Optimistic parallelization</a></li>
<li><a href="#org6b0aa84">1.13. Integrated and Modular blockchain</a></li>
<li><a href="#org87e827e">1.14. EVM Execution and storage layer</a></li>
<li><a href="#org586d644">1.15. Block time and finalize time</a></li>
<li><a href="#org72d280a">1.16. Blockchain audit</a></li>
</ul>
</li>
<li><a href="#orge7fe886">2. What is Sei</a></li>
<li><a href="#org873bdc0">3. What is Sei v2</a>
<ul>
<li><a href="#org8d32e18">3.1. Backwards compatibility</a></li>
<li><a href="#orgf88f8de">3.2. Optimistic parallelization</a></li>
<li><a href="#org8533afb">3.3. SeiDB</a></li>
<li><a href="#org664277a">3.4. Interoperability</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for <a href="https://blog.sei.io/sei-v2-the-first-parallelized-evm/">Sei-v2-blog</a> as well as some terminology explained by <a href="https://chatgpt.com/g/g-TJq7kBEsX-evm-gpt">EVM GPT</a>.
</p>
<div id="outline-container-org6b26b28" class="outline-2">
<h2 id="org6b26b28"><span class="section-number-2">1.</span> Blockchain fundamentals</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgf2af216" class="outline-3">
<h3 id="orgf2af216"><span class="section-number-3">1.1.</span> Mainnet and Testnet</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Mainnet: real transactions occur and have real-world value; any operation is final and irreversible.</li>
<li>Testnet: a sandbox environment with test cryptocurrencies without real-world value.</li>
</ul>
</div>
</div>
<div id="outline-container-org5d02c4b" class="outline-3">
<h3 id="org5d02c4b"><span class="section-number-3">1.2.</span> Mainnet Alpha and Beta</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Alpha: test core functionalities and gather initial feedback in live environment.</li>
<li>Beta: more stable and feature-complete, but still need more testing.</li>
</ul>
</div>
</div>
<div id="outline-container-orge5a5ec2" class="outline-3">
<h3 id="orge5a5ec2"><span class="section-number-3">1.3.</span> Layer 1 and Layer 2</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>L1: the main network where all transactions are processed and the primary chain is maintained.</li>
<li>L2: secondary frameworks on top of L1 chain, aimed to enhance scalability without compromising the security of the L1.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc5d0ec2" class="outline-3">
<h3 id="orgc5d0ec2"><span class="section-number-3">1.4.</span> Rollups</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>Processes transactions off-chain and periodically submits a summary (rollup) to L1.</li>
<li>Optimistic rollups: assume transactions are valid be default and use a challenge period to allow disputes
<ul class="org-ul">
<li>Examples: Optimism, Arbitrum.</li>
</ul></li>
<li>ZK-rollups: use zero-knowledge proofs to validate transactions.
<ul class="org-ul">
<li>Examples: zkSync, StarkNet.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-orgf147245" class="outline-3">
<h3 id="orgf147245"><span class="section-number-3">1.5.</span> State channels</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>allow participants to conduct numerous off-chain transactions, with only the final state recorded on the L1.</li>
<li>Examples: Bitcoin lightning network.</li>
</ul>
</div>
</div>
<div id="outline-container-org3ddd500" class="outline-3">
<h3 id="org3ddd500"><span class="section-number-3">1.6.</span> Sidechains</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>Independent blockchains running parallel to the main chain, with own consensus and security.</li>
<li>Examples: Polygon.</li>
</ul>
</div>
</div>
<div id="outline-container-orgbafdbcc" class="outline-3">
<h3 id="orgbafdbcc"><span class="section-number-3">1.7.</span> Ethereum and EVM</h3>
<div class="outline-text-3" id="text-1-7">
<ul class="org-ul">
<li>Ethereum: a blockchain ecosystem, includes the blockchain, consensus mechanism, smart contracts, native cryptocurrency.</li>
<li>EVM: the runtime environment to execute smart contracts in Ethereum.</li>
</ul>
</div>
</div>
<div id="outline-container-org2708c3e" class="outline-3">
<h3 id="org2708c3e"><span class="section-number-3">1.8.</span> IAVL tree</h3>
<div class="outline-text-3" id="text-1-8">
<ul class="org-ul">
<li>AVL tree: self-balancing binary tree where the difference in heights between left and right subtrees of anynode is at most one.</li>
<li>IAVL tree: immutable AVL tree; node cannot be changed once it is added.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd5bbce3" class="outline-3">
<h3 id="orgd5bbce3"><span class="section-number-3">1.9.</span> CosmWasm contract</h3>
<div class="outline-text-3" id="text-1-9">
<ul class="org-ul">
<li>Allows developers to write fast and portable smart contracts in WebAssembly.</li>
<li>Designed to be interoperable within in the Cosmos ecosystem, a network of independent blockchains connected via the Inter-blockchain communication (IBC) protocol.</li>
</ul>
</div>
</div>
<div id="outline-container-org062c4b6" class="outline-3">
<h3 id="org062c4b6"><span class="section-number-3">1.10.</span> Cosmos Ecosystem</h3>
<div class="outline-text-3" id="text-1-10">
<ul class="org-ul">
<li>A network of independent, interoperable blockchains designed to create an Internet of blockchain.</li>
<li>Decouples the consensus (BFT consensus engine) and networking (IBC protocol) layers from the application layers</li>
<li>Cosmos SDK: a modular framework for building application-specific blockchains efficiently.</li>
<li>Cosmos Hub: the first blockchain in the Cosmos network, serves as a central hub to connect multiple blockchains via IBC.</li>
</ul>
</div>
</div>
<div id="outline-container-org6e9ef5f" class="outline-3">
<h3 id="org6e9ef5f"><span class="section-number-3">1.11.</span> Blockchain layers</h3>
<div class="outline-text-3" id="text-1-11">
<ul class="org-ul">
<li>Infrastructure layer: the physical devices that support the network; and the underlying communication protocols for data transfer between nodes.</li>
<li>Data layer: the distributed ledger and the storage methods.</li>
<li>Consensus layer: the protocols, validators and miners; determines the transaction orders.</li>
<li>Execution layer: smart contracts and virtual machines; determines the transaction update.</li>
<li>Application layer: dApps to provide service and user interfaces.</li>
<li>Governance layer: the community decision-making process and proposals.</li>
<li>Security layer: cryptographic primitives and security protocols to avoid attacks.</li>
</ul>
</div>
</div>
<div id="outline-container-org1baac8c" class="outline-3">
<h3 id="org1baac8c"><span class="section-number-3">1.12.</span> Optimistic parallelization</h3>
<div class="outline-text-3" id="text-1-12">
<ul class="org-ul">
<li>Multiple transactions are processed in parallel under the assumption that they will conflict with each other; necessary corrections are made afterwards if conflicts are detected.</li>
<li>Increase throughput if conflicts are well handled.</li>
</ul>
</div>
</div>
<div id="outline-container-org6b0aa84" class="outline-3">
<h3 id="org6b0aa84"><span class="section-number-3">1.13.</span> Integrated and Modular blockchain</h3>
<div class="outline-text-3" id="text-1-13">
<ul class="org-ul">
<li>Integrated: all components, e.g., execution layer, consensus mechanism, networking are tightly coupled; faster internal communication but lower flexibility and scalability.</li>
<li>Modular: allow independent upgrades for different components; enhance scalability.</li>
</ul>
</div>
</div>
<div id="outline-container-org87e827e" class="outline-3">
<h3 id="org87e827e"><span class="section-number-3">1.14.</span> EVM Execution and storage layer</h3>
<div class="outline-text-3" id="text-1-14">
<ul class="org-ul">
<li>Execution: responsible for running smart contracts and processing transactions.</li>
<li>Storage: store all blockchain data, e.g., accounts, smart contract states, transaction history.</li>
</ul>
</div>
</div>
<div id="outline-container-org586d644" class="outline-3">
<h3 id="org586d644"><span class="section-number-3">1.15.</span> Block time and finalize time</h3>
<div class="outline-text-3" id="text-1-15">
<ul class="org-ul">
<li>Block: the average time for a new block to be added.</li>
<li>Finalize: the period after which a block is considered irreversible.</li>
<li>Faster block times often imply cheaper transaction fees due to increased transaction throughput and less block competition.</li>
</ul>
</div>
</div>
<div id="outline-container-org72d280a" class="outline-3">
<h3 id="org72d280a"><span class="section-number-3">1.16.</span> Blockchain audit</h3>
<div class="outline-text-3" id="text-1-16">
<ul class="org-ul">
<li>A review of a blockchain to ensures its security and functionality.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orge7fe886" class="outline-2">
<h2 id="orge7fe886"><span class="section-number-2">2.</span> What is Sei</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>On mainnet beta since August 2023.</li>
<li>Consistently finalizes blocks at 390ms; the fastest chain in existence.</li>
<li>Consistently sees activity of &gt;45 TPS (transaction per seconds); the second highest number of successful transactions per second.</li>
<li>Allows for Cosmwasm smart contracts written in Rust; more execution environments like EVM is the biggest request.</li>
</ul>
</div>
</div>
<div id="outline-container-org873bdc0" class="outline-2">
<h2 id="org873bdc0"><span class="section-number-2">3.</span> What is Sei v2</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>The first fully parallelized EVM.</li>
<li>Backwards compatibility of EVM smart contracts.</li>
<li>Optimistic parallelization; support parallelization without requiring any dependencies.</li>
<li>Improves the storage layer to prevent state bloat, read/write, and state sync for new nodes.</li>
<li>Seamless composability between different execution environments.</li>
<li>Offers 28,300 batched transactions per second of throughput; 390ms block times and 390ms finality; far cheaper per-transaction costs.</li>
<li>Once audits are complete, the upgrade is released in a public testnet in Q1 2024, and deployed to mainnet in H1 2024.</li>
</ul>
</div>
<div id="outline-container-org8d32e18" class="outline-3">
<h3 id="org8d32e18"><span class="section-number-3">3.1.</span> Backwards compatibility</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Ethereum contracts can be seamlessly deployed on Sei v2 with no code changes.</li>
<li>User can send a Eth transaction to the Ethereum contract on Sei v2 via the same interface, e.g., Metamask, Hardhat.</li>
<li>Sei v2 imports Geth (a Go EVM implementation) to process the Eth transaction, and convert the result to Sei storage.</li>
</ul>
</div>
</div>
<div id="outline-container-orgf88f8de" class="outline-3">
<h3 id="orgf88f8de"><span class="section-number-3">3.2.</span> Optimistic parallelization</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>Sei requires smart contract developers to optionally define the state that smart contracts are using, Sei v2 removes this need.</li>
<li>Sei v2 chain optimistically runs all transactions in parallel, when reaching conflicts, i.e., transactions touching the same state, the chain tracks the storage parts each transaction is touching.</li>
<li>Transactions touching different parts will be rerun in parallel; transactions touching the same state will be rerun sequentially.</li>
<li>Recursively continue until no more conflicts.</li>
<li>Since the transactions are ordered in a block, this process is deterministic.</li>
</ul>
</div>
</div>
<div id="outline-container-org8533afb" class="outline-3">
<h3 id="org8533afb"><span class="section-number-3">3.3.</span> SeiDB</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>Sei uses a vanilla database layer composed of an IAVL tree, which is less efficient in terms of storage and latency.</li>
<li>Sei v2 breaks the single IAVL tree into 2 components:
<ul class="org-ul">
<li>state store: provide low latency direct access to raw key-value pairs to remove the overhead of redundant metadata and disk usage; uses a write-ahead log to help event recovery.</li>
<li>state commitment: use an in-memory IAVL tree to help validators reach consensus faster.</li>
</ul></li>
<li>After benchmarking, Sei v2 replaces GoLevelDB with PebbleDB for better read/write in multi-threaded access.</li>
</ul>
</div>
</div>
<div id="outline-container-org664277a" class="outline-3">
<h3 id="org664277a"><span class="section-number-3">3.4.</span> Interoperability</h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li>Sei v2 processes different transactions, e.g., Cosmwasm, EVM in a uniformed way, and then forwards them to different storage sections.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-evm.html">evm</a> <a href="https://chenyo.me/tag-parallel-evm.html">parallel-evm</a> <a href="https://chenyo.me/tag-sei.html">sei</a> </div>]]></description>
  <category><![CDATA[evm]]></category>
  <category><![CDATA[parallel-evm]]></category>
  <category><![CDATA[sei]]></category>
  <link>https://chenyo.me/2024-06-28-parallel-evm:-sei-v2.html</link>
  <guid>https://chenyo.me/2024-06-28-parallel-evm:-sei-v2.html</guid>
  <pubDate>Fri, 28 Jun 2024 21:25:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Watched: Argo (2012)]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org054547d">1. Why did I watch it</a></li>
<li><a href="#orgc061149">2. What is it about</a></li>
<li><a href="#org63ffd52">3. Did I like it</a></li>
</ul>
</div>
</nav>

<figure id="org10a598a">
<img src="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*IFB2V5vjsVKtHcxBdCfQSQ.jpeg" alt="1*IFB2V5vjsVKtHcxBdCfQSQ.jpeg" align="center" width="300px">

<figcaption><span class="figure-number">Figure 1: </span>Argo poster</figcaption>
</figure>
<div id="outline-container-org054547d" class="outline-2">
<h2 id="org054547d"><span class="section-number-2">1.</span> Why did I watch it</h2>
<div class="outline-text-2" id="text-1">
<p>
This week, I found myself craving a movie with a &ldquo;Homeland&rdquo; theme.
Then the name of Argo came to me.
I saw its name a decade ago (I am too old!) on some movie magazine cover.
</p>
</div>
</div>
<div id="outline-container-orgc061149" class="outline-2">
<h2 id="orgc061149"><span class="section-number-2">2.</span> What is it about</h2>
<div class="outline-text-2" id="text-2">
<p>
It has little thing to do with &ldquo;Homeland&rdquo;.
Instead, it blends action, comedy and drama based on a true story, although non of any dramatic conflicts really happened in history afak.
It is about how a selfless agent, backed by an entire intelligence system which behaved incredibly efficient, and an alliance which also behaved incredibly generous, escaped a group of compatriots, who also behaved incredibly brave, from a dangerous place.
My boyfriend said it is quite &ldquo;Hitchcock&rdquo;.
Every tension resolves safely in the end: the phone will be picked up at the last second, the plane will take off at the last second, even the plane tickets will magically show up at the last second (Swissair yeah!).
</p>
</div>
</div>
<div id="outline-container-org63ffd52" class="outline-2">
<h2 id="org63ffd52"><span class="section-number-2">3.</span> Did I like it</h2>
<div class="outline-text-2" id="text-3">
<p>
I guess?
The filming is good, as well as the narration and the performance.
There were some moments where I was not fully convinced, but I accept them if that was the history.
What really amazed me was when I found the actor of Tony was also the director, and also wrote &ldquo;Good Will Hunting (1997)&rdquo;, what a genius!
But I guessed I preferred &ldquo;Civil war (2024)&rdquo; (my last movie) to this one.
The reason?
I felt &ldquo;Argo&rdquo; could have delved deeper into the absurdities of war rather than solely focusing on a heroic narrative.
</p>


<figure id="org4bc4623">
<img src="https://m.media-amazon.com/images/M/MV5BOTI0MzcxMTYtZDVkMy00NjY1LTgyMTYtZmUxN2M3NmQ2NWJhXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_.jpg" alt="MV5BOTI0MzcxMTYtZDVkMy00NjY1LTgyMTYtZmUxN2M3NmQ2NWJhXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_.jpg" align="center" width="300px">

<figcaption><span class="figure-number">Figure 2: </span>Good Will Hunting poster</figcaption>
</figure>



<figure id="org36024cd">
<img src="https://posterspy.com/wp-content/uploads/2024/04/Civil-War-Kirsten.jpg" alt="Civil-War-Kirsten.jpg" align="center" width="300px">

<figcaption><span class="figure-number">Figure 3: </span>Civil War poster</figcaption>
</figure>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> <a href="https://chenyo.me/tag-moive.html">moive</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <category><![CDATA[moive]]></category>
  <link>https://chenyo.me/2024-06-26-watched:-argo.html</link>
  <guid>https://chenyo.me/2024-06-26-watched:-argo.html</guid>
  <pubDate>Wed, 26 Jun 2024 21:37:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Go patterns]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org61f909d">1. Concurrency vs Parallelism</a></li>
<li><a href="#org59bcf39">2. Use goroutines for states</a>
<ul>
<li><a href="#org6ac3639">2.1. Matching a regex</a></li>
<li><a href="#orgeae3186">2.2. When the state variable cannot be avoided</a></li>
</ul>
</li>
<li><a href="#org19624ac">3. Pattern 1: publish/subscribe server</a>
<ul>
<li><a href="#org460463a">3.1. Options for slow goroutines</a></li>
</ul>
</li>
<li><a href="#orga6afd64">4. Pattern 2: work scheduler</a></li>
<li><a href="#org65862ae">5. Pattern 3: replicated service client</a></li>
<li><a href="#org29d6849">6. Pattern 4: Protocol multiplexer</a></li>
</ul>
</div>
</nav>
<p>
This a personal note for the <a href="https://www.youtube.com/watch?v=IdCbMO0Ey9I">Russ Cox guest lecture</a>.
</p>
<div id="outline-container-org61f909d" class="outline-2">
<h2 id="org61f909d"><span class="section-number-2">1.</span> Concurrency vs Parallelism</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Concurrency: write a program to handle lot of things at once
<ul class="org-ul">
<li>not necessarily faster</li>
</ul></li>
<li>Parallelism: the program itself can do a lot of computations at once</li>
</ul>
</div>
</div>
<div id="outline-container-org59bcf39" class="outline-2">
<h2 id="org59bcf39"><span class="section-number-2">2.</span> Use goroutines for states</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org6ac3639" class="outline-3">
<h3 id="org6ac3639"><span class="section-number-3">2.1.</span> Matching a regex</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>return if a given string matches a regex: start with <code>"</code>, contains arbitrary escape sequence and ends with <code>"</code></li>
<li><p>
unclear logic: store states in the data
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #dcaeea;">state</span> := <span style="color: #da8548; font-weight: bold;">0</span>
<span class="linenr"> 2: </span><span style="color: #51afef;">for</span> {
<span class="linenr"> 3: </span>    <span style="color: #dcaeea;">c</span> := <span style="color: #c678dd;">read</span>()
<span class="linenr"> 4: </span>    <span style="color: #51afef;">switch</span> state {
<span class="linenr"> 5: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">0</span>:
<span class="linenr"> 6: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">first char must be "</span>
<span class="linenr"> 7: </span>        <span style="color: #51afef;">if</span> c != <span style="color: #98be65;">'"'</span> {
<span class="linenr"> 8: </span>            <span style="color: #51afef;">return</span> <span style="color: #a9a1e1;">false</span>
<span class="linenr"> 9: </span>        }
<span class="linenr">10: </span>        state = <span style="color: #da8548; font-weight: bold;">1</span> <span style="color: #5B6268;">// </span><span style="color: #5B6268;">match the next char</span>
<span class="linenr">11: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">1</span>:
<span class="linenr">12: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">ending with " matches</span>
<span class="linenr">13: </span>        <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'"'</span> {
<span class="linenr">14: </span>            <span style="color: #51afef;">return</span> <span style="color: #a9a1e1;">true</span>
<span class="linenr">15: </span>        }
<span class="linenr">16: </span>        <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'\\'</span> {
<span class="linenr">17: </span>            state = <span style="color: #da8548; font-weight: bold;">2</span>
<span class="linenr">18: </span>        } <span style="color: #51afef;">else</span> {
<span class="linenr">19: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">transition to state 1 to match next char</span>
<span class="linenr">20: </span>            state = <span style="color: #da8548; font-weight: bold;">1</span>
<span class="linenr">21: </span>        }
<span class="linenr">22: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">2</span>:
<span class="linenr">23: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">read the char, discard it and</span>
<span class="linenr">24: </span>        state = <span style="color: #da8548; font-weight: bold;">1</span>
<span class="linenr">25: </span>    }
<span class="linenr">26: </span>}
</pre>
</div></li>
<li><p>
clear logic: store states in the code
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">no variable to store state</span>
<span class="linenr"> 2: </span><span style="color: #51afef;">if</span> <span style="color: #c678dd;">read</span>() != <span style="color: #98be65;">'"'</span> {
<span class="linenr"> 3: </span>    <span style="color: #51afef;">return</span> <span style="color: #a9a1e1;">false</span>
<span class="linenr"> 4: </span>}
<span class="linenr"> 5: </span><span style="color: #51afef;">var</span> <span style="color: #dcaeea;">c</span> <span style="color: #ECBE7B;">rune</span> <span style="color: #5B6268;">// </span><span style="color: #5B6268;">c is a Unicode, alias to int32</span>
<span class="linenr"> 6: </span><span style="color: #51afef;">for</span> c != <span style="color: #98be65;">'"'</span> {
<span class="linenr"> 7: </span>    c = <span style="color: #c678dd;">read</span>()
<span class="linenr"> 8: </span>    <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'\\'</span> {
<span class="linenr"> 9: </span>        <span style="color: #c678dd;">read</span>()  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">skip the next char</span>
<span class="linenr">10: </span>    }
<span class="linenr">11: </span>}
<span class="linenr">12: </span><span style="color: #51afef;">return</span> <span style="color: #a9a1e1;">true</span>
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orgeae3186" class="outline-3">
<h3 id="orgeae3186"><span class="section-number-3">2.2.</span> When the state variable cannot be avoided</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li><p>
the function needs to return the state
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">quoter</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 2: </span>    state <span style="color: #ECBE7B;">int</span>
<span class="linenr"> 3: </span>}
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoter</span>) <span style="color: #c678dd;">Init</span>() {
<span class="linenr"> 6: </span>    r.state = <span style="color: #da8548; font-weight: bold;">0</span>
<span class="linenr"> 7: </span>}
<span class="linenr"> 8: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">proess each char based on current state</span>
<span class="linenr"> 9: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoter</span>) <span style="color: #c678dd;">Write</span>(<span style="color: #dcaeea;">c</span> <span style="color: #ECBE7B;">rune</span>) <span style="color: #ECBE7B;">Status</span> {
<span class="linenr">10: </span>    <span style="color: #51afef;">switch</span> q.state {
<span class="linenr">11: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">0</span>:
<span class="linenr">12: </span>        <span style="color: #51afef;">if</span> c != <span style="color: #98be65;">'"'</span> {
<span class="linenr">13: </span>            <span style="color: #51afef;">return</span> BadInput
<span class="linenr">14: </span>        }
<span class="linenr">15: </span>        q.state = <span style="color: #da8548; font-weight: bold;">1</span>
<span class="linenr">16: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">1</span>:
<span class="linenr">17: </span>        <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'"'</span> {
<span class="linenr">18: </span>            <span style="color: #51afef;">return</span> Success
<span class="linenr">19: </span>        }
<span class="linenr">20: </span>        <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'\\'</span> {
<span class="linenr">21: </span>            q.state = <span style="color: #da8548; font-weight: bold;">2</span>
<span class="linenr">22: </span>        } <span style="color: #51afef;">else</span> {
<span class="linenr">23: </span>            q.state = <span style="color: #da8548; font-weight: bold;">1</span>
<span class="linenr">24: </span>        }
<span class="linenr">25: </span>    <span style="color: #51afef;">case</span> <span style="color: #da8548; font-weight: bold;">2</span>:
<span class="linenr">26: </span>        q.state = <span style="color: #da8548; font-weight: bold;">1</span>
<span class="linenr">27: </span>    }
<span class="linenr">28: </span>    <span style="color: #51afef;">return</span> NeedMoreInput
<span class="linenr">29: </span>}
</pre>
</div></li>
<li><p>
use additional goroutines to hold states
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">quoter</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 2: </span>    char <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">rune</span>
<span class="linenr"> 3: </span>    status <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Status</span>
<span class="linenr"> 4: </span>}
<span class="linenr"> 5: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoter</span>) <span style="color: #c678dd;">Init</span>() {
<span class="linenr"> 6: </span>    q.char = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">rune</span>)
<span class="linenr"> 7: </span>    q.status = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Status</span>)
<span class="linenr"> 8: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">need to make sure why and when the goroutine will exit</span>
<span class="linenr"> 9: </span>    <span style="color: #51afef;">go</span> q.<span style="color: #c678dd;">parse</span>()
<span class="linenr">10: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">blocks until it receives an initial status from parse()</span>
<span class="linenr">11: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">to ensure that parse() is ready, i.e., q.status = NeedMoreInput</span>
<span class="linenr">12: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">before Write() is called</span>
<span class="linenr">13: </span>    &lt;-q.status
<span class="linenr">14: </span>}
<span class="linenr">15: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">Write sends the next char to q.char, which will be receivecd by parse()</span>
<span class="linenr">16: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">the status is a public state accessible by the user</span>
<span class="linenr">17: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoter</span>) <span style="color: #c678dd;">Write</span>(<span style="color: #dcaeea;">r</span> <span style="color: #ECBE7B;">rune</span>) <span style="color: #ECBE7B;">Status</span> {
<span class="linenr">18: </span>    q.char &lt;- c
<span class="linenr">19: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">wait for the result</span>
<span class="linenr">20: </span>    <span style="color: #51afef;">return</span> &lt;-q.status
<span class="linenr">21: </span>}
<span class="linenr">22: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoteReader</span>) <span style="color: #c678dd;">parse</span>() {
<span class="linenr">23: </span>    <span style="color: #51afef;">if</span> q.<span style="color: #c678dd;">read</span>() != <span style="color: #98be65;">'"'</span> {
<span class="linenr">24: </span>        q.status &lt;- SyntaxError
<span class="linenr">25: </span>        <span style="color: #51afef;">return</span>
<span class="linenr">26: </span>    }
<span class="linenr">27: </span>    <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">c</span> <span style="color: #ECBE7B;">rune</span>
<span class="linenr">28: </span>    <span style="color: #51afef;">for</span> c!= <span style="color: #98be65;">'"'</span> {
<span class="linenr">29: </span>        c = q.<span style="color: #c678dd;">read</span>()
<span class="linenr">30: </span>        <span style="color: #51afef;">if</span> c == <span style="color: #98be65;">'\\'</span> {
<span class="linenr">31: </span>            q.<span style="color: #c678dd;">read</span>()
<span class="linenr">32: </span>        }
<span class="linenr">33: </span>    }
<span class="linenr">34: </span>    q.status &lt;- Done
<span class="linenr">35: </span>}
<span class="linenr">36: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">a helper function used in parse() to return the next char in q.char</span>
<span class="linenr">37: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">q</span> *<span style="color: #ECBE7B;">quoter</span>) <span style="color: #c678dd;">read</span>() <span style="color: #ECBE7B;">int</span> {
<span class="linenr">38: </span>    q.status &lt;- NeedMoreInput
<span class="linenr">39: </span>    <span style="color: #51afef;">return</span> &lt;- q.char
<span class="linenr">40: </span>}
<span class="linenr">41: </span><span style="color: #51afef;">func</span> <span style="color: #c678dd;">main</span>() {
<span class="linenr">42: </span>    <span style="color: #dcaeea;">q</span> := &amp;<span style="color: #ECBE7B;">quoter</span>{}
<span class="linenr">43: </span>    q.<span style="color: #c678dd;">Init</span>()
<span class="linenr">44: </span>
<span class="linenr">45: </span>    <span style="color: #dcaeea;">input</span> := <span style="color: #98be65;">`"Hello, \"World\""`</span>
<span class="linenr">46: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">_</span>, <span style="color: #dcaeea;">c</span> := <span style="color: #51afef;">range</span> input {
<span class="linenr">47: </span>        <span style="color: #dcaeea;">status</span> := q.<span style="color: #c678dd;">Write</span>(c)
<span class="linenr">48: </span>    }
<span class="linenr">49: </span>}
</pre>
</div></li>
<li>check goroutine blockage
<ul class="org-ul">
<li><code>Ctrl-\</code> sends <code>SIGQUIT</code></li>
<li>use the HTTP server&rsquo;s <code>/debug/pprof/goroutine</code> if importing <code>net/http</code></li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org19624ac" class="outline-2">
<h2 id="org19624ac"><span class="section-number-2">3.</span> Pattern 1: publish/subscribe server</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>the information goes one way: server -&gt; client</li>
<li>close a channel to signal no new values will be sent</li>
<li><p>
prefer <code>defer</code> when unlocking the mutex
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">Server</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 2: </span>    mu  <span style="color: #ECBE7B;">sync.Mutex</span> <span style="color: #5B6268;">// </span><span style="color: #5B6268;">protect sub</span>
<span class="linenr"> 3: </span>    sub <span style="color: #51afef;">map</span>[<span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>]<span style="color: #ECBE7B;">bool</span>  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">whether a channel should be closed</span>
<span class="linenr"> 4: </span>}
<span class="linenr"> 5: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Init</span>() {
<span class="linenr"> 6: </span>    s.sub = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">map</span>[<span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>]<span style="color: #ECBE7B;">bool</span>)
<span class="linenr"> 7: </span>}
<span class="linenr"> 8: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">publish an event to all subscribed channel</span>
<span class="linenr"> 9: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Publish</span>(<span style="color: #dcaeea;">e</span> <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">10: </span>    s.mu.<span style="color: #c678dd;">Lock</span>()  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">each method could be called by many clients</span>
<span class="linenr">11: </span>    <span style="color: #51afef;">defer</span> s.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">12: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">need mutex here since it needs to read s.sub state</span>
<span class="linenr">13: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">c</span> := <span style="color: #51afef;">range</span> s.sub {
<span class="linenr">14: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if a goroutine consumes the channel events too slow</span>
<span class="linenr">15: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">then a new event publish has to wait</span>
<span class="linenr">16: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">before it can send to the channel</span>
<span class="linenr">17: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">can add channel buffer to mitigate this</span>
<span class="linenr">18: </span>        c &lt;- e
<span class="linenr">19: </span>    }
<span class="linenr">20: </span>}
<span class="linenr">21: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">a channel starts to subscribe</span>
<span class="linenr">22: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Subscribe</span>(<span style="color: #dcaeea;">c</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">23: </span>    s.mu.<span style="color: #c678dd;">Lock</span>()
<span class="linenr">24: </span>    <span style="color: #51afef;">defer</span> s.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">25: </span>    <span style="color: #51afef;">if</span> s.sub[c] {
<span class="linenr">26: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">the mutex wil also be unlocked with defer</span>
<span class="linenr">27: </span>        <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"pubsub: already subscribed"</span>)     }
<span class="linenr">28: </span>    s.sub[c] = <span style="color: #a9a1e1;">true</span>
<span class="linenr">29: </span>}
<span class="linenr">30: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">a channel cancels the subscription</span>
<span class="linenr">31: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Cancel</span>(<span style="color: #dcaeea;">c</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">32: </span>    s.mu.<span style="color: #c678dd;">Lock</span>()
<span class="linenr">33: </span>    <span style="color: #51afef;">defer</span> s.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">34: </span>    <span style="color: #51afef;">if</span> <span style="color: #51afef; font-weight: bold;">!</span>s.sub[c] {
<span class="linenr">35: </span>        <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"pubsub: not subscribed"</span>)
<span class="linenr">36: </span>    }
<span class="linenr">37: </span>    <span style="color: #c678dd;">close</span>(c)
<span class="linenr">38: </span>    <span style="color: #c678dd;">delete</span>(s.sub, c)
<span class="linenr">39: </span>}
</pre>
</div></li>
</ul>
</div>
<div id="outline-container-org460463a" class="outline-3">
<h3 id="org460463a"><span class="section-number-3">3.1.</span> Options for slow goroutines</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>slow down event generation</li>
<li>drop events if it cannot be sent, e.g., <code>os/signal</code>, <code>runtime/pprof</code></li>
<li><p>
queue events, e.g., add a <code>helper</code> between the server and each client, which also separates the concerns
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">func</span> <span style="color: #c678dd;">helper</span>(<span style="color: #dcaeea;">in</span> &lt;-<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Event</span>, <span style="color: #dcaeea;">out</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr"> 2: </span>    <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">q</span> []<span style="color: #ECBE7B;">Event</span>
<span class="linenr"> 3: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if the in is closed, flash out the pending events in q</span>
<span class="linenr"> 4: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">and close out</span>
<span class="linenr"> 5: </span>    <span style="color: #51afef;">for</span> in != <span style="color: #a9a1e1;">nil</span> || <span style="color: #c678dd;">len</span>(q) &gt; <span style="color: #da8548; font-weight: bold;">0</span> {
<span class="linenr"> 6: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">decide whether and what to send</span>
<span class="linenr"> 7: </span>        <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">sendOut</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #dcaeea;">Event</span>
<span class="linenr"> 8: </span>        <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">next</span> <span style="color: #ECBE7B;">Event</span>
<span class="linenr"> 9: </span>        <span style="color: #51afef;">if</span> <span style="color: #c678dd;">len</span>(q) &gt; <span style="color: #da8548; font-weight: bold;">0</span> {
<span class="linenr">10: </span>            sendOut = out
<span class="linenr">11: </span>            next = q[<span style="color: #da8548; font-weight: bold;">0</span>]
<span class="linenr">12: </span>        }
<span class="linenr">13: </span>        <span style="color: #51afef;">select</span> {
<span class="linenr">14: </span>        <span style="color: #51afef;">case</span> <span style="color: #dcaeea;">e</span>, <span style="color: #dcaeea;">ok</span> := &lt;-in: <span style="color: #5B6268;">// </span><span style="color: #5B6268;">never reaches here after in = nil</span>
<span class="linenr">15: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">ok tells whether in is closed</span>
<span class="linenr">16: </span>            <span style="color: #51afef;">if</span> <span style="color: #51afef; font-weight: bold;">!</span>ok {
<span class="linenr">17: </span>                in = <span style="color: #a9a1e1;">nil</span>
<span class="linenr">18: </span>                <span style="color: #51afef;">break</span>
<span class="linenr">19: </span>            }
<span class="linenr">20: </span>            q = <span style="color: #c678dd;">append</span>(q, e)
<span class="linenr">21: </span>        <span style="color: #51afef;">case</span> sendOut &lt;- next: <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if len(q) == 0, sendOut = nil</span>
<span class="linenr">22: </span>            q = q[<span style="color: #da8548; font-weight: bold;">1</span>:]
<span class="linenr">23: </span>        }
<span class="linenr">24: </span>    }
<span class="linenr">25: </span>    <span style="color: #c678dd;">close</span>(out)
<span class="linenr">26: </span>}
</pre>
</div></li>
<li><p>
convert mutexes into goroutines, not suitable for Raft where state transition is complex
</p>
<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">Server</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 2: </span>    publish   <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Event</span>
<span class="linenr"> 3: </span>    subscribe <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">subReq</span>  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a channel to queue unhandled subscription</span>
<span class="linenr"> 4: </span>    cancel    <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">subReq</span>
<span class="linenr"> 5: </span>}
<span class="linenr"> 6: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">subReq</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 7: </span>    c  <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>
<span class="linenr"> 8: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a signal of whether an operation succeeds</span>
<span class="linenr"> 9: </span>    ok <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">bool</span>
<span class="linenr">10: </span>}
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Init</span>() {
<span class="linenr">13: </span>    s.publish = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Event</span>)
<span class="linenr">14: </span>    s.subscribe = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">subReq</span>)
<span class="linenr">15: </span>    s.cancel = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">subReq</span>)
<span class="linenr">16: </span>    <span style="color: #51afef;">go</span> s.<span style="color: #c678dd;">loop</span>()
<span class="linenr">17: </span>}
<span class="linenr">18: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Publish</span>(<span style="color: #dcaeea;">e</span> <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">19: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">no mutex is required here</span>
<span class="linenr">20: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">as it does not read state</span>
<span class="linenr">21: </span>    s.publish &lt;- e
<span class="linenr">22: </span>}
<span class="linenr">23: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Subscribe</span>(<span style="color: #dcaeea;">c</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">24: </span>    <span style="color: #dcaeea;">r</span> := <span style="color: #ECBE7B;">subReq</span>{<span style="color: #a9a1e1;">c</span>: c, <span style="color: #a9a1e1;">ok</span>: <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">bool</span>)}
<span class="linenr">25: </span>    s.subscribe &lt;- r
<span class="linenr">26: </span>    <span style="color: #51afef;">if</span> <span style="color: #51afef; font-weight: bold;">!</span>&lt;-r.ok {  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">wait for loop() handle result</span>
<span class="linenr">27: </span>        <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"pubsub: already subscribed"</span>)
<span class="linenr">28: </span>    }
<span class="linenr">29: </span>}
<span class="linenr">30: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">Cancel</span>(<span style="color: #dcaeea;">c</span> <span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>) {
<span class="linenr">31: </span>    <span style="color: #dcaeea;">r</span> := <span style="color: #ECBE7B;">subReq</span>{<span style="color: #a9a1e1;">c</span>: c, <span style="color: #a9a1e1;">ok</span>: <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">bool</span>)}
<span class="linenr">32: </span>    s.cancel &lt;- r
<span class="linenr">33: </span>    <span style="color: #51afef;">if</span> <span style="color: #51afef; font-weight: bold;">!</span>&lt;-r.ok {
<span class="linenr">34: </span>        <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"pubusb: not subscribed"</span>)
<span class="linenr">35: </span>    }
<span class="linenr">36: </span>}
<span class="linenr">37: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">s</span> *<span style="color: #ECBE7B;">Server</span>) <span style="color: #c678dd;">loop</span>() {
<span class="linenr">38: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">now sub is a local variable, no lock is needed</span>
<span class="linenr">39: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">sub maps from a subscribed channel to a helper channel</span>
<span class="linenr">40: </span>    <span style="color: #dcaeea;">sub</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">map</span>[<span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>]<span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Event</span>)
<span class="linenr">41: </span>    <span style="color: #51afef;">for</span> {
<span class="linenr">42: </span>        <span style="color: #51afef;">select</span> {
<span class="linenr">43: </span>        <span style="color: #51afef;">case</span> <span style="color: #dcaeea;">e</span> := &lt;-s.publish:
<span class="linenr">44: </span>            <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">_</span>, <span style="color: #dcaeea;">h</span> := <span style="color: #51afef;">range</span> sub {
<span class="linenr">45: </span>                <span style="color: #5B6268;">// </span><span style="color: #5B6268;">the event is published to a helper channel</span>
<span class="linenr">46: </span>                h &lt;- e
<span class="linenr">47: </span>            }
<span class="linenr">48: </span>        <span style="color: #51afef;">case</span> <span style="color: #dcaeea;">r</span> := &lt;-s.subscribe:
<span class="linenr">49: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">the helper channel exists</span>
<span class="linenr">50: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">meaning the subscriber has been handled before</span>
<span class="linenr">51: </span>            <span style="color: #51afef;">if</span> sub[r.c] != <span style="color: #a9a1e1;">nil</span> {
<span class="linenr">52: </span>                r.ok &lt;- <span style="color: #a9a1e1;">false</span>
<span class="linenr">53: </span>                <span style="color: #51afef;">break</span>
<span class="linenr">54: </span>            }
<span class="linenr">55: </span>            h = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Event</span>)
<span class="linenr">56: </span>            <span style="color: #51afef;">go</span> <span style="color: #c678dd;">helper</span>(h, r.c)
<span class="linenr">57: </span>            sub[r.c] = h
<span class="linenr">58: </span>            r.ok &lt;- <span style="color: #a9a1e1;">true</span>
<span class="linenr">59: </span>        <span style="color: #51afef;">case</span> <span style="color: #dcaeea;">c</span> := &lt;-s.cancel:
<span class="linenr">60: </span>            <span style="color: #51afef;">if</span> <span style="color: #51afef; font-weight: bold;">!</span>sub[r.c] == <span style="color: #a9a1e1;">nil</span>{
<span class="linenr">61: </span>                r.ok &lt;- <span style="color: #a9a1e1;">false</span>
<span class="linenr">62: </span>                <span style="color: #51afef;">break</span>
<span class="linenr">63: </span>            }
<span class="linenr">64: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">close the helper channel</span>
<span class="linenr">65: </span>            <span style="color: #c678dd;">close</span>(sub[r.c])
<span class="linenr">66: </span>            <span style="color: #c678dd;">delete</span>(sub, r.c)
<span class="linenr">67: </span>            r.ok &lt;- <span style="color: #a9a1e1;">true</span>
<span class="linenr">68: </span>        }
<span class="linenr">69: </span>    }
<span class="linenr">70: </span>}
</pre>
</div></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orga6afd64" class="outline-2">
<h2 id="orga6afd64"><span class="section-number-2">4.</span> Pattern 2: work scheduler</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><p>
\(M\) tasks assigned to \(N\) servers/workers, \( M >> N\).
</p>

<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">func</span> <span style="color: #c678dd;">Schedule</span>(<span style="color: #dcaeea;">servers</span> []<span style="color: #ECBE7B;">string</span>, <span style="color: #dcaeea;">numTask</span> <span style="color: #ECBE7B;">int</span>,
<span class="linenr"> 2: </span>    <span style="color: #dcaeea;">call</span> <span style="color: #51afef;">func</span>(<span style="color: #dcaeea;">srv</span> <span style="color: #ECBE7B;">string</span>, <span style="color: #dcaeea;">task</span> <span style="color: #ECBE7B;">int</span>)) {
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>    <span style="color: #dcaeea;">idle</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">string</span>, <span style="color: #c678dd;">len</span>(servers))
<span class="linenr"> 5: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">initialize a channel of idle servers</span>
<span class="linenr"> 6: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">_</span>, <span style="color: #dcaeea;">srv</span> := <span style="color: #51afef;">range</span> servers {
<span class="linenr"> 7: </span>        idle &lt;- srv
<span class="linenr"> 8: </span>    }
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">task</span> := <span style="color: #da8548; font-weight: bold;">0</span>, task &lt; numTask; task++ {
<span class="linenr">11: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if using task in the for loop rather than a local task,</span>
<span class="linenr">12: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">there is a race: the loop goes on before the goroutinue starts,</span>
<span class="linenr">13: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">so that some tasks are skipped.</span>
<span class="linenr">14: </span>        <span style="color: #dcaeea;">task</span> := task
<span class="linenr">15: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if moving srv := &lt;- idle inside goroutine</span>
<span class="linenr">16: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a lot of goroutines are created simoutaneously and hung</span>
<span class="linenr">17: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">due to non-idle server</span>
<span class="linenr">18: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">leaving it outside so that a goroutine is only created when</span>
<span class="linenr">19: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">there is an idle server (but it slows down the main loop)</span>
<span class="linenr">20: </span>        <span style="color: #dcaeea;">srv</span> := &lt;-idle
<span class="linenr">21: </span>        <span style="color: #51afef;">go</span> <span style="color: #51afef;">func</span>() {
<span class="linenr">22: </span>            <span style="color: #c678dd;">call</span>(srv, task) <span style="color: #5B6268;">// </span><span style="color: #5B6268;">server does the task</span>
<span class="linenr">23: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">serve finishes the task and becomes idle again</span>
<span class="linenr">24: </span>            idle &lt;- srv
<span class="linenr">25: </span>        }()
<span class="linenr">26: </span>    }
<span class="linenr">27: </span>
<span class="linenr">28: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">determine when all tasks are done / all servers are idle</span>
<span class="linenr">29: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">this is used to prevent early exit when all tasks have been assigned</span>
<span class="linenr">30: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">but the last servers have not finished</span>
<span class="linenr">31: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">i</span> :=<span style="color: #da8548; font-weight: bold;">0</span>; i &lt; <span style="color: #c678dd;">len</span>(servers); i++ {
<span class="linenr">32: </span>        &lt;-idle
<span class="linenr">33: </span>    }
<span class="linenr">34: </span>}
</pre>
</div></li>

<li><p>
Optimization for the above code: while the task loop creates goroutines \(M\) times, actually there are only at most \(N\) active goroutines at any time.
</p>
<ul class="org-ul">
<li>Better to spin off a goroutine for each server.</li>
<li>The number of servers can be dynamic.</li>
</ul>

<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">func</span> <span style="color: #c678dd;">Schedule</span>(<span style="color: #dcaeea;">servers</span> <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">string</span>, <span style="color: #dcaeea;">numTask</span> <span style="color: #ECBE7B;">int</span>,
<span class="linenr"> 2: </span>    <span style="color: #dcaeea;">call</span> <span style="color: #51afef;">func</span>(<span style="color: #dcaeea;">srv</span> <span style="color: #ECBE7B;">string</span>, <span style="color: #dcaeea;">task</span> <span style="color: #ECBE7B;">int</span>)) {
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>    <span style="color: #dcaeea;">work</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">int</span>)  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a queue of all works yet to be done</span>
<span class="linenr"> 5: </span>    <span style="color: #dcaeea;">done</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">bool</span>) <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a queue of all done tasks</span>
<span class="linenr"> 6: </span>    <span style="color: #dcaeea;">exit</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">bool</span>) <span style="color: #5B6268;">// </span><span style="color: #5B6268;">signal when should not pull new servers</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>    <span style="color: #dcaeea;">runTasks</span> := <span style="color: #51afef;">func</span>(<span style="color: #dcaeea;">srv</span> <span style="color: #ECBE7B;">string</span>) {
<span class="linenr"> 9: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">keep polling until work is closed</span>
<span class="linenr">10: </span>        <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">task</span> := <span style="color: #51afef;">range</span> work {
<span class="linenr">11: </span>            <span style="color: #51afef;">if</span> <span style="color: #c678dd;">call</span>(srv, task) {
<span class="linenr">12: </span>                done &lt;- <span style="color: #a9a1e1;">true</span>
<span class="linenr">13: </span>            } <span style="color: #51afef;">else</span> {
<span class="linenr">14: </span>                <span style="color: #5B6268;">// </span><span style="color: #5B6268;">repush the task if it failed</span>
<span class="linenr">15: </span>                work &lt;- task
<span class="linenr">16: </span>            }
<span class="linenr">17: </span>        }
<span class="linenr">18: </span>    }
<span class="linenr">19: </span>
<span class="linenr">20: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">use a goroutine to avoid hanging when</span>
<span class="linenr">21: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">no server is available</span>
<span class="linenr">22: </span>    <span style="color: #51afef;">go</span> <span style="color: #51afef;">func</span>() {
<span class="linenr">23: </span>        <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">_</span>, <span style="color: #dcaeea;">srv</span> := <span style="color: #51afef;">range</span> servers {
<span class="linenr">24: </span>            <span style="color: #51afef;">for</span> {
<span class="linenr">25: </span>                <span style="color: #51afef;">select</span> {
<span class="linenr">26: </span>                <span style="color: #51afef;">case</span> <span style="color: #dcaeea;">src</span> := &lt;-servers:
<span class="linenr">27: </span>                    <span style="color: #51afef;">go</span> <span style="color: #c678dd;">runTasks</span>(srv)
<span class="linenr">28: </span>                <span style="color: #51afef;">case</span> &lt;-exit:
<span class="linenr">29: </span>                    <span style="color: #51afef;">return</span>
<span class="linenr">30: </span>                }
<span class="linenr">31: </span>            }
<span class="linenr">32: </span>        }
<span class="linenr">33: </span>    }()
<span class="linenr">34: </span>
<span class="linenr">35: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">The following code has a deadlock!</span>
<span class="linenr">36: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">In the runTasks, the server pushes to done channel when a task is done.</span>
<span class="linenr">37: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">However, the done channel is only pulled when the main routine has</span>
<span class="linenr">38: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">pushed all tasks and close the work channel.</span>
<span class="linenr">39: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">Therefore any server hangs when trying push the second done work.</span>
<span class="linenr">40: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">for taks := 0; task &lt; numTask; task++ {</span>
<span class="linenr">41: </span>    <span style="color: #5B6268;">//  </span><span style="color: #5B6268;">work &lt;- task</span>
<span class="linenr">42: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">}</span>
<span class="linenr">43: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">// signal no more task so that servers know</span>
<span class="linenr">44: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">// when to termiante</span>
<span class="linenr">45: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">close(work)</span>
<span class="linenr">46: </span>
<span class="linenr">47: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">// wait until all tasks are done</span>
<span class="linenr">48: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">for i := 0; i &lt; numTask; i++ {</span>
<span class="linenr">49: </span>    <span style="color: #5B6268;">//  </span><span style="color: #5B6268;">&lt;-done</span>
<span class="linenr">50: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">}</span>
<span class="linenr">51: </span>
<span class="linenr">52: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">fix 1: one can switch between work and donw channel</span>
<span class="linenr">53: </span>    <span style="color: #dcaeea;">i</span> := <span style="color: #da8548; font-weight: bold;">0</span>
<span class="linenr">54: </span><span style="color: #a9a1e1;">WorkLoop</span>:
<span class="linenr">55: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">task</span> := <span style="color: #da8548; font-weight: bold;">0</span>; task &lt; numTask; task++ {
<span class="linenr">56: </span>        <span style="color: #51afef;">for</span> {
<span class="linenr">57: </span>            <span style="color: #51afef;">select</span> {
<span class="linenr">58: </span>            <span style="color: #51afef;">case</span> work &lt;- task:
<span class="linenr">59: </span>                <span style="color: #51afef;">continue</span> <span style="color: #a9a1e1;">WorkLoop</span>
<span class="linenr">60: </span>            <span style="color: #51afef;">case</span> &lt;-done:
<span class="linenr">61: </span>                i++
<span class="linenr">62: </span>            }
<span class="linenr">63: </span>        }
<span class="linenr">64: </span>    }
<span class="linenr">65: </span>
<span class="linenr">66: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">wait for the last assigned tasks to be done</span>
<span class="linenr">67: </span>    <span style="color: #51afef;">for</span> ; i &lt; numTask; i++ {
<span class="linenr">68: </span>        &lt;-done
<span class="linenr">69: </span>    }
<span class="linenr">70: </span>
<span class="linenr">71: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">only close work channel in the end,</span>
<span class="linenr">72: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">in case some tasks failed and need to be redo</span>
<span class="linenr">73: </span>    <span style="color: #c678dd;">close</span>(work)
<span class="linenr">74: </span>    exit &lt;- <span style="color: #a9a1e1;">true</span> <span style="color: #5B6268;">// </span><span style="color: #5B6268;">stop pulling new servers</span>
<span class="linenr">75: </span>
<span class="linenr">76: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">fix 2: move the work assignment to a separate go routine</span>
<span class="linenr">77: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">go func() {</span>
<span class="linenr">78: </span>    <span style="color: #5B6268;">//  </span><span style="color: #5B6268;">for task := ; task &lt; numTask; task++ {</span>
<span class="linenr">79: </span>    <span style="color: #5B6268;">//      </span><span style="color: #5B6268;">work &lt;- task</span>
<span class="linenr">80: </span>    <span style="color: #5B6268;">//  </span><span style="color: #5B6268;">}</span>
<span class="linenr">81: </span>    <span style="color: #5B6268;">//  </span><span style="color: #5B6268;">close(work)</span>
<span class="linenr">82: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">}()</span>
<span class="linenr">83: </span>
<span class="linenr">84: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">fix 3: increase buffer for the work channel</span>
<span class="linenr">85: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">work := make(chan int, numTask)</span>
<span class="linenr">86: </span>}
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org65862ae" class="outline-2">
<h2 id="org65862ae"><span class="section-number-2">5.</span> Pattern 3: replicated service client</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><p>
A client replicates its requests to multiple servers, waits for the first reply and changes its preferred server.
</p>

<div class="org-src-container">
<pre class="src src-go"><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">c</span> *<span style="color: #ECBE7B;">Client</span>) <span style="color: #c678dd;">Call</span>(<span style="color: #dcaeea;">args</span> <span style="color: #ECBE7B;">Args</span>) <span style="color: #ECBE7B;">Reply</span> {
    <span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">result</span> <span style="color: #51afef;">struct</span> {
        serverID <span style="color: #ECBE7B;">int</span>
        reply <span style="color: #ECBE7B;">Reply</span>
    }

    <span style="color: #51afef;">const</span> <span style="color: #a9a1e1;">timeout</span> = <span style="color: #da8548; font-weight: bold;">1</span> * time.Second
    <span style="color: #dcaeea;">t</span> := time.<span style="color: #c678dd;">NewTimer</span>(timeout)
    <span style="color: #51afef;">defer</span> t.<span style="color: #c678dd;">Stop</span>()

    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">a channel for all servers to send reply</span>
    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">so that even if the client has received a reply</span>
    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">other later replies don't hang</span>
    <span style="color: #dcaeea;">done</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">result</span>, <span style="color: #c678dd;">len</span>(c.servers))

    c.mu.<span style="color: #c678dd;">Lock</span>()
    <span style="color: #dcaeea;">prefer</span> := c.prefer
    c.mu.<span style="color: #c678dd;">Unlock</span>()

    <span style="color: #51afef;">var</span> <span style="color: #dcaeea;">r</span> <span style="color: #ECBE7B;">result</span>
    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">off</span> := <span style="color: #da8548; font-weight: bold;">0</span>; off &lt; <span style="color: #c678dd;">len</span>(c.servers); off++ {
        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">start from the preferred server</span>
        <span style="color: #dcaeea;">id</span> := (prefer + off) % <span style="color: #c678dd;">len</span>(c.servers)
        <span style="color: #51afef;">go</span> <span style="color: #51afef;">func</span>() {
            done &lt;- <span style="color: #ECBE7B;">result</span>{id, c.<span style="color: #c678dd;">callOne</span>(c.servers[id], arfs)}
        }()

        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">now wait for either a done signal or a timeout</span>
        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if it is done, don't send to other servers</span>
        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">otherwise, reset the timer and sends to the next server</span>
        <span style="color: #51afef;">select</span> {
        <span style="color: #51afef;">case</span> r = &lt;-done:
            <span style="color: #51afef;">goto</span> <span style="color: #a9a1e1;">Done</span>  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">use a goto if it makes code clear</span>
        <span style="color: #51afef;">case</span> &lt;-t.C:
            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">timeout</span>
            t.<span style="color: #c678dd;">Reset</span>(timeout)
        }
    }

    r = &lt;-done  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">wait for the first reply even if it is a RPC timeout</span>

<span style="color: #a9a1e1;">Done</span>:
    c.mu.<span style="color: #c678dd;">Lock</span>()
    c.prefer = r.serverID <span style="color: #5B6268;">// </span><span style="color: #5B6268;">update preference</span>
    c.mu.<span style="color: #c678dd;">Unlock</span>()
    <span style="color: #51afef;">return</span> r.reply
}

</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org29d6849" class="outline-2">
<h2 id="org29d6849"><span class="section-number-2">6.</span> Pattern 4: Protocol multiplexer</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
A multiplexer sits in front of a service and forward messages between multiple clients and the service, e.g., an RPC.
</p>

<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">ProtocolMux</span> <span style="color: #51afef;">interface</span> {
<span class="linenr"> 2: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">A mux is binded to a specific service</span>
<span class="linenr"> 3: </span>    <span style="color: #c678dd;">Init</span>(<span style="color: #ECBE7B;">Service</span>)
<span class="linenr"> 4: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">A client uses this method to send message to the service</span>
<span class="linenr"> 5: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">and wait for the service reply</span>
<span class="linenr"> 6: </span>    <span style="color: #c678dd;">Call</span>(<span style="color: #ECBE7B;">Msg</span>) <span style="color: #ECBE7B;">Msg</span>
<span class="linenr"> 7: </span>}
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">Methods that a service exposes to let a mux use</span>
<span class="linenr">10: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">Underlining messgae processing are in the implementation</span>
<span class="linenr">11: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">of the actual service struct</span>
<span class="linenr">12: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">Service</span> <span style="color: #51afef;">interface</span> {
<span class="linenr">13: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">A tag is a muxing identifier in the request or reply message,</span>
<span class="linenr">14: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">e.g., which client channel to send the reply</span>
<span class="linenr">15: </span>    <span style="color: #c678dd;">ReadTag</span>(<span style="color: #ECBE7B;">Msg</span>) <span style="color: #ECBE7B;">int64</span>
<span class="linenr">16: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">Send a request message to the service</span>
<span class="linenr">17: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">multiple sends cannot be called concurrently</span>
<span class="linenr">18: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">probably due to only a single channel between</span>
<span class="linenr">19: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">mux and the service (serialization)</span>
<span class="linenr">20: </span>    <span style="color: #c678dd;">Send</span>(<span style="color: #ECBE7B;">Msg</span>)
<span class="linenr">21: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">Waits and return the reply message,</span>
<span class="linenr">22: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">multiple recvs cannot be called concurrently</span>
<span class="linenr">23: </span>    <span style="color: #c678dd;">Recv</span>() <span style="color: #ECBE7B;">Msg</span>
<span class="linenr">24: </span>}
</pre>
</div></li>

<li><p>
The mux maintains a channel to queue unsent requests and a channel to queue unsent replies.
</p>

<div class="org-src-container">
<pre class="src src-go"><span class="linenr"> 1: </span><span style="color: #51afef;">type</span> <span style="color: #ECBE7B;">Mux</span> <span style="color: #51afef;">struct</span> {
<span class="linenr"> 2: </span>    srv <span style="color: #ECBE7B;">Service</span>
<span class="linenr"> 3: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">stores unsent requests</span>
<span class="linenr"> 4: </span>    send <span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Msg</span>
<span class="linenr"> 5: </span>    mu <span style="color: #ECBE7B;">sync.Mutex</span>
<span class="linenr"> 6: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">maps channel tag to channel</span>
<span class="linenr"> 7: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">whose replies have not been sent out</span>
<span class="linenr"> 8: </span>    pending <span style="color: #51afef;">map</span>[<span style="color: #ECBE7B;">int64</span>]<span style="color: #51afef;">chan</span>&lt;- <span style="color: #ECBE7B;">Msg</span>
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">m</span> *<span style="color: #ECBE7B;">Mux</span>) <span style="color: #c678dd;">Init</span>(<span style="color: #dcaeea;">srv</span> <span style="color: #ECBE7B;">Service</span>) {
<span class="linenr">12: </span>    m.srv = srv
<span class="linenr">13: </span>    m.pending = <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">map</span>[<span style="color: #ECBE7B;">int64</span>]<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Msg</span>)
<span class="linenr">14: </span>    <span style="color: #51afef;">go</span> m.<span style="color: #c678dd;">sendLoop</span>()
<span class="linenr">15: </span>    <span style="color: #51afef;">go</span> m.<span style="color: #c678dd;">recvLoop</span>()
<span class="linenr">16: </span>}
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">sending out queued requests</span>
<span class="linenr">19: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">m</span> *<span style="color: #ECBE7B;">Mux</span>) <span style="color: #ECBE7B;">sendLoop</span> {
<span class="linenr">20: </span>    <span style="color: #51afef;">for</span> <span style="color: #dcaeea;">args</span> := <span style="color: #51afef;">range</span> m.send {
<span class="linenr">21: </span>        m.srv.<span style="color: #c678dd;">Send</span>(args)
<span class="linenr">22: </span>    }
<span class="linenr">23: </span>}
<span class="linenr">24: </span>
<span class="linenr">25: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">m</span> *<span style="color: #ECBE7B;">Mux</span>) <span style="color: #c678dd;">recvLoop</span>() {
<span class="linenr">26: </span>    <span style="color: #51afef;">for</span> {
<span class="linenr">27: </span>        <span style="color: #dcaeea;">reply</span> := m.srv.<span style="color: #c678dd;">Recv</span>()
<span class="linenr">28: </span>        <span style="color: #dcaeea;">tag</span> := m.srv.<span style="color: #c678dd;">ReadTag</span>(reply)
<span class="linenr">29: </span>        m.mu.<span style="color: #c678dd;">Lock</span>()
<span class="linenr">30: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">get the reply channel</span>
<span class="linenr">31: </span>        <span style="color: #dcaeea;">done</span> := m.pending[tag]
<span class="linenr">32: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">clear the channel since the message loop</span>
<span class="linenr">33: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">is complete</span>
<span class="linenr">34: </span>        <span style="color: #c678dd;">delete</span>(m.pending, tag)
<span class="linenr">35: </span>        m.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">36: </span>
<span class="linenr">37: </span>        <span style="color: #51afef;">if</span> done == <span style="color: #a9a1e1;">nil</span> {
<span class="linenr">38: </span>            <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"unexpected reply"</span>)
<span class="linenr">39: </span>        }
<span class="linenr">40: </span>        done &lt;- reply
<span class="linenr">41: </span>    }
<span class="linenr">42: </span>
<span class="linenr">43: </span>}
<span class="linenr">44: </span>
<span class="linenr">45: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">Clients call this method concurrently</span>
<span class="linenr">46: </span><span style="color: #51afef;">func</span> (<span style="color: #dcaeea;">m</span> *<span style="color: #ECBE7B;">Mux</span>) <span style="color: #c678dd;">Call</span>(<span style="color: #dcaeea;">args</span> <span style="color: #ECBE7B;">Msg</span>) (<span style="color: #dcaeea;">reply</span> <span style="color: #ECBE7B;">Msg</span>) {
<span class="linenr">47: </span>    <span style="color: #dcaeea;">tag</span> := m.srv.<span style="color: #c678dd;">ReadTag</span>(args)
<span class="linenr">48: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">to record which message should reply</span>
<span class="linenr">49: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">to which client</span>
<span class="linenr">50: </span>    <span style="color: #dcaeea;">done</span> := <span style="color: #c678dd;">make</span>(<span style="color: #51afef;">chan</span> <span style="color: #ECBE7B;">Msg</span>, <span style="color: #da8548; font-weight: bold;">1</span>)
<span class="linenr">51: </span>    m.mu.<span style="color: #c678dd;">Lock</span>()
<span class="linenr">52: </span>    <span style="color: #51afef;">if</span> m.pending[tag] != <span style="color: #a9a1e1;">nil</span> {
<span class="linenr">53: </span>        m.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">54: </span>        <span style="color: #c678dd;">panic</span>(<span style="color: #98be65;">"duplicate request"</span>)
<span class="linenr">55: </span>    }
<span class="linenr">56: </span>    m.pending[tag] = done
<span class="linenr">57: </span>    m.mu.<span style="color: #c678dd;">Unlock</span>()
<span class="linenr">58: </span>    m.send &lt;- args
<span class="linenr">59: </span>    <span style="color: #51afef;">return</span> &lt;-done <span style="color: #5B6268;">// </span><span style="color: #5B6268;">hang until a reply is received</span>
<span class="linenr">60: </span>}
</pre>
</div></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-go.html">go</a> <a href="https://chenyo.me/tag-design-pattern.html">design-pattern</a> <a href="https://chenyo.me/tag-study.html">study</a> </div>]]></description>
  <category><![CDATA[go]]></category>
  <category><![CDATA[design-pattern]]></category>
  <category><![CDATA[study]]></category>
  <link>https://chenyo.me/2024-06-25-go-patterns.html</link>
  <guid>https://chenyo.me/2024-06-25-go-patterns.html</guid>
  <pubDate>Tue, 25 Jun 2024 21:25:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[A stupid debugging experience]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org7f8202e">1. What happened</a></li>
<li><a href="#org196d9c0">2. What did I do</a></li>
<li><a href="#org2a04b1e">3. Another issue of running RPC in docker</a></li>
</ul>
</div>
</nav>
<div id="outline-container-org7f8202e" class="outline-2">
<h2 id="org7f8202e"><span class="section-number-2">1.</span> What happened</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Servers SA and SB have the same docker installation, and the same running container CA and CB.</li>
<li><p>
A Go file G can be built on CA, but on CB it reports this error:
</p>
<p class="verse">
runtime: failed to create new OS thread (have 2 already; errno=11)<br>
runtime: may need to increase max user processes (ulimit -u)<br>
fatal error: newosproc<br>
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org196d9c0" class="outline-2">
<h2 id="org196d9c0"><span class="section-number-2">2.</span> What did I do</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>I compared any related configurations between SA and SB. and between CA and CB, e.g., <code class="src src-bash"><span style="color: #c678dd;">ulimit</span> -a</code>, <code class="src src-bash">/etc/security/limits.conf</code>. They all look the same.</li>
<li>I created a new container CN on SA with the same docker image, CN can compile G.</li>
<li>I looked into the (complex) <code>docker run</code> script for CA/CB and figured out it was due to a resource constraint <code>--pids-limit 100</code>.
<ul class="org-ul">
<li>Increasing this limit to 200 seems resolve the issue, but I had no idea why the Go compiler needed so many resources (perhaps due to package I imported).</li>
</ul></li>
<li><b><b>Until this point</b></b>, I realized, since the container did not support the compilation, why not just only transfer the compiled binary!
<ul class="org-ul">
<li>How silly that I didn&rsquo;t even try this in the beginning!</li>
</ul></li>
<li>Since the program imports the <code>net</code> package, and there is a <a href="https://www.reddit.com/r/golang/comments/pi97sp/what_is_the_consequence_of_using_cgo_enabled0/">known issue</a> of Alpine image running a Go binary file, I followed the post and disabled <code>CGO</code> on SA, then <code>docker cp</code> the binary to CA, and it worked.</li>
</ol>
</div>
</div>
<div id="outline-container-org2a04b1e" class="outline-2">
<h2 id="org2a04b1e"><span class="section-number-2">3.</span> Another issue of running RPC in docker</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>The other day, I also spent hours debugging a <code>route unreachable</code> error when I want to send a request from CA to SA.</li>
<li>The CA is using the <code>bridge</code> network, so it should talk to SA via SA&rsquo;s interface <code>docker0</code> within the subnet <code>172.17.0.0/16</code>.</li>
<li><p>
However, in my case, the docker by default rejects packages from any container as shown in SA&rsquo;s <code>tcpdump</code> result:
</p>
<p class="verse">
172.17.0.1-&gt;172.17.0.3 ICMP host unreachable- admin prohibited, length 68<br>
</p></li>

<li><p>
By checking SA&rsquo;s iptables, I found this rule:
</p>
<div class="org-src-container">
<pre class="src src-bash">  -A INPUT -j REJECT --reject-with icmp-host-prohibited
</pre>
</div>
<ul class="org-ul">
<li>Strangely, the <code>ping</code> still works with this rule.</li>
</ul></li>

<li><p>
In the end, I need to append a new rule to make the RPC work.
</p>
<div class="org-src-container">
<pre class="src src-bash">  iptables -I INPUT <span style="color: #da8548; font-weight: bold;">1</span> -i docker0 -p tcp --dport &lt;port&gt; -s 172.17.0.0/16 -j ACCEPT
</pre>
</div></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-docker.html">docker</a> <a href="https://chenyo.me/tag-go.html">go</a> <a href="https://chenyo.me/tag-linux.html">linux</a> <a href="https://chenyo.me/tag-alpine.html">alpine</a> </div>]]></description>
  <category><![CDATA[docker]]></category>
  <category><![CDATA[go]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[alpine]]></category>
  <link>https://chenyo.me/2024-06-24-a-stupid-debugging-experience.html</link>
  <guid>https://chenyo.me/2024-06-24-a-stupid-debugging-experience.html</guid>
  <pubDate>Mon, 24 Jun 2024 15:06:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Linux use tips]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgde99fb3">1. i3</a>
<ul>
<li><a href="#org3d16fa4">1.1. Move specific workspaces between different monitors (ref)</a></li>
</ul>
</li>
<li><a href="#org46bbc25">2. Org</a>
<ul>
<li><a href="#org2572ba0">2.1. Format code blocks</a></li>
</ul>
</li>
<li><a href="#orgbbccf77">3. Emacs</a>
<ul>
<li><a href="#orge3126b1">3.1. Prefix argument</a></li>
<li><a href="#org2615f5c">3.2. Help functions</a></li>
</ul>
</li>
<li><a href="#orga4046d1">4. Vim</a>
<ul>
<li><a href="#orgd85260c">4.1. Delete a word backwards</a></li>
</ul>
</li>
<li><a href="#orgc5a6400">5. Firefox</a>
<ul>
<li><a href="#orgde49f07">5.1. Cache bypass refresh</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<div id="outline-container-orgde99fb3" class="outline-2">
<h2 id="orgde99fb3"><span class="section-number-2">1.</span> i3</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org3d16fa4" class="outline-3">
<h3 id="org3d16fa4"><span class="section-number-3">1.1.</span> Move specific workspaces between different monitors <a href="https://i3wm.org/docs/user-contributed/swapping-workspaces.html">(ref)</a></h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>Adjust the monitor relative positions.</li>
<li>Use <code class="src src-bash">i3-msg -- move workspace to output right</code> to move the <b><b>current</b></b> workspace to the monitor on the right</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-org46bbc25" class="outline-2">
<h2 id="org46bbc25"><span class="section-number-2">2.</span> Org</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org2572ba0" class="outline-3">
<h3 id="org2572ba0"><span class="section-number-3">2.1.</span> Format code blocks</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li>Use the shortcut <code>&lt; s &lt;TAB&gt;</code> to create a code block.</li>
<li>Use <code>C-c '</code> to enter the code environment to use the language major mode.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgbbccf77" class="outline-2">
<h2 id="orgbbccf77"><span class="section-number-2">3.</span> Emacs</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-orge3126b1" class="outline-3">
<h3 id="orge3126b1"><span class="section-number-3">3.1.</span> Prefix argument</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>When the function includes <code>(interactive "P")</code>, it means one can add a prefix argument <code>C-u 1</code> (or any integer) to trigger some effect.</li>
</ul>
</div>
</div>
<div id="outline-container-org2615f5c" class="outline-3">
<h3 id="org2615f5c"><span class="section-number-3">3.2.</span> Help functions</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li><code>Ctrl-h K</code> get the function name given a shortcut</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orga4046d1" class="outline-2">
<h2 id="orga4046d1"><span class="section-number-2">4.</span> Vim</h2>
<div class="outline-text-2" id="text-4">
</div>
<div id="outline-container-orgd85260c" class="outline-3">
<h3 id="orgd85260c"><span class="section-number-3">4.1.</span> Delete a word backwards</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li><code>diw</code> or <code>daw</code></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc5a6400" class="outline-2">
<h2 id="orgc5a6400"><span class="section-number-2">5.</span> Firefox</h2>
<div class="outline-text-2" id="text-5">
</div>
<div id="outline-container-orgde49f07" class="outline-3">
<h3 id="orgde49f07"><span class="section-number-3">5.1.</span> Cache bypass refresh</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li><code>Ctrl+Shift+R</code></li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-tool.html">tool</a> <a href="https://chenyo.me/tag-linux.html">linux</a> <a href="https://chenyo.me/tag-i3.html">i3</a> <a href="https://chenyo.me/tag-arch.html">arch</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[i3]]></category>
  <category><![CDATA[arch]]></category>
  <link>https://chenyo.me/2024-06-24-linux-use-tips.html</link>
  <guid>https://chenyo.me/2024-06-24-linux-use-tips.html</guid>
  <pubDate>Mon, 24 Jun 2024 09:17:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Weblab notes: React route]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4e3db74">1. Router</a></li>
<li><a href="#orge5eb930">2. Link</a></li>
<li><a href="#org632e312">3. Workshop 3</a>
<ul>
<li><a href="#org79e1d9b">3.1. Structure</a></li>
<li><a href="#org50d9c4d">3.2. States</a></li>
<li><a href="#orged81644">3.3. Props</a></li>
<li><a href="#org50e992e">3.4. Why passing down the update function in props 1, 4, 6?</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://docs.google.com/presentation/d/1hrTjcB8GU4hWPHzS5lI17WALogP4biZ1UAtyxXfafkI/edit#slide=id.p">web.lab lectures</a>.
</p>
<div id="outline-container-org4e3db74" class="outline-2">
<h2 id="org4e3db74"><span class="section-number-2">1.</span> Router</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>use the Reach <a href="https://reach.tech/router/">Reach Router</a> library</li>
<li><p>
URL -&gt; Router -&gt; render different components
</p>
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>&lt;App&gt;
<span class="linenr">2: </span>  <span style="color: #5B6268;">// </span><span style="color: #5B6268;">conditional rendering based on curren url</span>
<span class="linenr">3: </span>  &lt;Router&gt;
<span class="linenr">4: </span>    &lt;Home path=<span style="color: #98be65;">"/"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">root path</span>
<span class="linenr">5: </span>    &lt;Dashboard path=<span style="color: #98be65;">"dashboard"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">relative to the current URL</span>
<span class="linenr">6: </span>    &lt;Team path=<span style="color: #98be65;">"/team"</span> /&gt; <span style="color: #5B6268;">// </span><span style="color: #5B6268;">absolute path: root path + "/team"</span>
<span class="linenr">7: </span>    &lt;NotFound <span style="color: #51afef;">default</span> /&gt;
<span class="linenr">8: </span>  &lt;/Router&gt;
<span class="linenr">9: </span>&lt;/App&gt;;
</pre>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orge5eb930" class="outline-2">
<h2 id="orge5eb930"><span class="section-number-2">2.</span> Link</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>relative: <code class="src src-js">&lt;Link to=<span style="color: #98be65;">"newpage"</span>&gt;Click me&lt;/Link&gt;</code></li>
<li>absolute: <code class="src src-js">&lt;Link to=<span style="color: #98be65;">"/newpage"</span>&gt;Click me&lt;/Link&gt;</code></li>
</ul>
</div>
</div>
<div id="outline-container-org632e312" class="outline-2">
<h2 id="org632e312"><span class="section-number-2">3.</span> Workshop 3</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org79e1d9b" class="outline-3">
<h3 id="org79e1d9b"><span class="section-number-3">3.1.</span> Structure</h3>
<div class="outline-text-3" id="text-3-1">

<figure id="org9cf8e8a">
<img src="./static/workshop-3-structure.png" alt="workshop-3-structure.png" align="center" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>The Catbook structure in workshop 3</figcaption>
</figure>
</div>
</div>
<div id="outline-container-org50d9c4d" class="outline-3">
<h3 id="org50d9c4d"><span class="section-number-3">3.2.</span> States</h3>
<div class="outline-text-3" id="text-3-2">
<table>


<colgroup>
<col  class="org-center">
</colgroup>

<colgroup>
<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-center">name</th>
<th scope="col" class="org-left">states</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-center">Feed</td>
<td class="org-left"><code>stories</code>: a list of stories</td>
</tr>

<tr>
<td class="org-center">Card</td>
<td class="org-left"><code>comments</code>: a list of comments for a story id</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orged81644" class="outline-3">
<h3 id="orged81644"><span class="section-number-3">3.3.</span> Props</h3>
<div class="outline-text-3" id="text-3-3">
<table>


<colgroup>
<col  class="org-center">
</colgroup>

<colgroup>
<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-center">index</th>
<th scope="col" class="org-left">props</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-center">1</td>
<td class="org-left">a function to update <code>stories</code></td>
</tr>

<tr>
<td class="org-center">2</td>
<td class="org-left">all attributes in a story</td>
</tr>

<tr>
<td class="org-center">3</td>
<td class="org-left">the attributes used to display a story</td>
</tr>

<tr>
<td class="org-center">4</td>
<td class="org-left">a story id; a list of comments under the story; a function to update <code>comments</code></td>
</tr>

<tr>
<td class="org-center">5</td>
<td class="org-left">all attributes in a comment</td>
</tr>

<tr>
<td class="org-center">6</td>
<td class="org-left">a comment id; the function to update <code>comments</code></td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org50e992e" class="outline-3">
<h3 id="org50e992e"><span class="section-number-3">3.4.</span> Why passing down the update function in props 1, 4, 6?</h3>
<div class="outline-text-3" id="text-3-4">
<ul class="org-ul">
<li>To share the parent states, i.e., <code>stories</code> and <code>comments</code> to child component. Since the post action happens in the child component, we need a way to automatically update the states to see new contents immediately.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-web.html">web</a> <a href="https://chenyo.me/tag-react.html">react</a> <a href="https://chenyo.me/tag-mit.html">mit</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[web]]></category>
  <category><![CDATA[react]]></category>
  <category><![CDATA[mit]]></category>
  <link>https://chenyo.me/2024-06-23-weblab-notes:-react-route.html</link>
  <guid>https://chenyo.me/2024-06-23-weblab-notes:-react-route.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:38:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Weblab notes: React hooks]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga8c7ca9">1. What is a React hook</a>
<ul>
<li><a href="#org7146a36">1.1. <code>useState</code> is not enough</a></li>
<li><a href="#org800f295">1.2. <code>useEffect</code> runs after specific variable change</a></li>
</ul>
</li>
<li><a href="#org1a4306a">2. React hook patterns</a>
<ul>
<li><a href="#org6de65a1">2.1. Fetch and send data</a></li>
<li><a href="#org0543254">2.2. Conditional rendering</a></li>
<li><a href="#org8b46cf9">2.3. Render an array of Data</a></li>
</ul>
</li>
<li><a href="#org696a40e">3. Example: Stopwatch</a></li>
<li><a href="#org047cf77">4. DOM and component mounting</a></li>
</ul>
</div>
</nav>
<p>
This is a personal note for the <a href="https://docs.google.com/presentation/d/1n5RlpgBtXQ1OHvutx9TRLotWizyg2BPKv_780DD4-90/edit#slide=id.gb2bbafee77_1_66">web.lab lectures</a>.
</p>
<div id="outline-container-orga8c7ca9" class="outline-2">
<h2 id="orga8c7ca9"><span class="section-number-2">1.</span> What is a React hook</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>Special functions to access parts of the component lifestyle.</li>
<li>e.g., <code>useState</code></li>
</ul>
</div>
<div id="outline-container-org7146a36" class="outline-3">
<h3 id="org7146a36"><span class="section-number-3">1.1.</span> <code>useState</code> is not enough</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #51afef;">const</span> [<span style="color: #dcaeea;">persons</span>, <span style="color: #dcaeea;">setPersons</span>] = useState([]);
<span class="linenr">2: </span>
<span class="linenr">3: </span>testingStuff = () =&gt; {
<span class="linenr">4: </span>    <span style="color: #5B6268;">/* </span><span style="color: #5B6268;">assume persons is empty before</span><span style="color: #5B6268;"> */</span>
<span class="linenr">5: </span>    setPersons([...persons, <span style="color: #98be65;">"me"</span>]);
<span class="linenr">6: </span>}
<span class="linenr">7: </span>console.log(persons);
</pre>
</div>

<ul class="org-ul">
<li>The output of <code class="src src-js">console.log</code> is <code>[]</code> instead of <code>["me"]</code> because setting a state is <b><b>async</b></b>!</li>
<li>To do something immediately after a state is changed, use <code>useEffect</code> hook!</li>
</ul>
</div>
</div>
<div id="outline-container-org800f295" class="outline-3">
<h3 id="org800f295"><span class="section-number-3">1.2.</span> <code>useEffect</code> runs after specific variable change</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>useEffect(() =&gt; {
<span class="linenr">2: </span>    console.log(persons);
<span class="linenr">3: </span>}, [persons]);
</pre>
</div>

<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span>useEffect(() =&gt; {
<span class="linenr">2: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">do something, e.g., interact with an external service</span><span style="color: #5B6268;"> */</span>
<span class="linenr">3: </span>
<span class="linenr">4: </span><span style="color: #51afef;">return</span> () =&gt; {
<span class="linenr">5: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">cleanup function on dismount, e.g., disconnect from external service</span><span style="color: #5B6268;"> */</span>
<span class="linenr">6: </span>}
<span class="linenr">7: </span>}, [<span style="color: #5B6268;">/*</span><span style="color: #5B6268;">dependencies</span><span style="color: #5B6268;"> */</span>])
</pre>
</div>

<ul class="org-ul">
<li><code class="src src-js">useEffect(myFunction, [var1, var2])</code> calls <code>myFunction</code> everytime when <code>var1</code> or <code>var2</code> changes</li>
<li><code class="src src-js">useEffect(myFunction, []])</code> calls only once when the component is rendered for the first time (on mount)</li>
<li><code class="src src-js">useEffect(myFunction)</code> calls at every render</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1a4306a" class="outline-2">
<h2 id="org1a4306a"><span class="section-number-2">2.</span> React hook patterns</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org6de65a1" class="outline-3">
<h3 id="org6de65a1"><span class="section-number-3">2.1.</span> Fetch and send data</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">fetch data on mount</span><span style="color: #5B6268;"> */</span>
<span class="linenr">2: </span>useEffect(() =&gt; {
<span class="linenr">3: </span>    get(<span style="color: #98be65;">"/api/packages"</span>).then((packageList) =&gt; {
<span class="linenr">4: </span>        setPackages(packageList);
<span class="linenr">5: </span>    });
<span class="linenr">6: </span>}, []);
</pre>
</div>

<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">send data then toggle admin state</span><span style="color: #5B6268;"> */</span>
<span class="linenr">2: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">handleToggleAdmin</span> = () =&gt; {
<span class="linenr">3: </span>    <span style="color: #5B6268;">// </span><span style="color: #5B6268;">.then(), do something once the promise is fulfilled</span>
<span class="linenr">4: </span>    post(<span style="color: #98be65;">"/api/user/admin"</span>, { admin: !admin }).then(() =&gt; {
<span class="linenr">5: </span>        setAdmin(!admin);
<span class="linenr">6: </span>    });
<span class="linenr">7: </span>};
<span class="linenr">8: </span><span style="color: #5B6268;">/* </span><span style="color: #5B6268;">&lt;Button onClick={handleToggleAdmin}</span><span style="color: #5B6268;"> */</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org0543254" class="outline-3">
<h3 id="org0543254"><span class="section-number-3">2.2.</span> Conditional rendering</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">JSX is a way of writing HTML in js</span>
<span class="linenr">2: </span><span style="color: #51afef;">let</span> <span style="color: #dcaeea;">content</span> = loading ? &lt;p&gt;Loading...&lt;/p&gt; : &lt;p&gt;Loaded&lt;/p&gt;;
<span class="linenr">3: </span><span style="color: #51afef;">return</span> (
<span class="linenr">4: </span>    &lt;div&gt;
<span class="linenr">5: </span>        &lt;h1&gt;Title&lt;/h1&gt;
<span class="linenr">6: </span>        {content}
<span class="linenr">7: </span>    &lt;/div&gt;
<span class="linenr">8: </span>);
</pre>
</div>
</div>
</div>
<div id="outline-container-org8b46cf9" class="outline-3">
<h3 id="org8b46cf9"><span class="section-number-3">2.3.</span> Render an array of Data</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr">1: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">data</span> = [
<span class="linenr">2: </span>    { id: <span style="color: #da8548; font-weight: bold;">0</span>, text: <span style="color: #98be65;">"Text 1"</span> },
<span class="linenr">3: </span>    { id: <span style="color: #da8548; font-weight: bold;">1</span>, text: <span style="color: #98be65;">"Text 2"</span> },
<span class="linenr">4: </span>];
<span class="linenr">5: </span><span style="color: #5B6268;">// </span><span style="color: #5B6268;">render a component for each data item</span>
<span class="linenr">6: </span><span style="color: #51afef;">return</span> data.map((item) =&gt; (
<span class="linenr">7: </span>    &lt;ItemComponent key={item.id}&gt;{item.text}&lt;/ItemComponent&gt;
<span class="linenr">8: </span>));
</pre>
</div>
<ul class="org-ul">
<li><code>key</code> is a special prop in React; it is used identify which item has changed efficiently</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org696a40e" class="outline-2">
<h2 id="org696a40e"><span class="section-number-2">3.</span> Example: Stopwatch</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-js"><span class="linenr"> 1: </span><span style="color: #51afef;">const</span> <span style="color: #dcaeea;">Stopwatch</span> = () =&gt; {
<span class="linenr"> 2: </span>    <span style="color: #51afef;">const</span> [<span style="color: #dcaeea;">time</span>, <span style="color: #dcaeea;">setTimer</span>] = useState(<span style="color: #da8548; font-weight: bold;">0</span>);
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>    useEffect(() =&gt; {
<span class="linenr"> 5: </span>        <span style="color: #51afef;">const</span> <span style="color: #dcaeea;">timer</span> = setInterval(() =&gt; {
<span class="linenr"> 6: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">setTimer accepts either a new state value,</span>
<span class="linenr"> 7: </span>            <span style="color: #5B6268;">// </span><span style="color: #5B6268;">or a function that takes the previous state (oldTime) as an argument and returns the new state</span>
<span class="linenr"> 8: </span>            setTime((oldTime) =&gt; oldTime + <span style="color: #da8548; font-weight: bold;">1</span>);}, <span style="color: #da8548; font-weight: bold;">1000</span>);
<span class="linenr"> 9: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">if not properly cleanup after unmounting</span>
<span class="linenr">10: </span>        <span style="color: #5B6268;">// </span><span style="color: #5B6268;">the timer will continue to run even the state no longer exists</span>
<span class="linenr">11: </span>        <span style="color: #51afef;">return</span> () =&gt; clearInterval(timer);
<span class="linenr">12: </span>    }, []);
<span class="linenr">13: </span>    <span style="color: #51afef;">return</span> &lt;&gt;TIme: {time}&lt;/&gt;;
<span class="linenr">14: </span>};
</pre>
</div>
</div>
</div>
<div id="outline-container-org047cf77" class="outline-2">
<h2 id="org047cf77"><span class="section-number-2">4.</span> DOM and component mounting</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>DOM (Document Object Model): a programming interface for web documents; represents the structure of a document, e.g., HTML, as a tree of objects, where each object corresponds to a part of the document; it dynamically updates the document contents
<ul class="org-ul">
<li>React is a framework that manipulates DOM</li>
</ul></li>
<li>A React component is unmounted when:
<ul class="org-ul">
<li>conditional rendering</li>
<li>routing; navigating from one route to another</li>
<li>its parent component is unmounted</li>
</ul></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-study.html">study</a> <a href="https://chenyo.me/tag-web.html">web</a> <a href="https://chenyo.me/tag-react.html">react</a> <a href="https://chenyo.me/tag-mit.html">mit</a> </div>]]></description>
  <category><![CDATA[study]]></category>
  <category><![CDATA[web]]></category>
  <category><![CDATA[react]]></category>
  <category><![CDATA[mit]]></category>
  <link>https://chenyo.me/2024-06-23-weblab-notes:-react-hooks.html</link>
  <guid>https://chenyo.me/2024-06-23-weblab-notes:-react-hooks.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:21:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Hello world]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb274040">1. Hallo!</a></li>
</ul>
</div>
</nav>
<div id="outline-container-orgb274040" class="outline-2">
<h2 id="orgb274040"><span class="section-number-2">1.</span> Hallo!</h2>
<div class="outline-text-2" id="text-1">
<p>
This is the first blog with org-static-blog!
</p>
</div>
</div>
<div class="taglist"><a href="https://chenyo.me/tags.html">Tags</a>: <a href="https://chenyo.me/tag-personal.html">personal</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <link>https://chenyo.me/2024-06-23-hello-world.html</link>
  <guid>https://chenyo.me/2024-06-23-hello-world.html</guid>
  <pubDate>Sun, 23 Jun 2024 18:04:00 +0200</pubDate>
</item>
</channel>
</rss>
